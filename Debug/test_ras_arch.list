
test_ras_arch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008690  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  080087a0  080087a0  000187a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b64  08008b64  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008b64  08008b64  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b64  08008b64  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b64  08008b64  00018b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b68  08008b68  00018b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002898  20000074  08008be0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000290c  08008be0  0002290c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f11  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045d1  00000000  00000000  00040fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00045580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  00046c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c438  00000000  00000000  000481d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000190af  00000000  00000000  00064610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099fdd  00000000  00000000  0007d6bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011769c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006630  00000000  00000000  001176f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08008788 	.word	0x08008788

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08008788 	.word	0x08008788

08000150 <CANZenTool_setFilter>:
#include <stdbool.h>
#include <stdio.h>
extern uint32_t mailbox;
void CANZenTool_setFilter(CAN_HandleTypeDef *hcan,
		CAN_FilterTypeDef *canFilterConfig, bool isActive, uint32_t filterBank,
		uint32_t filterId, uint32_t filterMaskId) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	603b      	str	r3, [r7, #0]
 800015c:	4613      	mov	r3, r2
 800015e:	71fb      	strb	r3, [r7, #7]

	if (isActive) {
 8000160:	79fb      	ldrb	r3, [r7, #7]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d003      	beq.n	800016e <CANZenTool_setFilter+0x1e>
		canFilterConfig->FilterActivation = CAN_FILTER_ENABLE;
 8000166:	68bb      	ldr	r3, [r7, #8]
 8000168:	2201      	movs	r2, #1
 800016a:	621a      	str	r2, [r3, #32]
 800016c:	e002      	b.n	8000174 <CANZenTool_setFilter+0x24>
	} else {
		canFilterConfig->FilterActivation = CAN_FILTER_DISABLE;
 800016e:	68bb      	ldr	r3, [r7, #8]
 8000170:	2200      	movs	r2, #0
 8000172:	621a      	str	r2, [r3, #32]
	}

	canFilterConfig->FilterBank = filterBank;
 8000174:	68bb      	ldr	r3, [r7, #8]
 8000176:	683a      	ldr	r2, [r7, #0]
 8000178:	615a      	str	r2, [r3, #20]
	canFilterConfig->FilterFIFOAssignment = CAN_RX_FIFO0;
 800017a:	68bb      	ldr	r3, [r7, #8]
 800017c:	2200      	movs	r2, #0
 800017e:	611a      	str	r2, [r3, #16]

	canFilterConfig->FilterMaskIdHigh = filterMaskId<<5;
 8000180:	69fb      	ldr	r3, [r7, #28]
 8000182:	015a      	lsls	r2, r3, #5
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	609a      	str	r2, [r3, #8]
	canFilterConfig->FilterIdHigh = 	filterId<<5;
 8000188:	69bb      	ldr	r3, [r7, #24]
 800018a:	015a      	lsls	r2, r3, #5
 800018c:	68bb      	ldr	r3, [r7, #8]
 800018e:	601a      	str	r2, [r3, #0]

	canFilterConfig->FilterMaskIdLow =  0xFFF<<5;
 8000190:	68bb      	ldr	r3, [r7, #8]
 8000192:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <CANZenTool_setFilter+0x70>)
 8000194:	60da      	str	r2, [r3, #12]
	canFilterConfig->FilterIdLow = 		0;
 8000196:	68bb      	ldr	r3, [r7, #8]
 8000198:	2200      	movs	r2, #0
 800019a:	605a      	str	r2, [r3, #4]

	canFilterConfig->FilterMode = CAN_FILTERMODE_IDMASK;
 800019c:	68bb      	ldr	r3, [r7, #8]
 800019e:	2200      	movs	r2, #0
 80001a0:	619a      	str	r2, [r3, #24]
	canFilterConfig->SlaveStartFilterBank = 12;
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	220c      	movs	r2, #12
 80001a6:	625a      	str	r2, [r3, #36]	; 0x24
	canFilterConfig->FilterScale = CAN_FILTERSCALE_32BIT;
 80001a8:	68bb      	ldr	r3, [r7, #8]
 80001aa:	2201      	movs	r2, #1
 80001ac:	61da      	str	r2, [r3, #28]


	HAL_CAN_ConfigFilter(hcan, canFilterConfig);
 80001ae:	68b9      	ldr	r1, [r7, #8]
 80001b0:	68f8      	ldr	r0, [r7, #12]
 80001b2:	f001 f920 	bl	80013f6 <HAL_CAN_ConfigFilter>
}
 80001b6:	bf00      	nop
 80001b8:	3710      	adds	r7, #16
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	0001ffe0 	.word	0x0001ffe0

080001c4 <CANZenTool_writeStdCanFrame>:

CAN_TxHeaderTypeDef CANZenTool_writeStdCanFrame(uint32_t dlc, uint32_t id,
bool isData) {
 80001c4:	b4b0      	push	{r4, r5, r7}
 80001c6:	b08b      	sub	sp, #44	; 0x2c
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	607a      	str	r2, [r7, #4]
 80001d0:	70fb      	strb	r3, [r7, #3]

	CAN_TxHeaderTypeDef TxHeader;

	TxHeader.DLC = dlc;
 80001d2:	68bb      	ldr	r3, [r7, #8]
 80001d4:	623b      	str	r3, [r7, #32]
	TxHeader.ExtId = 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	617b      	str	r3, [r7, #20]
	TxHeader.IDE = CAN_ID_STD;
 80001da:	2300      	movs	r3, #0
 80001dc:	61bb      	str	r3, [r7, #24]

	if (isData) {
 80001de:	78fb      	ldrb	r3, [r7, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <CANZenTool_writeStdCanFrame+0x26>

		TxHeader.RTR = CAN_RTR_DATA;
 80001e4:	2300      	movs	r3, #0
 80001e6:	61fb      	str	r3, [r7, #28]
 80001e8:	e001      	b.n	80001ee <CANZenTool_writeStdCanFrame+0x2a>
	} else {

		TxHeader.RTR = CAN_RTR_REMOTE;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61fb      	str	r3, [r7, #28]
	}

	TxHeader.StdId = id;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	613b      	str	r3, [r7, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80001f2:	2300      	movs	r3, #0
 80001f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return TxHeader;
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	461d      	mov	r5, r3
 80001fc:	f107 0410 	add.w	r4, r7, #16
 8000200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000204:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000208:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800020c:	68f8      	ldr	r0, [r7, #12]
 800020e:	372c      	adds	r7, #44	; 0x2c
 8000210:	46bd      	mov	sp, r7
 8000212:	bcb0      	pop	{r4, r5, r7}
 8000214:	4770      	bx	lr
	...

08000218 <CANZenTool_sendCanFrameMsg>:

void CANZenTool_sendCanFrameMsg(CAN_HandleTypeDef *hcan,
		CAN_TxHeaderTypeDef *TxHeader, uint8_t TxData[], uint32_t *pTxMailbox) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	603b      	str	r3, [r7, #0]
	if (HAL_CAN_AddTxMessage(hcan, TxHeader, TxData, &mailbox) != HAL_OK) {
 8000226:	4b07      	ldr	r3, [pc, #28]	; (8000244 <CANZenTool_sendCanFrameMsg+0x2c>)
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	68b9      	ldr	r1, [r7, #8]
 800022c:	68f8      	ldr	r0, [r7, #12]
 800022e:	f001 f9ef 	bl	8001610 <HAL_CAN_AddTxMessage>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <CANZenTool_sendCanFrameMsg+0x24>
		Error_Handler();
 8000238:	f000 fcda 	bl	8000bf0 <Error_Handler>
	}
}
 800023c:	bf00      	nop
 800023e:	3710      	adds	r7, #16
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200018cc 	.word	0x200018cc

08000248 <sensor1_init>:
 *      Author: leocelente
 */
#include "Fake.h"
#include "zenith.h"

int sensor1_init(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	osDelay(2);
 800024c:	2002      	movs	r0, #2
 800024e:	f003 faf3 	bl	8003838 <osDelay>
	return 0;
 8000252:	2300      	movs	r3, #0
}
 8000254:	4618      	mov	r0, r3
 8000256:	bd80      	pop	{r7, pc}

08000258 <sensor1_get>:

int sensor1_get(uint8_t *out_data) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	osDelay(5);
 8000260:	2005      	movs	r0, #5
 8000262:	f003 fae9 	bl	8003838 <osDelay>
	debug("Got System Data");
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <sensor1_get+0x3c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800026e:	4618      	mov	r0, r3
 8000270:	f003 fbea 	bl	8003a48 <osMutexAcquire>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d107      	bne.n	800028a <sensor1_get+0x32>
 800027a:	4807      	ldr	r0, [pc, #28]	; (8000298 <sensor1_get+0x40>)
 800027c:	f007 fc68 	bl	8007b50 <puts>
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <sensor1_get+0x3c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4618      	mov	r0, r3
 8000286:	f003 fc3d 	bl	8003b04 <osMutexRelease>
	return 0;
 800028a:	2300      	movs	r3, #0
}
 800028c:	4618      	mov	r0, r3
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200018c8 	.word	0x200018c8
 8000298:	080087a0 	.word	0x080087a0

0800029c <sensor2_init>:
// -----------------------------------
int sensor2_init(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	osDelay(1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f003 fac9 	bl	8003838 <osDelay>
	return 0;
 80002a6:	2300      	movs	r3, #0
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	bd80      	pop	{r7, pc}

080002ac <sensor2_get>:

int sensor2_get(uint8_t *out_data) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	osDelay(2);
 80002b4:	2002      	movs	r0, #2
 80002b6:	f003 fabf 	bl	8003838 <osDelay>
	debug("Got IMU Data");
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <sensor2_get+0x3c>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 fbc0 	bl	8003a48 <osMutexAcquire>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d107      	bne.n	80002de <sensor2_get+0x32>
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <sensor2_get+0x40>)
 80002d0:	f007 fc3e 	bl	8007b50 <puts>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <sensor2_get+0x3c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f003 fc13 	bl	8003b04 <osMutexRelease>
	return 0;
 80002de:	2300      	movs	r3, #0
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	200018c8 	.word	0x200018c8
 80002ec:	080087b4 	.word	0x080087b4

080002f0 <storage1_init>:
// -----------------------------------
// -----------------------------------
int storage1_init(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	osDelay(1);
 80002f4:	2001      	movs	r0, #1
 80002f6:	f003 fa9f 	bl	8003838 <osDelay>
	return 0;
 80002fa:	2300      	movs	r3, #0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	bd80      	pop	{r7, pc}

08000300 <storage1_save>:

int storage1_save(size_t const size, uint8_t const data[size]) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	osDelay(10);
 800030a:	200a      	movs	r0, #10
 800030c:	f003 fa94 	bl	8003838 <osDelay>
	debug("Saved on FLASH");
 8000310:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <storage1_save+0x40>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000318:	4618      	mov	r0, r3
 800031a:	f003 fb95 	bl	8003a48 <osMutexAcquire>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d107      	bne.n	8000334 <storage1_save+0x34>
 8000324:	4807      	ldr	r0, [pc, #28]	; (8000344 <storage1_save+0x44>)
 8000326:	f007 fc13 	bl	8007b50 <puts>
 800032a:	4b05      	ldr	r3, [pc, #20]	; (8000340 <storage1_save+0x40>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4618      	mov	r0, r3
 8000330:	f003 fbe8 	bl	8003b04 <osMutexRelease>
	return 0;
 8000334:	2300      	movs	r3, #0
}
 8000336:	4618      	mov	r0, r3
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	200018c8 	.word	0x200018c8
 8000344:	080087c4 	.word	0x080087c4

08000348 <storage2_init>:
// -----------------------------------
int storage2_init(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	osDelay(10);
 800034c:	200a      	movs	r0, #10
 800034e:	f003 fa73 	bl	8003838 <osDelay>
	return 0;
 8000352:	2300      	movs	r3, #0
}
 8000354:	4618      	mov	r0, r3
 8000356:	bd80      	pop	{r7, pc}

08000358 <storage2_save>:

int storage2_save(size_t const size, uint8_t const data[size]) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
	osDelay(10);
 8000362:	200a      	movs	r0, #10
 8000364:	f003 fa68 	bl	8003838 <osDelay>
	debug("Saved on SDCard");
 8000368:	4b0b      	ldr	r3, [pc, #44]	; (8000398 <storage2_save+0x40>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000370:	4618      	mov	r0, r3
 8000372:	f003 fb69 	bl	8003a48 <osMutexAcquire>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d107      	bne.n	800038c <storage2_save+0x34>
 800037c:	4807      	ldr	r0, [pc, #28]	; (800039c <storage2_save+0x44>)
 800037e:	f007 fbe7 	bl	8007b50 <puts>
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <storage2_save+0x40>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f003 fbbc 	bl	8003b04 <osMutexRelease>
	return 0;
 800038c:	2300      	movs	r3, #0
}
 800038e:	4618      	mov	r0, r3
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200018c8 	.word	0x200018c8
 800039c:	080087d4 	.word	0x080087d4

080003a0 <actuator_get>:
// -----------------------------------
// -----------------------------------
int actuator_get() {
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
//	debug("Actuator Get");
	return 1;
 80003a4:	2301      	movs	r3, #1
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr

080003ae <actuator_set>:

int actuator_set(int i) {
 80003ae:	b480      	push	{r7}
 80003b0:	b083      	sub	sp, #12
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	6078      	str	r0, [r7, #4]
//	debug("Actuator set");
	return 0;
 80003b6:	2300      	movs	r3, #0
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_CAN_Init+0x68>)
 80003ca:	4a19      	ldr	r2, [pc, #100]	; (8000430 <MX_CAN_Init+0x6c>)
 80003cc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 80003ce:	4b17      	ldr	r3, [pc, #92]	; (800042c <MX_CAN_Init+0x68>)
 80003d0:	2206      	movs	r2, #6
 80003d2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_CAN_Init+0x68>)
 80003d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003da:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003dc:	4b13      	ldr	r3, [pc, #76]	; (800042c <MX_CAN_Init+0x68>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_CAN_Init+0x68>)
 80003e4:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80003e8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <MX_CAN_Init+0x68>)
 80003ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003f0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_CAN_Init+0x68>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_CAN_Init+0x68>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003fe:	4b0b      	ldr	r3, [pc, #44]	; (800042c <MX_CAN_Init+0x68>)
 8000400:	2200      	movs	r2, #0
 8000402:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_CAN_Init+0x68>)
 8000406:	2201      	movs	r2, #1
 8000408:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <MX_CAN_Init+0x68>)
 800040c:	2200      	movs	r2, #0
 800040e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_CAN_Init+0x68>)
 8000412:	2200      	movs	r2, #0
 8000414:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_CAN_Init+0x68>)
 8000418:	f000 fef2 	bl	8001200 <HAL_CAN_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000422:	f000 fbe5 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20001410 	.word	0x20001410
 8000430:	40006400 	.word	0x40006400

08000434 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a24      	ldr	r2, [pc, #144]	; (80004e0 <HAL_CAN_MspInit+0xac>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d141      	bne.n	80004d8 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000454:	4b23      	ldr	r3, [pc, #140]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 8000456:	69db      	ldr	r3, [r3, #28]
 8000458:	4a22      	ldr	r2, [pc, #136]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 800045a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045e:	61d3      	str	r3, [r2, #28]
 8000460:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b1d      	ldr	r3, [pc, #116]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a1c      	ldr	r2, [pc, #112]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <HAL_CAN_MspInit+0xb0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000488:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	4813      	ldr	r0, [pc, #76]	; (80004e8 <HAL_CAN_MspInit+0xb4>)
 800049a:	f001 fdcd 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800049e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a4:	2302      	movs	r3, #2
 80004a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a8:	2303      	movs	r3, #3
 80004aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	480d      	ldr	r0, [pc, #52]	; (80004e8 <HAL_CAN_MspInit+0xb4>)
 80004b4:	f001 fdc0 	bl	8002038 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2105      	movs	r1, #5
 80004bc:	2013      	movs	r0, #19
 80004be:	f001 fd90 	bl	8001fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80004c2:	2013      	movs	r0, #19
 80004c4:	f001 fda9 	bl	800201a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2105      	movs	r1, #5
 80004cc:	2014      	movs	r0, #20
 80004ce:	f001 fd88 	bl	8001fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80004d2:	2014      	movs	r0, #20
 80004d4:	f001 fda1 	bl	800201a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40006400 	.word	0x40006400
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800

080004ec <vApplicationStackOverflowHook>:

/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
	debug("[*] STK_OF:%s [*]", pcTaskName);
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <vApplicationStackOverflowHook+0x38>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004fe:	4618      	mov	r0, r3
 8000500:	f003 faa2 	bl	8003a48 <osMutexAcquire>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d108      	bne.n	800051c <vApplicationStackOverflowHook+0x30>
 800050a:	6839      	ldr	r1, [r7, #0]
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <vApplicationStackOverflowHook+0x3c>)
 800050e:	f007 fa99 	bl	8007a44 <iprintf>
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <vApplicationStackOverflowHook+0x38>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f003 faf4 	bl	8003b04 <osMutexRelease>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200018c8 	.word	0x200018c8
 8000528:	08008894 	.word	0x08008894

0800052c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of uartSemaphore */
  uartSemaphoreHandle = osSemaphoreNew(1, 1, &uartSemaphore_attributes);
 8000530:	4a35      	ldr	r2, [pc, #212]	; (8000608 <MX_FREERTOS_Init+0xdc>)
 8000532:	2101      	movs	r1, #1
 8000534:	2001      	movs	r0, #1
 8000536:	f003 fb35 	bl	8003ba4 <osSemaphoreNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a33      	ldr	r2, [pc, #204]	; (800060c <MX_FREERTOS_Init+0xe0>)
 800053e:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of grupo1Timer */
  grupo1TimerHandle = osTimerNew(Grupo1TimerCallback, osTimerPeriodic, NULL, &grupo1Timer_attributes);
 8000540:	4b33      	ldr	r3, [pc, #204]	; (8000610 <MX_FREERTOS_Init+0xe4>)
 8000542:	2200      	movs	r2, #0
 8000544:	2101      	movs	r1, #1
 8000546:	4833      	ldr	r0, [pc, #204]	; (8000614 <MX_FREERTOS_Init+0xe8>)
 8000548:	f003 f9ba 	bl	80038c0 <osTimerNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a32      	ldr	r2, [pc, #200]	; (8000618 <MX_FREERTOS_Init+0xec>)
 8000550:	6013      	str	r3, [r2, #0]

  /* creation of grupo2Timer */
  grupo2TimerHandle = osTimerNew(Grupo2TimerCallback, osTimerPeriodic, NULL, &grupo2Timer_attributes);
 8000552:	4b32      	ldr	r3, [pc, #200]	; (800061c <MX_FREERTOS_Init+0xf0>)
 8000554:	2200      	movs	r2, #0
 8000556:	2101      	movs	r1, #1
 8000558:	4831      	ldr	r0, [pc, #196]	; (8000620 <MX_FREERTOS_Init+0xf4>)
 800055a:	f003 f9b1 	bl	80038c0 <osTimerNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a30      	ldr	r2, [pc, #192]	; (8000624 <MX_FREERTOS_Init+0xf8>)
 8000562:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of canEventQueue */
  canEventQueueHandle = osMessageQueueNew (10, sizeof(CAN_Event_t), &canEventQueue_attributes);
 8000564:	4a30      	ldr	r2, [pc, #192]	; (8000628 <MX_FREERTOS_Init+0xfc>)
 8000566:	2110      	movs	r1, #16
 8000568:	200a      	movs	r0, #10
 800056a:	f003 fbb7 	bl	8003cdc <osMessageQueueNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a2e      	ldr	r2, [pc, #184]	; (800062c <MX_FREERTOS_Init+0x100>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of grupo1Queue */
  grupo1QueueHandle = osMessageQueueNew (2, 64, &grupo1Queue_attributes);
 8000574:	4a2e      	ldr	r2, [pc, #184]	; (8000630 <MX_FREERTOS_Init+0x104>)
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	2002      	movs	r0, #2
 800057a:	f003 fbaf 	bl	8003cdc <osMessageQueueNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a2c      	ldr	r2, [pc, #176]	; (8000634 <MX_FREERTOS_Init+0x108>)
 8000582:	6013      	str	r3, [r2, #0]

  /* creation of grupo2Queue */
  grupo2QueueHandle = osMessageQueueNew (12, 12, &grupo2Queue_attributes);
 8000584:	4a2c      	ldr	r2, [pc, #176]	; (8000638 <MX_FREERTOS_Init+0x10c>)
 8000586:	210c      	movs	r1, #12
 8000588:	200c      	movs	r0, #12
 800058a:	f003 fba7 	bl	8003cdc <osMessageQueueNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a2a      	ldr	r2, [pc, #168]	; (800063c <MX_FREERTOS_Init+0x110>)
 8000592:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000594:	4a2a      	ldr	r2, [pc, #168]	; (8000640 <MX_FREERTOS_Init+0x114>)
 8000596:	2100      	movs	r1, #0
 8000598:	482a      	ldr	r0, [pc, #168]	; (8000644 <MX_FREERTOS_Init+0x118>)
 800059a:	f002 ffa9 	bl	80034f0 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a29      	ldr	r2, [pc, #164]	; (8000648 <MX_FREERTOS_Init+0x11c>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* creation of grupo1Task */
  grupo1TaskHandle = osThreadNew(StartGrupo1, NULL, &grupo1Task_attributes);
 80005a4:	4a29      	ldr	r2, [pc, #164]	; (800064c <MX_FREERTOS_Init+0x120>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4829      	ldr	r0, [pc, #164]	; (8000650 <MX_FREERTOS_Init+0x124>)
 80005aa:	f002 ffa1 	bl	80034f0 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a28      	ldr	r2, [pc, #160]	; (8000654 <MX_FREERTOS_Init+0x128>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of grupo2Task */
  grupo2TaskHandle = osThreadNew(StartGrupo2, NULL, &grupo2Task_attributes);
 80005b4:	4a28      	ldr	r2, [pc, #160]	; (8000658 <MX_FREERTOS_Init+0x12c>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4828      	ldr	r0, [pc, #160]	; (800065c <MX_FREERTOS_Init+0x130>)
 80005ba:	f002 ff99 	bl	80034f0 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <MX_FREERTOS_Init+0x134>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of canGKTask */
  canGKTaskHandle = osThreadNew(StartCanGK, NULL, &canGKTask_attributes);
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <MX_FREERTOS_Init+0x138>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4827      	ldr	r0, [pc, #156]	; (8000668 <MX_FREERTOS_Init+0x13c>)
 80005ca:	f002 ff91 	bl	80034f0 <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a26      	ldr	r2, [pc, #152]	; (800066c <MX_FREERTOS_Init+0x140>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of storageTask */
  storageTaskHandle = osThreadNew(StartStorage, NULL, &storageTask_attributes);
 80005d4:	4a26      	ldr	r2, [pc, #152]	; (8000670 <MX_FREERTOS_Init+0x144>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4826      	ldr	r0, [pc, #152]	; (8000674 <MX_FREERTOS_Init+0x148>)
 80005da:	f002 ff89 	bl	80034f0 <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a25      	ldr	r2, [pc, #148]	; (8000678 <MX_FREERTOS_Init+0x14c>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* creation of thermalCtrlTask */
  thermalCtrlTaskHandle = osThreadNew(StartThermalCtrl, NULL, &thermalCtrlTask_attributes);
 80005e4:	4a25      	ldr	r2, [pc, #148]	; (800067c <MX_FREERTOS_Init+0x150>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4825      	ldr	r0, [pc, #148]	; (8000680 <MX_FREERTOS_Init+0x154>)
 80005ea:	f002 ff81 	bl	80034f0 <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a24      	ldr	r2, [pc, #144]	; (8000684 <MX_FREERTOS_Init+0x158>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* creation of stimulusTask */
  stimulusTaskHandle = osThreadNew(StartStimulus, NULL, &stimulusTask_attributes);
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <MX_FREERTOS_Init+0x15c>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4824      	ldr	r0, [pc, #144]	; (800068c <MX_FREERTOS_Init+0x160>)
 80005fa:	f002 ff79 	bl	80034f0 <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a23      	ldr	r2, [pc, #140]	; (8000690 <MX_FREERTOS_Init+0x164>)
 8000602:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	08008aa4 	.word	0x08008aa4
 800060c:	200018c8 	.word	0x200018c8
 8000610:	08008a84 	.word	0x08008a84
 8000614:	08000a0d 	.word	0x08000a0d
 8000618:	20002500 	.word	0x20002500
 800061c:	08008a94 	.word	0x08008a94
 8000620:	08000a2d 	.word	0x08000a2d
 8000624:	20001ad0 	.word	0x20001ad0
 8000628:	08008a3c 	.word	0x08008a3c
 800062c:	200024f8 	.word	0x200024f8
 8000630:	08008a54 	.word	0x08008a54
 8000634:	200025a4 	.word	0x200025a4
 8000638:	08008a6c 	.word	0x08008a6c
 800063c:	200024fc 	.word	0x200024fc
 8000640:	08008940 	.word	0x08008940
 8000644:	08000695 	.word	0x08000695
 8000648:	20001438 	.word	0x20001438
 800064c:	08008964 	.word	0x08008964
 8000650:	080006a1 	.word	0x080006a1
 8000654:	200023e0 	.word	0x200023e0
 8000658:	08008988 	.word	0x08008988
 800065c:	080006fd 	.word	0x080006fd
 8000660:	20001b04 	.word	0x20001b04
 8000664:	080089ac 	.word	0x080089ac
 8000668:	0800078d 	.word	0x0800078d
 800066c:	200016f8 	.word	0x200016f8
 8000670:	080089d0 	.word	0x080089d0
 8000674:	080008a1 	.word	0x080008a1
 8000678:	20001eec 	.word	0x20001eec
 800067c:	080089f4 	.word	0x080089f4
 8000680:	08000975 	.word	0x08000975
 8000684:	200023e4 	.word	0x200023e4
 8000688:	08008a18 	.word	0x08008a18
 800068c:	08000999 	.word	0x08000999
 8000690:	200023ac 	.word	0x200023ac

08000694 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	osThreadExit();
 800069c:	f002 ffd2 	bl	8003644 <osThreadExit>

080006a0 <StartGrupo1>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGrupo1 */
void StartGrupo1(void *argument)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGrupo1 */
	sensor1_init();
 80006a8:	f7ff fdce 	bl	8000248 <sensor1_init>
	sensor1_init();
 80006ac:	f7ff fdcc 	bl	8000248 <sensor1_init>
	osTimerStart(grupo1TimerHandle, 1000);
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <StartGrupo1+0x50>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 f985 	bl	80039c8 <osTimerStart>
	/* Infinite loop */
	uint8_t data[] = { 0xDE, 0xAD, 0xBE, 0xEF };
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <StartGrupo1+0x54>)
 80006c0:	60fb      	str	r3, [r7, #12]
	for (;;) {
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80006c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006c6:	2100      	movs	r1, #0
 80006c8:	2001      	movs	r0, #1
 80006ca:	f003 f821 	bl	8003710 <osThreadFlagsWait>
		uint8_t d = 0x00;
 80006ce:	2300      	movs	r3, #0
 80006d0:	72fb      	strb	r3, [r7, #11]
		sensor1_get(&d);
 80006d2:	f107 030b 	add.w	r3, r7, #11
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fdbe 	bl	8000258 <sensor1_get>
		osMessageQueuePut(grupo1QueueHandle, &data, 0, 100);
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <StartGrupo1+0x58>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	f107 010c 	add.w	r1, r7, #12
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2200      	movs	r2, #0
 80006e8:	f003 fb7e 	bl	8003de8 <osMessageQueuePut>
	for (;;) {
 80006ec:	e7e9      	b.n	80006c2 <StartGrupo1+0x22>
 80006ee:	bf00      	nop
 80006f0:	20002500 	.word	0x20002500
 80006f4:	efbeadde 	.word	0xefbeadde
 80006f8:	200025a4 	.word	0x200025a4

080006fc <StartGrupo2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGrupo2 */
void StartGrupo2(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGrupo2 */
	sensor2_init();
 8000704:	f7ff fdca 	bl	800029c <sensor2_init>
	sensor2_init();
 8000708:	f7ff fdc8 	bl	800029c <sensor2_init>
	osTimerStart(grupo2TimerHandle, 100);
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <StartGrupo2+0x84>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2164      	movs	r1, #100	; 0x64
 8000712:	4618      	mov	r0, r3
 8000714:	f003 f958 	bl	80039c8 <osTimerStart>
	uint32_t last_count = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
	uint8_t data[] = { 0xDE, 0xAD, 0xBE, 0xEF };
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <StartGrupo2+0x88>)
 800071e:	613b      	str	r3, [r7, #16]
	uint8_t counter = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	76fb      	strb	r3, [r7, #27]
	/* Infinite loop */
	for (;;) {
		osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8000724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000728:	2100      	movs	r1, #0
 800072a:	2001      	movs	r0, #1
 800072c:	f002 fff0 	bl	8003710 <osThreadFlagsWait>
		data[sizeof(data) - 1] = counter++;
 8000730:	7efb      	ldrb	r3, [r7, #27]
 8000732:	1c5a      	adds	r2, r3, #1
 8000734:	76fa      	strb	r2, [r7, #27]
 8000736:	74fb      	strb	r3, [r7, #19]
		uint32_t new_count = osMessageQueueGetCount(grupo2QueueHandle);
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <StartGrupo2+0x8c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f003 fc39 	bl	8003fb4 <osMessageQueueGetCount>
 8000742:	6178      	str	r0, [r7, #20]
		if (new_count < last_count && new_count != 0) {
 8000744:	697a      	ldr	r2, [r7, #20]
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	429a      	cmp	r2, r3
 800074a:	d206      	bcs.n	800075a <StartGrupo2+0x5e>
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d003      	beq.n	800075a <StartGrupo2+0x5e>
			osDelay(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f003 f870 	bl	8003838 <osDelay>
 8000758:	e00e      	b.n	8000778 <StartGrupo2+0x7c>
		} else {
			uint8_t d = 0x00;
 800075a:	2300      	movs	r3, #0
 800075c:	73fb      	strb	r3, [r7, #15]
			sensor2_get(&d);
 800075e:	f107 030f 	add.w	r3, r7, #15
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fda2 	bl	80002ac <sensor2_get>
			osMessageQueuePut(grupo2QueueHandle, &data, 0, 10);
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <StartGrupo2+0x8c>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	f107 0110 	add.w	r1, r7, #16
 8000770:	230a      	movs	r3, #10
 8000772:	2200      	movs	r2, #0
 8000774:	f003 fb38 	bl	8003de8 <osMessageQueuePut>
		}
		last_count = new_count;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	61fb      	str	r3, [r7, #28]
	for (;;) {
 800077c:	e7d2      	b.n	8000724 <StartGrupo2+0x28>
 800077e:	bf00      	nop
 8000780:	20001ad0 	.word	0x20001ad0
 8000784:	efbeadde 	.word	0xefbeadde
 8000788:	200024fc 	.word	0x200024fc

0800078c <StartCanGK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanGK */
void StartCanGK(void *argument)
{
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	b093      	sub	sp, #76	; 0x4c
 8000790:	af06      	add	r7, sp, #24
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCanGK */
	CAN_Event_t can_event = { 0 };
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
	CAN_TxHeaderTypeDef header = CANZenTool_writeStdCanFrame(8, 0xAD, true);
 80007a2:	f107 0008 	add.w	r0, r7, #8
 80007a6:	2301      	movs	r3, #1
 80007a8:	22ad      	movs	r2, #173	; 0xad
 80007aa:	2108      	movs	r1, #8
 80007ac:	f7ff fd0a 	bl	80001c4 <CANZenTool_writeStdCanFrame>

	/* Infinite loop */
	for (;;) {
		osMessageQueueGet(canEventQueueHandle, &can_event, 0, osWaitForever);
 80007b0:	4b33      	ldr	r3, [pc, #204]	; (8000880 <StartCanGK+0xf4>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	f107 0120 	add.w	r1, r7, #32
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007bc:	2200      	movs	r2, #0
 80007be:	f003 fb87 	bl	8003ed0 <osMessageQueueGet>
		debug("CAN Event: [%.3X] %s", can_event.ID,
 80007c2:	4b30      	ldr	r3, [pc, #192]	; (8000884 <StartCanGK+0xf8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007ca:	4618      	mov	r0, r3
 80007cc:	f003 f93c 	bl	8003a48 <osMutexAcquire>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d111      	bne.n	80007fa <StartCanGK+0x6e>
 80007d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007d8:	4619      	mov	r1, r3
 80007da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <StartCanGK+0x5a>
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <StartCanGK+0xfc>)
 80007e4:	e000      	b.n	80007e8 <StartCanGK+0x5c>
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <StartCanGK+0x100>)
 80007e8:	461a      	mov	r2, r3
 80007ea:	4829      	ldr	r0, [pc, #164]	; (8000890 <StartCanGK+0x104>)
 80007ec:	f007 f92a 	bl	8007a44 <iprintf>
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <StartCanGK+0xf8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 f985 	bl	8003b04 <osMutexRelease>
				can_event.type ? "TX" : "RX");
		switch (can_event.type) {
 80007fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00c      	beq.n	800081c <StartCanGK+0x90>
 8000802:	2b01      	cmp	r3, #1
 8000804:	d138      	bne.n	8000878 <StartCanGK+0xec>
		case TX:
			CANZenTool_sendCanFrameMsg(&hcan, &header, can_event.data,
 8000806:	f107 0320 	add.w	r3, r7, #32
 800080a:	f103 0208 	add.w	r2, r3, #8
 800080e:	f107 0108 	add.w	r1, r7, #8
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <StartCanGK+0x108>)
 8000814:	4820      	ldr	r0, [pc, #128]	; (8000898 <StartCanGK+0x10c>)
 8000816:	f7ff fcff 	bl	8000218 <CANZenTool_sendCanFrameMsg>
					&mailbox);
			break;
 800081a:	e030      	b.n	800087e <StartCanGK+0xf2>
		case RX:
			debug("MSG: [%.2X%.2X%.2X%.2X %.2X%.2X%.2X%.2X]", can_event.data[0],
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <StartCanGK+0xf8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000824:	4618      	mov	r0, r3
 8000826:	f003 f90f 	bl	8003a48 <osMutexAcquire>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d125      	bne.n	800087c <StartCanGK+0xf0>
 8000830:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000834:	461d      	mov	r5, r3
 8000836:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800083a:	461e      	mov	r6, r3
 800083c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000840:	469c      	mov	ip, r3
 8000842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000846:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800084a:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800084e:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8000852:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8000856:	9404      	str	r4, [sp, #16]
 8000858:	9003      	str	r0, [sp, #12]
 800085a:	9102      	str	r1, [sp, #8]
 800085c:	9201      	str	r2, [sp, #4]
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	4663      	mov	r3, ip
 8000862:	4632      	mov	r2, r6
 8000864:	4629      	mov	r1, r5
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <StartCanGK+0x110>)
 8000868:	f007 f8ec 	bl	8007a44 <iprintf>
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <StartCanGK+0xf8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f003 f947 	bl	8003b04 <osMutexRelease>
					can_event.data[1], can_event.data[2], can_event.data[3],
					can_event.data[4], can_event.data[5], can_event.data[6],
					can_event.data[7])
			;
			break;
 8000876:	e001      	b.n	800087c <StartCanGK+0xf0>
		default:
			break;
 8000878:	bf00      	nop
 800087a:	e799      	b.n	80007b0 <StartCanGK+0x24>
			break;
 800087c:	bf00      	nop
		osMessageQueueGet(canEventQueueHandle, &can_event, 0, osWaitForever);
 800087e:	e797      	b.n	80007b0 <StartCanGK+0x24>
 8000880:	200024f8 	.word	0x200024f8
 8000884:	200018c8 	.word	0x200018c8
 8000888:	080088a8 	.word	0x080088a8
 800088c:	080088ac 	.word	0x080088ac
 8000890:	080088b0 	.word	0x080088b0
 8000894:	200018cc 	.word	0x200018cc
 8000898:	20001410 	.word	0x20001410
 800089c:	080088c8 	.word	0x080088c8

080008a0 <StartStorage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStorage */
void StartStorage(void *argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	; 0x40
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStorage */
	storage1_init();
 80008a8:	f7ff fd22 	bl	80002f0 <storage1_init>
	storage2_init();
 80008ac:	f7ff fd4c 	bl	8000348 <storage2_init>
	/* Infinite loop */
	uint8_t data[4] = { 0 };
 80008b0:	2300      	movs	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t buffer[40] = { 0 };
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2224      	movs	r2, #36	; 0x24
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f007 f811 	bl	80078e8 <memset>
	for (;;) {
		osMessageQueueGet(grupo1QueueHandle, &data, NULL, osWaitForever);
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <StartStorage+0xc4>)
 80008c8:	6818      	ldr	r0, [r3, #0]
 80008ca:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d2:	2200      	movs	r2, #0
 80008d4:	f003 fafc 	bl	8003ed0 <osMessageQueueGet>
		storage1_save(sizeof(data), data);
 80008d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008dc:	4619      	mov	r1, r3
 80008de:	2004      	movs	r0, #4
 80008e0:	f7ff fd0e 	bl	8000300 <storage1_save>
		storage2_save(sizeof(data), data);
 80008e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008e8:	4619      	mov	r1, r3
 80008ea:	2004      	movs	r0, #4
 80008ec:	f7ff fd34 	bl	8000358 <storage2_save>
		uint32_t g2count = osMessageQueueGetCount(grupo2QueueHandle);
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <StartStorage+0xc8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 fb5d 	bl	8003fb4 <osMessageQueueGetCount>
 80008fa:	63f8      	str	r0, [r7, #60]	; 0x3c
		while (g2count--) {
 80008fc:	e00e      	b.n	800091c <StartStorage+0x7c>
			int offset = sizeof(data) * (sizeof(buffer) - g2count);
 80008fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000900:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	63bb      	str	r3, [r7, #56]	; 0x38
			osMessageQueueGet(grupo2QueueHandle, buffer + offset, 0, 10);
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <StartStorage+0xc8>)
 800090a:	6818      	ldr	r0, [r3, #0]
 800090c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800090e:	f107 020c 	add.w	r2, r7, #12
 8000912:	18d1      	adds	r1, r2, r3
 8000914:	230a      	movs	r3, #10
 8000916:	2200      	movs	r2, #0
 8000918:	f003 fada 	bl	8003ed0 <osMessageQueueGet>
		while (g2count--) {
 800091c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800091e:	1e5a      	subs	r2, r3, #1
 8000920:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1eb      	bne.n	80008fe <StartStorage+0x5e>
		}
		debug("IMU Queue flushed");
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <StartStorage+0xcc>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800092e:	4618      	mov	r0, r3
 8000930:	f003 f88a 	bl	8003a48 <osMutexAcquire>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d107      	bne.n	800094a <StartStorage+0xaa>
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <StartStorage+0xd0>)
 800093c:	f007 f908 	bl	8007b50 <puts>
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <StartStorage+0xcc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f003 f8dd 	bl	8003b04 <osMutexRelease>
		storage1_save(sizeof(buffer), buffer);
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4619      	mov	r1, r3
 8000950:	2028      	movs	r0, #40	; 0x28
 8000952:	f7ff fcd5 	bl	8000300 <storage1_save>
		storage2_save(sizeof(buffer), buffer);
 8000956:	f107 030c 	add.w	r3, r7, #12
 800095a:	4619      	mov	r1, r3
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f7ff fcfb 	bl	8000358 <storage2_save>
	for (;;) {
 8000962:	e7b0      	b.n	80008c6 <StartStorage+0x26>
 8000964:	200025a4 	.word	0x200025a4
 8000968:	200024fc 	.word	0x200024fc
 800096c:	200018c8 	.word	0x200018c8
 8000970:	080088f4 	.word	0x080088f4

08000974 <StartThermalCtrl>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartThermalCtrl */
void StartThermalCtrl(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartThermalCtrl */
	/* Infinite loop */
	for (;;) {
		actuator_get();
 800097c:	f7ff fd10 	bl	80003a0 <actuator_get>
		osDelay(500);
 8000980:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000984:	f002 ff58 	bl	8003838 <osDelay>
		actuator_set(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff fd10 	bl	80003ae <actuator_set>
		osDelay(500);
 800098e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000992:	f002 ff51 	bl	8003838 <osDelay>
		actuator_get();
 8000996:	e7f1      	b.n	800097c <StartThermalCtrl+0x8>

08000998 <StartStimulus>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartStimulus */
void StartStimulus(void *argument)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStimulus */
	/* Infinite loop */
	uint8_t buffer[8] = { 0, [1]=0x55 };
 80009a0:	f44f 43aa 	mov.w	r3, #21760	; 0x5500
 80009a4:	61fb      	str	r3, [r7, #28]
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
	CAN_Event_t can_ev_tx = { //
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	2301      	movs	r3, #1
 80009ba:	733b      	strb	r3, [r7, #12]
 80009bc:	2308      	movs	r3, #8
 80009be:	737b      	strb	r3, [r7, #13]
 80009c0:	f240 1323 	movw	r3, #291	; 0x123
 80009c4:	81fb      	strh	r3, [r7, #14]
			.ID = 0x123, //
					.RTR = CAN_RTR_DATA, //
					.size = 8, //
					.type = TX, //
			};
	uint8_t counter = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (;;) {
		osDelay(2000);
 80009cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009d0:	f002 ff32 	bl	8003838 <osDelay>
		buffer[sizeof(buffer) - 1] = counter++;
 80009d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 80009de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		memcpy(can_ev_tx.data, buffer, can_ev_tx.size);
 80009e2:	7b7b      	ldrb	r3, [r7, #13]
 80009e4:	461a      	mov	r2, r3
 80009e6:	f107 011c 	add.w	r1, r7, #28
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	3308      	adds	r3, #8
 80009f0:	4618      	mov	r0, r3
 80009f2:	f006 ff6b 	bl	80078cc <memcpy>
		osMessageQueuePut(canEventQueueHandle, &can_ev_tx, 0, 100);
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <StartStimulus+0x70>)
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	f107 010c 	add.w	r1, r7, #12
 80009fe:	2364      	movs	r3, #100	; 0x64
 8000a00:	2200      	movs	r2, #0
 8000a02:	f003 f9f1 	bl	8003de8 <osMessageQueuePut>
		osDelay(2000);
 8000a06:	e7e1      	b.n	80009cc <StartStimulus+0x34>
 8000a08:	200024f8 	.word	0x200024f8

08000a0c <Grupo1TimerCallback>:
  /* USER CODE END StartStimulus */
}

/* Grupo1TimerCallback function */
void Grupo1TimerCallback(void *argument)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Grupo1TimerCallback */
	osThreadFlagsSet(grupo1TaskHandle, 0x00000001U);
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <Grupo1TimerCallback+0x1c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fe18 	bl	8003650 <osThreadFlagsSet>
  /* USER CODE END Grupo1TimerCallback */
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200023e0 	.word	0x200023e0

08000a2c <Grupo2TimerCallback>:

/* Grupo2TimerCallback function */
void Grupo2TimerCallback(void *argument)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Grupo2TimerCallback */
	osThreadFlagsSet(grupo2TaskHandle, 0x00000001U);
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <Grupo2TimerCallback+0x1c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 fe08 	bl	8003650 <osThreadFlagsSet>
  /* USER CODE END Grupo2TimerCallback */
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20001b04 	.word	0x20001b04

08000a4c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b090      	sub	sp, #64	; 0x40
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	uint8_t buffer[8];
	CAN_RxHeaderTypeDef header;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &header, buffer);
 8000a54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a58:	f107 021c 	add.w	r2, r7, #28
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 feb0 	bl	80017c4 <HAL_CAN_GetRxMessage>
	CAN_Event_t event;
	event.RTR = header.RTR;
 8000a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a66:	613b      	str	r3, [r7, #16]
	event.ID = header.StdId;
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	81fb      	strh	r3, [r7, #14]
	event.size = (uint8_t) header.DLC;
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	737b      	strb	r3, [r7, #13]
	event.type = RX;
 8000a74:	2300      	movs	r3, #0
 8000a76:	733b      	strb	r3, [r7, #12]
	memcpy(event.data, buffer, event.size);
 8000a78:	7b7b      	ldrb	r3, [r7, #13]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	3308      	adds	r3, #8
 8000a86:	4618      	mov	r0, r3
 8000a88:	f006 ff20 	bl	80078cc <memcpy>
	osMessageQueuePut(canEventQueueHandle, &event, 0, 0);
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	f107 010c 	add.w	r1, r7, #12
 8000a94:	2300      	movs	r3, #0
 8000a96:	2200      	movs	r2, #0
 8000a98:	f003 f9a6 	bl	8003de8 <osMessageQueuePut>
}
 8000a9c:	bf00      	nop
 8000a9e:	3740      	adds	r7, #64	; 0x40
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200024f8 	.word	0x200024f8

08000aa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_GPIO_Init+0x40>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <MX_GPIO_Init+0x40>)
 8000ab4:	f043 0320 	orr.w	r3, r3, #32
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_GPIO_Init+0x40>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f003 0320 	and.w	r3, r3, #32
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_GPIO_Init+0x40>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <MX_GPIO_Init+0x40>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <MX_GPIO_Init+0x40>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	; 0x30
 8000af0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f000 fb53 	bl	800119c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f821 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f7ff ffd5 	bl	8000aa8 <MX_GPIO_Init>
  MX_CAN_Init();
 8000afe:	f7ff fc61 	bl	80003c4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000b02:	f000 f9e7 	bl	8000ed4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	CAN_FilterTypeDef filter;
	CANZenTool_setFilter(&hcan, &filter, true, 0, 0xAD, 0xAD);
 8000b06:	4639      	mov	r1, r7
 8000b08:	23ad      	movs	r3, #173	; 0xad
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	23ad      	movs	r3, #173	; 0xad
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2201      	movs	r2, #1
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <main+0x4c>)
 8000b16:	f7ff fb1b 	bl	8000150 <CANZenTool_setFilter>
	HAL_CAN_Start(&hcan);
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <main+0x4c>)
 8000b1c:	f000 fd34 	bl	8001588 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b20:	2102      	movs	r1, #2
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <main+0x4c>)
 8000b24:	f000 ff5f 	bl	80019e6 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000b28:	f002 fc7c 	bl	8003424 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000b2c:	f7ff fcfe 	bl	800052c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b30:	f002 fcaa 	bl	8003488 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b34:	e7fe      	b.n	8000b34 <main+0x48>
 8000b36:	bf00      	nop
 8000b38:	20001410 	.word	0x20001410

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b090      	sub	sp, #64	; 0x40
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0318 	add.w	r3, r7, #24
 8000b46:	2228      	movs	r2, #40	; 0x28
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f006 fecc 	bl	80078e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b70:	2302      	movs	r3, #2
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 fbdb 	bl	8002340 <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b90:	f000 f82e 	bl	8000bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b94:	230f      	movs	r3, #15
 8000b96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2102      	movs	r1, #2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 fe46 	bl	8002840 <HAL_RCC_ClockConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bba:	f000 f819 	bl	8000bf0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000bbe:	f001 ff29 	bl	8002a14 <HAL_RCC_EnableCSS>
}
 8000bc2:	bf00      	nop
 8000bc4:	3740      	adds	r7, #64	; 0x40
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d101      	bne.n	8000be2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bde:	f000 faf3 	bl	80011c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40000800 	.word	0x40000800

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_MspInit+0x68>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <HAL_MspInit+0x68>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6193      	str	r3, [r2, #24]
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_MspInit+0x68>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_MspInit+0x68>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	4a11      	ldr	r2, [pc, #68]	; (8000c64 <HAL_MspInit+0x68>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	61d3      	str	r3, [r2, #28]
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x68>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	210f      	movs	r1, #15
 8000c36:	f06f 0001 	mvn.w	r0, #1
 8000c3a:	f001 f9d2 	bl	8001fe2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_MspInit+0x6c>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <HAL_MspInit+0x6c>)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010000 	.word	0x40010000

08000c6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	201e      	movs	r0, #30
 8000c82:	f001 f9ae 	bl	8001fe2 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c86:	201e      	movs	r0, #30
 8000c88:	f001 f9c7 	bl	800201a <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_InitTick+0xa0>)
 8000c8e:	69db      	ldr	r3, [r3, #28]
 8000c90:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_InitTick+0xa0>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	61d3      	str	r3, [r2, #28]
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_InitTick+0xa0>)
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca4:	f107 0210 	add.w	r2, r7, #16
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 ff4e 	bl	8002b50 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000cb4:	f001 ff24 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc0:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <HAL_InitTick+0xa4>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9b      	lsrs	r3, r3, #18
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_InitTick+0xa8>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <HAL_InitTick+0xac>)
 8000cd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_InitTick+0xa8>)
 8000cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_InitTick+0xa8>)
 8000cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cde:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_InitTick+0xa8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_InitTick+0xa8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <HAL_InitTick+0xa8>)
 8000cee:	f001 ff97 	bl	8002c20 <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d104      	bne.n	8000d02 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000cf8:	4806      	ldr	r0, [pc, #24]	; (8000d14 <HAL_InitTick+0xa8>)
 8000cfa:	f001 ffe9 	bl	8002cd0 <HAL_TIM_Base_Start_IT>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3730      	adds	r7, #48	; 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	431bde83 	.word	0x431bde83
 8000d14:	20002838 	.word	0x20002838
 8000d18:	40000800 	.word	0x40000800

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000d20:	f001 ff46 	bl	8002bb0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x8>
	...

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  puts("HARD_FAULT\r\n");
 8000d2c:	4801      	ldr	r0, [pc, #4]	; (8000d34 <HardFault_Handler+0xc>)
 8000d2e:	f006 ff0f 	bl	8007b50 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0xa>
 8000d34:	08008908 	.word	0x08008908

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
	...

08000d58 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000d5e:	f000 fe67 	bl	8001a30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20001410 	.word	0x20001410

08000d6c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d72:	f000 fe5d 	bl	8001a30 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20001410 	.word	0x20001410

08000d80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <TIM4_IRQHandler+0x10>)
 8000d86:	f001 fff5 	bl	8002d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20002838 	.word	0x20002838

08000d94 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e00a      	b.n	8000dbc <_read+0x28>
		*ptr++ = __io_getchar();
 8000da6:	f3af 8000 	nop.w
 8000daa:	4601      	mov	r1, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	b2ca      	uxtb	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf0      	blt.n	8000da6 <_read+0x12>
	}

	return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	4804      	ldr	r0, [pc, #16]	; (8000df8 <_write+0x28>)
 8000de8:	f002 f9b1 	bl	800314e <HAL_UART_Transmit>
	return len;
 8000dec:	687b      	ldr	r3, [r7, #4]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20002880 	.word	0x20002880

08000dfc <_close>:

int _close(int file) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	return -1;
 8000e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr

08000e12 <_fstat>:

int _fstat(int file, struct stat *st) {
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e22:	605a      	str	r2, [r3, #4]
	return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <_isatty>:

int _isatty(int file) {
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	return 1;
 8000e38:	2301      	movs	r3, #1
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f006 fbf6 	bl	800767c <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20005000 	.word	0x20005000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	20000090 	.word	0x20000090
 8000ec4:	20002910 	.word	0x20002910

08000ec8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <MX_USART1_UART_Init+0x50>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_USART1_UART_Init+0x4c>)
 8000f0c:	f002 f8d2 	bl	80030b4 <HAL_UART_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f16:	f7ff fe6b 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20002880 	.word	0x20002880
 8000f24:	40013800 	.word	0x40013800

08000f28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d131      	bne.n	8000fac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <HAL_UART_MspInit+0x94>)
 8000f8e:	f001 f853 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_UART_MspInit+0x94>)
 8000fa8:	f001 f846 	bl	8002038 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3720      	adds	r7, #32
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010800 	.word	0x40010800

08000fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	; (8001004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fe6:	f7ff ff6f 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f006 fc43 	bl	8007874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fd7d 	bl	8000aec <main>
  bx lr
 8000ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ffc:	08008b6c 	.word	0x08008b6c
  ldr r2, =_sbss
 8001000:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001004:	2000290c 	.word	0x2000290c

08001008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_2_IRQHandler>

0800100a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d104      	bne.n	8001022 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
 800101c:	f7ff fde8 	bl	8000bf0 <Error_Handler>
 8001020:	e7fe      	b.n	8001020 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e007      	b.n	8001038 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	2100      	movs	r1, #0
 800102e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d9f4      	bls.n	8001028 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	721a      	strb	r2, [r3, #8]
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d104      	bne.n	8001064 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800105a:	b672      	cpsid	i
}
 800105c:	bf00      	nop
 800105e:	f7ff fdc7 	bl	8000bf0 <Error_Handler>
 8001062:	e7fe      	b.n	8001062 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7a1b      	ldrb	r3, [r3, #8]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d904      	bls.n	8001076 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
 8001070:	f7ff fdbe 	bl	8000bf0 <Error_Handler>
 8001074:	e7fe      	b.n	8001074 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7a1b      	ldrb	r3, [r3, #8]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	b2d1      	uxtb	r1, r2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	7211      	strb	r1, [r2, #8]
 8001082:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001084:	f3ef 8211 	mrs	r2, BASEPRI
 8001088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800108c:	f383 8811 	msr	BASEPRI, r3
 8001090:	f3bf 8f6f 	isb	sy
 8001094:	f3bf 8f4f 	dsb	sy
 8001098:	60fa      	str	r2, [r7, #12]
 800109a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d104      	bne.n	80010c4 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80010ba:	b672      	cpsid	i
}
 80010bc:	bf00      	nop
 80010be:	f7ff fd97 	bl	8000bf0 <Error_Handler>
 80010c2:	e7fe      	b.n	80010c2 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7a1b      	ldrb	r3, [r3, #8]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7a1b      	ldrb	r3, [r3, #8]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d904      	bls.n	80010e2 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80010d8:	b672      	cpsid	i
}
 80010da:	bf00      	nop
 80010dc:	f7ff fd88 	bl	8000bf0 <Error_Handler>
 80010e0:	e7fe      	b.n	80010e0 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7a1b      	ldrb	r3, [r3, #8]
 80010e6:	461a      	mov	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ee:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80010f6:	bf00      	nop
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d105      	bne.n	800111a <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 800110e:	f006 fab5 	bl	800767c <__errno>
 8001112:	4603      	mov	r3, r0
 8001114:	2216      	movs	r2, #22
 8001116:	601a      	str	r2, [r3, #0]
    return;
 8001118:	e015      	b.n	8001146 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 800111a:	200c      	movs	r0, #12
 800111c:	f006 fbce 	bl	80078bc <malloc>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff68 	bl	800100a <stm32_lock_init>
    return;
 800113a:	e004      	b.n	8001146 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001140:	f7ff fd56 	bl	8000bf0 <Error_Handler>
 8001144:	e7fe      	b.n	8001144 <__retarget_lock_init_recursive+0x44>
}
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d104      	bne.n	8001164 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800115a:	b672      	cpsid	i
}
 800115c:	bf00      	nop
 800115e:	f7ff fd47 	bl	8000bf0 <Error_Handler>
 8001162:	e7fe      	b.n	8001162 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff70 	bl	800104c <stm32_lock_acquire>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d104      	bne.n	800118c <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001182:	b672      	cpsid	i
}
 8001184:	bf00      	nop
 8001186:	f7ff fd33 	bl	8000bf0 <Error_Handler>
 800118a:	e7fe      	b.n	800118a <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ff8c 	bl	80010ac <stm32_lock_release>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x28>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x28>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 ff0d 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	200f      	movs	r0, #15
 80011b4:	f7ff fd5a 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fd20 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_IncTick+0x1c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_IncTick+0x20>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <HAL_IncTick+0x20>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	20000008 	.word	0x20000008
 80011e8:	200028c4 	.word	0x200028c4

080011ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <HAL_GetTick+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	200028c4 	.word	0x200028c4

08001200 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0ed      	b.n	80013ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff f908 	bl	8000434 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0201 	orr.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001234:	f7ff ffda 	bl	80011ec <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800123a:	e012      	b.n	8001262 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800123c:	f7ff ffd6 	bl	80011ec <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b0a      	cmp	r3, #10
 8001248:	d90b      	bls.n	8001262 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2205      	movs	r2, #5
 800125a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0c5      	b.n	80013ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0e5      	beq.n	800123c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0202 	bic.w	r2, r2, #2
 800127e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001280:	f7ff ffb4 	bl	80011ec <HAL_GetTick>
 8001284:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001286:	e012      	b.n	80012ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001288:	f7ff ffb0 	bl	80011ec <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b0a      	cmp	r3, #10
 8001294:	d90b      	bls.n	80012ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2205      	movs	r2, #5
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e09f      	b.n	80013ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1e5      	bne.n	8001288 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7e1b      	ldrb	r3, [r3, #24]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d108      	bne.n	80012d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	e007      	b.n	80012e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7e5b      	ldrb	r3, [r3, #25]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d108      	bne.n	8001300 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	e007      	b.n	8001310 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800130e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7e9b      	ldrb	r3, [r3, #26]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d108      	bne.n	800132a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0220 	orr.w	r2, r2, #32
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e007      	b.n	800133a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0220 	bic.w	r2, r2, #32
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7edb      	ldrb	r3, [r3, #27]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d108      	bne.n	8001354 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0210 	bic.w	r2, r2, #16
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	e007      	b.n	8001364 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0210 	orr.w	r2, r2, #16
 8001362:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	7f1b      	ldrb	r3, [r3, #28]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0208 	orr.w	r2, r2, #8
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	e007      	b.n	800138e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 0208 	bic.w	r2, r2, #8
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7f5b      	ldrb	r3, [r3, #29]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d108      	bne.n	80013a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0204 	orr.w	r2, r2, #4
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e007      	b.n	80013b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0204 	bic.w	r2, r2, #4
 80013b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	ea42 0103 	orr.w	r1, r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	1e5a      	subs	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80013f6:	b480      	push	{r7}
 80013f8:	b087      	sub	sp, #28
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800140c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800140e:	7cfb      	ldrb	r3, [r7, #19]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d003      	beq.n	800141c <HAL_CAN_ConfigFilter+0x26>
 8001414:	7cfb      	ldrb	r3, [r7, #19]
 8001416:	2b02      	cmp	r3, #2
 8001418:	f040 80aa 	bne.w	8001570 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2201      	movs	r2, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d123      	bne.n	800149e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43db      	mvns	r3, r3
 8001460:	401a      	ands	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001478:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3248      	adds	r2, #72	; 0x48
 800147e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001492:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001494:	6979      	ldr	r1, [r7, #20]
 8001496:	3348      	adds	r3, #72	; 0x48
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d122      	bne.n	80014ec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	431a      	orrs	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3248      	adds	r2, #72	; 0x48
 80014cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e2:	6979      	ldr	r1, [r7, #20]
 80014e4:	3348      	adds	r3, #72	; 0x48
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001506:	e007      	b.n	8001518 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d109      	bne.n	8001534 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001532:	e007      	b.n	8001544 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d107      	bne.n	800155c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001562:	f023 0201 	bic.w	r2, r3, #1
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e006      	b.n	800157e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
  }
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b01      	cmp	r3, #1
 800159a:	d12e      	bne.n	80015fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2202      	movs	r2, #2
 80015a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0201 	bic.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015b4:	f7ff fe1a 	bl	80011ec <HAL_GetTick>
 80015b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015ba:	e012      	b.n	80015e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015bc:	f7ff fe16 	bl	80011ec <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b0a      	cmp	r3, #10
 80015c8:	d90b      	bls.n	80015e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2205      	movs	r2, #5
 80015da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e012      	b.n	8001608 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1e5      	bne.n	80015bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e006      	b.n	8001608 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001624:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800162e:	7ffb      	ldrb	r3, [r7, #31]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d003      	beq.n	800163c <HAL_CAN_AddTxMessage+0x2c>
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	2b02      	cmp	r3, #2
 8001638:	f040 80b8 	bne.w	80017ac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10a      	bne.n	800165c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800164c:	2b00      	cmp	r3, #0
 800164e:	d105      	bne.n	800165c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80a0 	beq.w	800179c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	0e1b      	lsrs	r3, r3, #24
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d907      	bls.n	800167c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e09e      	b.n	80017ba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800167c:	2201      	movs	r2, #1
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	409a      	lsls	r2, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10d      	bne.n	80016aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001698:	68f9      	ldr	r1, [r7, #12]
 800169a:	6809      	ldr	r1, [r1, #0]
 800169c:	431a      	orrs	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3318      	adds	r3, #24
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	440b      	add	r3, r1
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e00f      	b.n	80016ca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ba:	68f9      	ldr	r1, [r7, #12]
 80016bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3318      	adds	r3, #24
 80016c4:	011b      	lsls	r3, r3, #4
 80016c6:	440b      	add	r3, r1
 80016c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3318      	adds	r3, #24
 80016d6:	011b      	lsls	r3, r3, #4
 80016d8:	440b      	add	r3, r1
 80016da:	3304      	adds	r3, #4
 80016dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	7d1b      	ldrb	r3, [r3, #20]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d111      	bne.n	800170a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3318      	adds	r3, #24
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	4413      	add	r3, r2
 80016f2:	3304      	adds	r3, #4
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	6811      	ldr	r1, [r2, #0]
 80016fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3318      	adds	r3, #24
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	440b      	add	r3, r1
 8001706:	3304      	adds	r3, #4
 8001708:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3307      	adds	r3, #7
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	061a      	lsls	r2, r3, #24
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3306      	adds	r3, #6
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3305      	adds	r3, #5
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	4313      	orrs	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	3204      	adds	r2, #4
 800172a:	7812      	ldrb	r2, [r2, #0]
 800172c:	4610      	mov	r0, r2
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	6811      	ldr	r1, [r2, #0]
 8001732:	ea43 0200 	orr.w	r2, r3, r0
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	440b      	add	r3, r1
 800173c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001740:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3303      	adds	r3, #3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	061a      	lsls	r2, r3, #24
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3302      	adds	r3, #2
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3301      	adds	r3, #1
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	4313      	orrs	r3, r2
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	7812      	ldrb	r2, [r2, #0]
 8001762:	4610      	mov	r0, r2
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	6811      	ldr	r1, [r2, #0]
 8001768:	ea43 0200 	orr.w	r2, r3, r0
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	440b      	add	r3, r1
 8001772:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001776:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3318      	adds	r3, #24
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	4413      	add	r3, r2
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	6811      	ldr	r1, [r2, #0]
 800178a:	f043 0201 	orr.w	r2, r3, #1
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3318      	adds	r3, #24
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	440b      	add	r3, r1
 8001796:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	e00e      	b.n	80017ba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e006      	b.n	80017ba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
  }
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d003      	beq.n	80017e8 <HAL_CAN_GetRxMessage+0x24>
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	f040 80f3 	bne.w	80019ce <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10e      	bne.n	800180c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d116      	bne.n	800182a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0e7      	b.n	80019dc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d107      	bne.n	800182a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e0d8      	b.n	80019dc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	331b      	adds	r3, #27
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0204 	and.w	r2, r3, #4
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10c      	bne.n	8001862 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	331b      	adds	r3, #27
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4413      	add	r3, r2
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	0d5b      	lsrs	r3, r3, #21
 8001858:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e00b      	b.n	800187a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	331b      	adds	r3, #27
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	08db      	lsrs	r3, r3, #3
 8001872:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	331b      	adds	r3, #27
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	4413      	add	r3, r2
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0202 	and.w	r2, r3, #2
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	331b      	adds	r3, #27
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	4413      	add	r3, r2
 800189c:	3304      	adds	r3, #4
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 020f 	and.w	r2, r3, #15
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	331b      	adds	r3, #27
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	3304      	adds	r3, #4
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	331b      	adds	r3, #27
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	4413      	add	r3, r2
 80018cc:	3304      	adds	r3, #4
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4413      	add	r3, r2
 80018e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	0a1a      	lsrs	r2, r3, #8
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	011b      	lsls	r3, r3, #4
 8001910:	4413      	add	r3, r2
 8001912:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0c1a      	lsrs	r2, r3, #16
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	3302      	adds	r3, #2
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	4413      	add	r3, r2
 800192c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0e1a      	lsrs	r2, r3, #24
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	3303      	adds	r3, #3
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4413      	add	r3, r2
 8001946:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	3304      	adds	r3, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	4413      	add	r3, r2
 800195e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0a1a      	lsrs	r2, r3, #8
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	3305      	adds	r3, #5
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	4413      	add	r3, r2
 8001978:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	0c1a      	lsrs	r2, r3, #16
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	3306      	adds	r3, #6
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0e1a      	lsrs	r2, r3, #24
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	3307      	adds	r3, #7
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d108      	bne.n	80019ba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0220 	orr.w	r2, r2, #32
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	e007      	b.n	80019ca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0220 	orr.w	r2, r2, #32
 80019c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e006      	b.n	80019dc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
  }
}
 80019dc:	4618      	mov	r0, r3
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d002      	beq.n	8001a04 <HAL_CAN_ActivateNotification+0x1e>
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d109      	bne.n	8001a18 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6959      	ldr	r1, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e006      	b.n	8001a26 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
  }
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d07c      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d023      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2201      	movs	r2, #1
 8001a86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f983 	bl	8001d9e <HAL_CAN_TxMailbox0CompleteCallback>
 8001a98:	e016      	b.n	8001ac8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001aac:	e00c      	b.n	8001ac8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d004      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	e002      	b.n	8001ac8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f986 	bl	8001dd4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d024      	beq.n	8001b1c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ada:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f962 	bl	8001db0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001aec:	e016      	b.n	8001b1c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d004      	beq.n	8001b02 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	e00c      	b.n	8001b1c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
 8001b14:	e002      	b.n	8001b1c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f965 	bl	8001de6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d024      	beq.n	8001b70 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b2e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f941 	bl	8001dc2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b40:	e016      	b.n	8001b70 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
 8001b54:	e00c      	b.n	8001b70 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
 8001b68:	e002      	b.n	8001b70 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f944 	bl	8001df8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00c      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2210      	movs	r2, #16
 8001b92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2208      	movs	r2, #8
 8001bae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f92a 	bl	8001e0a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d009      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe ff3c 	bl	8000a4c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00c      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00b      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2208      	movs	r2, #8
 8001c12:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f90a 	bl	8001e2e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d009      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8f2 	bl	8001e1c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2210      	movs	r2, #16
 8001c52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8f3 	bl	8001e40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2208      	movs	r2, #8
 8001c74:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f8eb 	bl	8001e52 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d07b      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d072      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d008      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d043      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d03e      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cfe:	2b60      	cmp	r3, #96	; 0x60
 8001d00:	d02b      	beq.n	8001d5a <HAL_CAN_IRQHandler+0x32a>
 8001d02:	2b60      	cmp	r3, #96	; 0x60
 8001d04:	d82e      	bhi.n	8001d64 <HAL_CAN_IRQHandler+0x334>
 8001d06:	2b50      	cmp	r3, #80	; 0x50
 8001d08:	d022      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x320>
 8001d0a:	2b50      	cmp	r3, #80	; 0x50
 8001d0c:	d82a      	bhi.n	8001d64 <HAL_CAN_IRQHandler+0x334>
 8001d0e:	2b40      	cmp	r3, #64	; 0x40
 8001d10:	d019      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x316>
 8001d12:	2b40      	cmp	r3, #64	; 0x40
 8001d14:	d826      	bhi.n	8001d64 <HAL_CAN_IRQHandler+0x334>
 8001d16:	2b30      	cmp	r3, #48	; 0x30
 8001d18:	d010      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x30c>
 8001d1a:	2b30      	cmp	r3, #48	; 0x30
 8001d1c:	d822      	bhi.n	8001d64 <HAL_CAN_IRQHandler+0x334>
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d002      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x2f8>
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	d005      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d26:	e01d      	b.n	8001d64 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d30:	e019      	b.n	8001d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	f043 0310 	orr.w	r3, r3, #16
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d3a:	e014      	b.n	8001d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	f043 0320 	orr.w	r3, r3, #32
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d44:	e00f      	b.n	8001d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d4e:	e00a      	b.n	8001d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d58:	e005      	b.n	8001d66 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d62:	e000      	b.n	8001d66 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d64:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699a      	ldr	r2, [r3, #24]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d74:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f867 	bl	8001e64 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	; 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
	...

08001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e94:	4013      	ands	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eaa:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <__NVIC_SetPriorityGrouping+0x44>)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	60d3      	str	r3, [r2, #12]
}
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 0307 	and.w	r3, r3, #7
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	db0b      	blt.n	8001f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	f003 021f 	and.w	r2, r3, #31
 8001ef4:	4906      	ldr	r1, [pc, #24]	; (8001f10 <__NVIC_EnableIRQ+0x34>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	2001      	movs	r0, #1
 8001efe:	fa00 f202 	lsl.w	r2, r0, r2
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100

08001f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	6039      	str	r1, [r7, #0]
 8001f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	db0a      	blt.n	8001f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	490c      	ldr	r1, [pc, #48]	; (8001f60 <__NVIC_SetPriority+0x4c>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	0112      	lsls	r2, r2, #4
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	440b      	add	r3, r1
 8001f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f3c:	e00a      	b.n	8001f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4908      	ldr	r1, [pc, #32]	; (8001f64 <__NVIC_SetPriority+0x50>)
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	3b04      	subs	r3, #4
 8001f4c:	0112      	lsls	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	440b      	add	r3, r1
 8001f52:	761a      	strb	r2, [r3, #24]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000e100 	.word	0xe000e100
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	bf28      	it	cs
 8001f86:	2304      	movcs	r3, #4
 8001f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d902      	bls.n	8001f98 <NVIC_EncodePriority+0x30>
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3b03      	subs	r3, #3
 8001f96:	e000      	b.n	8001f9a <NVIC_EncodePriority+0x32>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	401a      	ands	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fba:	43d9      	mvns	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	4313      	orrs	r3, r2
         );
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3724      	adds	r7, #36	; 0x24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff4f 	bl	8001e78 <__NVIC_SetPriorityGrouping>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff4:	f7ff ff64 	bl	8001ec0 <__NVIC_GetPriorityGrouping>
 8001ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff ffb2 	bl	8001f68 <NVIC_EncodePriority>
 8002004:	4602      	mov	r2, r0
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff81 	bl	8001f14 <__NVIC_SetPriority>
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff57 	bl	8001edc <__NVIC_EnableIRQ>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b08b      	sub	sp, #44	; 0x2c
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204a:	e169      	b.n	8002320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800204c:	2201      	movs	r2, #1
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8158 	bne.w	800231a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	4a9a      	ldr	r2, [pc, #616]	; (80022d8 <HAL_GPIO_Init+0x2a0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d05e      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002074:	4a98      	ldr	r2, [pc, #608]	; (80022d8 <HAL_GPIO_Init+0x2a0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d875      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 800207a:	4a98      	ldr	r2, [pc, #608]	; (80022dc <HAL_GPIO_Init+0x2a4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d058      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002080:	4a96      	ldr	r2, [pc, #600]	; (80022dc <HAL_GPIO_Init+0x2a4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d86f      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 8002086:	4a96      	ldr	r2, [pc, #600]	; (80022e0 <HAL_GPIO_Init+0x2a8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d052      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 800208c:	4a94      	ldr	r2, [pc, #592]	; (80022e0 <HAL_GPIO_Init+0x2a8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d869      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 8002092:	4a94      	ldr	r2, [pc, #592]	; (80022e4 <HAL_GPIO_Init+0x2ac>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d04c      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 8002098:	4a92      	ldr	r2, [pc, #584]	; (80022e4 <HAL_GPIO_Init+0x2ac>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d863      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 800209e:	4a92      	ldr	r2, [pc, #584]	; (80022e8 <HAL_GPIO_Init+0x2b0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d046      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
 80020a4:	4a90      	ldr	r2, [pc, #576]	; (80022e8 <HAL_GPIO_Init+0x2b0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d85d      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 80020aa:	2b12      	cmp	r3, #18
 80020ac:	d82a      	bhi.n	8002104 <HAL_GPIO_Init+0xcc>
 80020ae:	2b12      	cmp	r3, #18
 80020b0:	d859      	bhi.n	8002166 <HAL_GPIO_Init+0x12e>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <HAL_GPIO_Init+0x80>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	08002133 	.word	0x08002133
 80020bc:	0800210d 	.word	0x0800210d
 80020c0:	0800211f 	.word	0x0800211f
 80020c4:	08002161 	.word	0x08002161
 80020c8:	08002167 	.word	0x08002167
 80020cc:	08002167 	.word	0x08002167
 80020d0:	08002167 	.word	0x08002167
 80020d4:	08002167 	.word	0x08002167
 80020d8:	08002167 	.word	0x08002167
 80020dc:	08002167 	.word	0x08002167
 80020e0:	08002167 	.word	0x08002167
 80020e4:	08002167 	.word	0x08002167
 80020e8:	08002167 	.word	0x08002167
 80020ec:	08002167 	.word	0x08002167
 80020f0:	08002167 	.word	0x08002167
 80020f4:	08002167 	.word	0x08002167
 80020f8:	08002167 	.word	0x08002167
 80020fc:	08002115 	.word	0x08002115
 8002100:	08002129 	.word	0x08002129
 8002104:	4a79      	ldr	r2, [pc, #484]	; (80022ec <HAL_GPIO_Init+0x2b4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800210a:	e02c      	b.n	8002166 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	623b      	str	r3, [r7, #32]
          break;
 8002112:	e029      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	3304      	adds	r3, #4
 800211a:	623b      	str	r3, [r7, #32]
          break;
 800211c:	e024      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	3308      	adds	r3, #8
 8002124:	623b      	str	r3, [r7, #32]
          break;
 8002126:	e01f      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	330c      	adds	r3, #12
 800212e:	623b      	str	r3, [r7, #32]
          break;
 8002130:	e01a      	b.n	8002168 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d102      	bne.n	8002140 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800213a:	2304      	movs	r3, #4
 800213c:	623b      	str	r3, [r7, #32]
          break;
 800213e:	e013      	b.n	8002168 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d105      	bne.n	8002154 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002148:	2308      	movs	r3, #8
 800214a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	611a      	str	r2, [r3, #16]
          break;
 8002152:	e009      	b.n	8002168 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002154:	2308      	movs	r3, #8
 8002156:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	615a      	str	r2, [r3, #20]
          break;
 800215e:	e003      	b.n	8002168 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
          break;
 8002164:	e000      	b.n	8002168 <HAL_GPIO_Init+0x130>
          break;
 8002166:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2bff      	cmp	r3, #255	; 0xff
 800216c:	d801      	bhi.n	8002172 <HAL_GPIO_Init+0x13a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	e001      	b.n	8002176 <HAL_GPIO_Init+0x13e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3304      	adds	r3, #4
 8002176:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2bff      	cmp	r3, #255	; 0xff
 800217c:	d802      	bhi.n	8002184 <HAL_GPIO_Init+0x14c>
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	e002      	b.n	800218a <HAL_GPIO_Init+0x152>
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	3b08      	subs	r3, #8
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	210f      	movs	r1, #15
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	401a      	ands	r2, r3
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	431a      	orrs	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80b1 	beq.w	800231a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b8:	4b4d      	ldr	r3, [pc, #308]	; (80022f0 <HAL_GPIO_Init+0x2b8>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4a4c      	ldr	r2, [pc, #304]	; (80022f0 <HAL_GPIO_Init+0x2b8>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6193      	str	r3, [r2, #24]
 80021c4:	4b4a      	ldr	r3, [pc, #296]	; (80022f0 <HAL_GPIO_Init+0x2b8>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021d0:	4a48      	ldr	r2, [pc, #288]	; (80022f4 <HAL_GPIO_Init+0x2bc>)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	220f      	movs	r2, #15
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a40      	ldr	r2, [pc, #256]	; (80022f8 <HAL_GPIO_Init+0x2c0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d013      	beq.n	8002224 <HAL_GPIO_Init+0x1ec>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3f      	ldr	r2, [pc, #252]	; (80022fc <HAL_GPIO_Init+0x2c4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00d      	beq.n	8002220 <HAL_GPIO_Init+0x1e8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3e      	ldr	r2, [pc, #248]	; (8002300 <HAL_GPIO_Init+0x2c8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d007      	beq.n	800221c <HAL_GPIO_Init+0x1e4>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3d      	ldr	r2, [pc, #244]	; (8002304 <HAL_GPIO_Init+0x2cc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_GPIO_Init+0x1e0>
 8002214:	2303      	movs	r3, #3
 8002216:	e006      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 8002218:	2304      	movs	r3, #4
 800221a:	e004      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 800221c:	2302      	movs	r3, #2
 800221e:	e002      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <HAL_GPIO_Init+0x1ee>
 8002224:	2300      	movs	r3, #0
 8002226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002228:	f002 0203 	and.w	r2, r2, #3
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	4093      	lsls	r3, r2
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002236:	492f      	ldr	r1, [pc, #188]	; (80022f4 <HAL_GPIO_Init+0x2bc>)
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d006      	beq.n	800225e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002250:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	492c      	ldr	r1, [pc, #176]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800225e:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	43db      	mvns	r3, r3
 8002266:	4928      	ldr	r1, [pc, #160]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002268:	4013      	ands	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002278:	4b23      	ldr	r3, [pc, #140]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4922      	ldr	r1, [pc, #136]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	43db      	mvns	r3, r3
 800228e:	491e      	ldr	r1, [pc, #120]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 8002290:	4013      	ands	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	4918      	ldr	r1, [pc, #96]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	608b      	str	r3, [r1, #8]
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4914      	ldr	r1, [pc, #80]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d021      	beq.n	800230c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	490e      	ldr	r1, [pc, #56]	; (8002308 <HAL_GPIO_Init+0x2d0>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]
 80022d4:	e021      	b.n	800231a <HAL_GPIO_Init+0x2e2>
 80022d6:	bf00      	nop
 80022d8:	10320000 	.word	0x10320000
 80022dc:	10310000 	.word	0x10310000
 80022e0:	10220000 	.word	0x10220000
 80022e4:	10210000 	.word	0x10210000
 80022e8:	10120000 	.word	0x10120000
 80022ec:	10110000 	.word	0x10110000
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40010800 	.word	0x40010800
 80022fc:	40010c00 	.word	0x40010c00
 8002300:	40011000 	.word	0x40011000
 8002304:	40011400 	.word	0x40011400
 8002308:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_GPIO_Init+0x304>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	43db      	mvns	r3, r3
 8002314:	4909      	ldr	r1, [pc, #36]	; (800233c <HAL_GPIO_Init+0x304>)
 8002316:	4013      	ands	r3, r2
 8002318:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	3301      	adds	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	f47f ae8e 	bne.w	800204c <HAL_GPIO_Init+0x14>
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	372c      	adds	r7, #44	; 0x2c
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	40010400 	.word	0x40010400

08002340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e26c      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 8087 	beq.w	800246e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002360:	4b92      	ldr	r3, [pc, #584]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b04      	cmp	r3, #4
 800236a:	d00c      	beq.n	8002386 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800236c:	4b8f      	ldr	r3, [pc, #572]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d112      	bne.n	800239e <HAL_RCC_OscConfig+0x5e>
 8002378:	4b8c      	ldr	r3, [pc, #560]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002384:	d10b      	bne.n	800239e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002386:	4b89      	ldr	r3, [pc, #548]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d06c      	beq.n	800246c <HAL_RCC_OscConfig+0x12c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d168      	bne.n	800246c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e246      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x76>
 80023a8:	4b80      	ldr	r3, [pc, #512]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a7f      	ldr	r2, [pc, #508]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b2:	6013      	str	r3, [r2, #0]
 80023b4:	e02e      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x98>
 80023be:	4b7b      	ldr	r3, [pc, #492]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7a      	ldr	r2, [pc, #488]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b78      	ldr	r3, [pc, #480]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a77      	ldr	r2, [pc, #476]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0xbc>
 80023e2:	4b72      	ldr	r3, [pc, #456]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a71      	ldr	r2, [pc, #452]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b6f      	ldr	r3, [pc, #444]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6e      	ldr	r2, [pc, #440]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xd4>
 80023fc:	4b6b      	ldr	r3, [pc, #428]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6a      	ldr	r2, [pc, #424]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b68      	ldr	r3, [pc, #416]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a67      	ldr	r2, [pc, #412]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002412:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7fe fee6 	bl	80011ec <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe fee2 	bl	80011ec <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1fa      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xe4>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fed2 	bl	80011ec <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe fece 	bl	80011ec <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1e6      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	4b53      	ldr	r3, [pc, #332]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x10c>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d063      	beq.n	8002542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800247a:	4b4c      	ldr	r3, [pc, #304]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002486:	4b49      	ldr	r3, [pc, #292]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b08      	cmp	r3, #8
 8002490:	d11c      	bne.n	80024cc <HAL_RCC_OscConfig+0x18c>
 8002492:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d116      	bne.n	80024cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	4b43      	ldr	r3, [pc, #268]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x176>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1ba      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4939      	ldr	r1, [pc, #228]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	e03a      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <HAL_RCC_OscConfig+0x270>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fe87 	bl	80011ec <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e2:	f7fe fe83 	bl	80011ec <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e19b      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b2a      	ldr	r3, [pc, #168]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4927      	ldr	r1, [pc, #156]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_RCC_OscConfig+0x270>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fe66 	bl	80011ec <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002524:	f7fe fe62 	bl	80011ec <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e17a      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d03a      	beq.n	80025c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d019      	beq.n	800258a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_RCC_OscConfig+0x274>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe fe46 	bl	80011ec <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002564:	f7fe fe42 	bl	80011ec <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e15a      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <HAL_RCC_OscConfig+0x26c>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002582:	2001      	movs	r0, #1
 8002584:	f000 fb28 	bl	8002bd8 <RCC_Delay>
 8002588:	e01c      	b.n	80025c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_RCC_OscConfig+0x274>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002590:	f7fe fe2c 	bl	80011ec <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002596:	e00f      	b.n	80025b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7fe fe28 	bl	80011ec <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d908      	bls.n	80025b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e140      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	42420000 	.word	0x42420000
 80025b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	4b9e      	ldr	r3, [pc, #632]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e9      	bne.n	8002598 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a6 	beq.w	800271e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d6:	4b97      	ldr	r3, [pc, #604]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10d      	bne.n	80025fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	4b94      	ldr	r3, [pc, #592]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4a93      	ldr	r2, [pc, #588]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ec:	61d3      	str	r3, [r2, #28]
 80025ee:	4b91      	ldr	r3, [pc, #580]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b8e      	ldr	r3, [pc, #568]	; (8002838 <HAL_RCC_OscConfig+0x4f8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b8b      	ldr	r3, [pc, #556]	; (8002838 <HAL_RCC_OscConfig+0x4f8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a8a      	ldr	r2, [pc, #552]	; (8002838 <HAL_RCC_OscConfig+0x4f8>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7fe fde9 	bl	80011ec <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe fde5 	bl	80011ec <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b64      	cmp	r3, #100	; 0x64
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e0fd      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b81      	ldr	r3, [pc, #516]	; (8002838 <HAL_RCC_OscConfig+0x4f8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x312>
 8002644:	4b7b      	ldr	r3, [pc, #492]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a7a      	ldr	r2, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	e02d      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x334>
 800265a:	4b76      	ldr	r3, [pc, #472]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a75      	ldr	r2, [pc, #468]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	4b73      	ldr	r3, [pc, #460]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a72      	ldr	r2, [pc, #456]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	e01c      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b05      	cmp	r3, #5
 800267a:	d10c      	bne.n	8002696 <HAL_RCC_OscConfig+0x356>
 800267c:	4b6d      	ldr	r3, [pc, #436]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a6c      	ldr	r2, [pc, #432]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	f043 0304 	orr.w	r3, r3, #4
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	4b6a      	ldr	r3, [pc, #424]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a69      	ldr	r2, [pc, #420]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	e00b      	b.n	80026ae <HAL_RCC_OscConfig+0x36e>
 8002696:	4b67      	ldr	r3, [pc, #412]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a66      	ldr	r2, [pc, #408]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6213      	str	r3, [r2, #32]
 80026a2:	4b64      	ldr	r3, [pc, #400]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a63      	ldr	r2, [pc, #396]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d015      	beq.n	80026e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fd99 	bl	80011ec <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fd95 	bl	80011ec <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0ab      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	4b57      	ldr	r3, [pc, #348]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ee      	beq.n	80026be <HAL_RCC_OscConfig+0x37e>
 80026e0:	e014      	b.n	800270c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fd83 	bl	80011ec <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ea:	f7fe fd7f 	bl	80011ec <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e095      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002700:	4b4c      	ldr	r3, [pc, #304]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ee      	bne.n	80026ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4b48      	ldr	r3, [pc, #288]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	4a47      	ldr	r2, [pc, #284]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8081 	beq.w	800282a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002728:	4b42      	ldr	r3, [pc, #264]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d061      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d146      	bne.n	80027ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273c:	4b3f      	ldr	r3, [pc, #252]	; (800283c <HAL_RCC_OscConfig+0x4fc>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fe fd53 	bl	80011ec <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274a:	f7fe fd4f 	bl	80011ec <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e067      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275c:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002770:	d108      	bne.n	8002784 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002772:	4b30      	ldr	r3, [pc, #192]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	492d      	ldr	r1, [pc, #180]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a19      	ldr	r1, [r3, #32]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	430b      	orrs	r3, r1
 8002796:	4927      	ldr	r1, [pc, #156]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_RCC_OscConfig+0x4fc>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe fd23 	bl	80011ec <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe fd1f 	bl	80011ec <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e037      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x46a>
 80027c8:	e02f      	b.n	800282a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <HAL_RCC_OscConfig+0x4fc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fd0c 	bl	80011ec <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe fd08 	bl	80011ec <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e020      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x498>
 80027f6:	e018      	b.n	800282a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e013      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	429a      	cmp	r2, r3
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	40007000 	.word	0x40007000
 800283c:	42420060 	.word	0x42420060

08002840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0d0      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002854:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d910      	bls.n	8002884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b67      	ldr	r3, [pc, #412]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 0207 	bic.w	r2, r3, #7
 800286a:	4965      	ldr	r1, [pc, #404]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b8      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	494d      	ldr	r1, [pc, #308]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d040      	beq.n	8002960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d115      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d107      	bne.n	800290e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e073      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290e:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e06b      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800291e:	4b39      	ldr	r3, [pc, #228]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4936      	ldr	r1, [pc, #216]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002930:	f7fe fc5c 	bl	80011ec <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	e00a      	b.n	800294e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002938:	f7fe fc58 	bl	80011ec <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e053      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 020c 	and.w	r2, r3, #12
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	429a      	cmp	r2, r3
 800295e:	d1eb      	bne.n	8002938 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d210      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 0207 	bic.w	r2, r3, #7
 8002976:	4922      	ldr	r1, [pc, #136]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4313      	orrs	r3, r2
 800297c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e032      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4916      	ldr	r1, [pc, #88]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	490e      	ldr	r1, [pc, #56]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ce:	f000 f82d 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490a      	ldr	r1, [pc, #40]	; (8002a08 <HAL_RCC_ClockConfig+0x1c8>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <HAL_RCC_ClockConfig+0x1cc>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1d0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f93c 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	08008ab4 	.word	0x08008ab4
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	20000004 	.word	0x20000004

08002a14 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <HAL_RCC_EnableCSS+0x14>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	4242004c 	.word	0x4242004c

08002a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b490      	push	{r4, r7}
 8002a2e:	b08a      	sub	sp, #40	; 0x28
 8002a30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a32:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a34:	1d3c      	adds	r4, r7, #4
 8002a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a3c:	f240 2301 	movw	r3, #513	; 0x201
 8002a40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x40>
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x46>
 8002a6a:	e02d      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a6e:	623b      	str	r3, [r7, #32]
      break;
 8002a70:	e02d      	b.n	8002ace <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	0c9b      	lsrs	r3, r3, #18
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a7e:	4413      	add	r3, r2
 8002a80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d013      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	0c5b      	lsrs	r3, r3, #17
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aa4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aaa:	fb02 f203 	mul.w	r2, r2, r3
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab6:	e004      	b.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002abc:	fb02 f303 	mul.w	r3, r2, r3
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	623b      	str	r3, [r7, #32]
      break;
 8002ac6:	e002      	b.n	8002ace <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aca:	623b      	str	r3, [r7, #32]
      break;
 8002acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ace:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc90      	pop	{r4, r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	08008918 	.word	0x08008918
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	007a1200 	.word	0x007a1200
 8002ae8:	003d0900 	.word	0x003d0900

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b02      	ldr	r3, [pc, #8]	; (8002afc <HAL_RCC_GetHCLKFreq+0x10>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	20000000 	.word	0x20000000

08002b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b04:	f7ff fff2 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	4903      	ldr	r1, [pc, #12]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08008ac4 	.word	0x08008ac4

08002b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b2c:	f7ff ffde 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	0adb      	lsrs	r3, r3, #11
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4903      	ldr	r1, [pc, #12]	; (8002b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08008ac4 	.word	0x08008ac4

08002b50 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_RCC_GetClockConfig+0x58>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0203 	and.w	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_RCC_GetClockConfig+0x58>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_GetClockConfig+0x58>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_RCC_GetClockConfig+0x58>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	08db      	lsrs	r3, r3, #3
 8002b8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_GetClockConfig+0x5c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0207 	and.w	r2, r3, #7
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40022000 	.word	0x40022000

08002bb0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d104      	bne.n	8002bca <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002bc0:	f000 f828 	bl	8002c14 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	701a      	strb	r2, [r3, #0]
  }
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	4002100a 	.word	0x4002100a

08002bd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <RCC_Delay+0x34>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <RCC_Delay+0x38>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	0a5b      	lsrs	r3, r3, #9
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bf4:	bf00      	nop
  }
  while (Delay --);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1e5a      	subs	r2, r3, #1
 8002bfa:	60fa      	str	r2, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f9      	bne.n	8002bf4 <RCC_Delay+0x1c>
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	10624dd3 	.word	0x10624dd3

08002c14 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e041      	b.n	8002cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f839 	bl	8002cbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f000 f9b4 	bl	8002fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d001      	beq.n	8002ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e03a      	b.n	8002d5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a18      	ldr	r2, [pc, #96]	; (8002d68 <HAL_TIM_Base_Start_IT+0x98>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00e      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0x58>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d12:	d009      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0x58>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <HAL_TIM_Base_Start_IT+0x9c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIM_Base_Start_IT+0x58>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a13      	ldr	r2, [pc, #76]	; (8002d70 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d111      	bne.n	8002d4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d010      	beq.n	8002d5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4a:	e007      	b.n	8002d5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr
 8002d68:	40012c00 	.word	0x40012c00
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40000800 	.word	0x40000800

08002d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d122      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d11b      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0202 	mvn.w	r2, #2
 8002da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8ed 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8e0 	bl	8002f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f8ef 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d122      	bne.n	8002e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d11b      	bne.n	8002e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0204 	mvn.w	r2, #4
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f8c3 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8b6 	bl	8002f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f8c5 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d122      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d11b      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0208 	mvn.w	r2, #8
 8002e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f899 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f88c 	bl	8002f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f89b 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b10      	cmp	r3, #16
 8002e84:	d122      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b10      	cmp	r3, #16
 8002e92:	d11b      	bne.n	8002ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0210 	mvn.w	r2, #16
 8002e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f86f 	bl	8002f96 <HAL_TIM_IC_CaptureCallback>
 8002eb8:	e005      	b.n	8002ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f862 	bl	8002f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f871 	bl	8002fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f06f 0201 	mvn.w	r2, #1
 8002ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7fd fe6a 	bl	8000bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f02:	2b80      	cmp	r3, #128	; 0x80
 8002f04:	d10e      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f10:	2b80      	cmp	r3, #128	; 0x80
 8002f12:	d107      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f8bf 	bl	80030a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d10e      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f835 	bl	8002fba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0220 	mvn.w	r2, #32
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f88a 	bl	8003090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a29      	ldr	r2, [pc, #164]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fea:	d007      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <TIM_Base_SetConfig+0xbc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0x30>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a25      	ldr	r2, [pc, #148]	; (800308c <TIM_Base_SetConfig+0xc0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d108      	bne.n	800300e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a19      	ldr	r2, [pc, #100]	; (8003088 <TIM_Base_SetConfig+0xbc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0x62>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a18      	ldr	r2, [pc, #96]	; (800308c <TIM_Base_SetConfig+0xc0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <TIM_Base_SetConfig+0xb8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d103      	bne.n	8003074 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	615a      	str	r2, [r3, #20]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	40012c00 	.word	0x40012c00
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800

08003090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e03f      	b.n	8003146 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd ff24 	bl	8000f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2224      	movs	r2, #36	; 0x24
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f905 	bl	8003308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800310c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695a      	ldr	r2, [r3, #20]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800311c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800312c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b08a      	sub	sp, #40	; 0x28
 8003152:	af02      	add	r7, sp, #8
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b20      	cmp	r3, #32
 800316c:	d17c      	bne.n	8003268 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_UART_Transmit+0x2c>
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e075      	b.n	800326a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_UART_Transmit+0x3e>
 8003188:	2302      	movs	r3, #2
 800318a:	e06e      	b.n	800326a <HAL_UART_Transmit+0x11c>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2221      	movs	r2, #33	; 0x21
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031a2:	f7fe f823 	bl	80011ec <HAL_GetTick>
 80031a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	88fa      	ldrh	r2, [r7, #6]
 80031b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031bc:	d108      	bne.n	80031d0 <HAL_UART_Transmit+0x82>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d104      	bne.n	80031d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	e003      	b.n	80031d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031e0:	e02a      	b.n	8003238 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2180      	movs	r1, #128	; 0x80
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f840 	bl	8003272 <UART_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e036      	b.n	800326a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10b      	bne.n	800321a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003210:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	3302      	adds	r3, #2
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	e007      	b.n	800322a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	3301      	adds	r3, #1
 8003228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800322e:	b29b      	uxth	r3, r3
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1cf      	bne.n	80031e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2200      	movs	r2, #0
 800324a:	2140      	movs	r1, #64	; 0x40
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f810 	bl	8003272 <UART_WaitOnFlagUntilTimeout>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e006      	b.n	800326a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	e000      	b.n	800326a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
  }
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003282:	e02c      	b.n	80032de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328a:	d028      	beq.n	80032de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003292:	f7fd ffab 	bl	80011ec <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d21d      	bcs.n	80032de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e00f      	b.n	80032fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4013      	ands	r3, r2
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	bf0c      	ite	eq
 80032ee:	2301      	moveq	r3, #1
 80032f0:	2300      	movne	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d0c3      	beq.n	8003284 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003342:	f023 030c 	bic.w	r3, r3, #12
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	430b      	orrs	r3, r1
 800334e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a2c      	ldr	r2, [pc, #176]	; (800341c <UART_SetConfig+0x114>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d103      	bne.n	8003378 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003370:	f7ff fbda 	bl	8002b28 <HAL_RCC_GetPCLK2Freq>
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	e002      	b.n	800337e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003378:	f7ff fbc2 	bl	8002b00 <HAL_RCC_GetPCLK1Freq>
 800337c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009a      	lsls	r2, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	4a22      	ldr	r2, [pc, #136]	; (8003420 <UART_SetConfig+0x118>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	0119      	lsls	r1, r3, #4
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	009a      	lsls	r2, r3, #2
 80033a8:	441a      	add	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033b4:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <UART_SetConfig+0x118>)
 80033b6:	fba3 0302 	umull	r0, r3, r3, r2
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2064      	movs	r0, #100	; 0x64
 80033be:	fb00 f303 	mul.w	r3, r0, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	3332      	adds	r3, #50	; 0x32
 80033c8:	4a15      	ldr	r2, [pc, #84]	; (8003420 <UART_SetConfig+0x118>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d4:	4419      	add	r1, r3
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009a      	lsls	r2, r3, #2
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <UART_SetConfig+0x118>)
 80033ee:	fba3 0302 	umull	r0, r3, r3, r2
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2064      	movs	r0, #100	; 0x64
 80033f6:	fb00 f303 	mul.w	r3, r0, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	3332      	adds	r3, #50	; 0x32
 8003400:	4a07      	ldr	r2, [pc, #28]	; (8003420 <UART_SetConfig+0x118>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	f003 020f 	and.w	r2, r3, #15
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	440a      	add	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40013800 	.word	0x40013800
 8003420:	51eb851f 	.word	0x51eb851f

08003424 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800342a:	f3ef 8305 	mrs	r3, IPSR
 800342e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003430:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003436:	f3ef 8310 	mrs	r3, PRIMASK
 800343a:	607b      	str	r3, [r7, #4]
  return(result);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <osKernelInitialize+0x32>
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <osKernelInitialize+0x60>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d109      	bne.n	800345e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800344a:	f3ef 8311 	mrs	r3, BASEPRI
 800344e:	603b      	str	r3, [r7, #0]
  return(result);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003456:	f06f 0305 	mvn.w	r3, #5
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	e00c      	b.n	8003478 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <osKernelInitialize+0x60>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <osKernelInitialize+0x60>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e002      	b.n	8003478 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003478:	68fb      	ldr	r3, [r7, #12]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	200000b8 	.word	0x200000b8

08003488 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800348e:	f3ef 8305 	mrs	r3, IPSR
 8003492:	60bb      	str	r3, [r7, #8]
  return(result);
 8003494:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10f      	bne.n	80034ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349a:	f3ef 8310 	mrs	r3, PRIMASK
 800349e:	607b      	str	r3, [r7, #4]
  return(result);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <osKernelStart+0x32>
 80034a6:	4b11      	ldr	r3, [pc, #68]	; (80034ec <osKernelStart+0x64>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d109      	bne.n	80034c2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034ae:	f3ef 8311 	mrs	r3, BASEPRI
 80034b2:	603b      	str	r3, [r7, #0]
  return(result);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80034ba:	f06f 0305 	mvn.w	r3, #5
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e00e      	b.n	80034e0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <osKernelStart+0x64>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <osKernelStart+0x64>)
 80034cc:	2202      	movs	r2, #2
 80034ce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80034d0:	f002 f932 	bl	8005738 <vTaskStartScheduler>
      stat = osOK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e002      	b.n	80034e0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80034da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034e0:	68fb      	ldr	r3, [r7, #12]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200000b8 	.word	0x200000b8

080034f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b092      	sub	sp, #72	; 0x48
 80034f4:	af04      	add	r7, sp, #16
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003500:	f3ef 8305 	mrs	r3, IPSR
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 8094 	bne.w	8003636 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350e:	f3ef 8310 	mrs	r3, PRIMASK
 8003512:	623b      	str	r3, [r7, #32]
  return(result);
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f040 808d 	bne.w	8003636 <osThreadNew+0x146>
 800351c:	4b48      	ldr	r3, [pc, #288]	; (8003640 <osThreadNew+0x150>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d106      	bne.n	8003532 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003524:	f3ef 8311 	mrs	r3, BASEPRI
 8003528:	61fb      	str	r3, [r7, #28]
  return(result);
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f040 8082 	bne.w	8003636 <osThreadNew+0x146>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d07e      	beq.n	8003636 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800353c:	2318      	movs	r3, #24
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003540:	2300      	movs	r3, #0
 8003542:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003544:	f107 031b 	add.w	r3, r7, #27
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800354a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d045      	beq.n	80035e2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <osThreadNew+0x74>
        name = attr->name;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <osThreadNew+0x9a>
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	2b38      	cmp	r3, #56	; 0x38
 800357c:	d805      	bhi.n	800358a <osThreadNew+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <osThreadNew+0x9e>
        return (NULL);
 800358a:	2300      	movs	r3, #0
 800358c:	e054      	b.n	8003638 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00e      	beq.n	80035c4 <osThreadNew+0xd4>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2bbb      	cmp	r3, #187	; 0xbb
 80035ac:	d90a      	bls.n	80035c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <osThreadNew+0xd4>
        mem = 1;
 80035be:	2301      	movs	r3, #1
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c2:	e010      	b.n	80035e6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10c      	bne.n	80035e6 <osThreadNew+0xf6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d108      	bne.n	80035e6 <osThreadNew+0xf6>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d104      	bne.n	80035e6 <osThreadNew+0xf6>
          mem = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e0:	e001      	b.n	80035e6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d110      	bne.n	800360e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035f4:	9202      	str	r2, [sp, #8]
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003600:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f001 fe52 	bl	80052ac <xTaskCreateStatic>
 8003608:	4603      	mov	r3, r0
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e013      	b.n	8003636 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	d110      	bne.n	8003636 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	b29a      	uxth	r2, r3
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f001 fe9c 	bl	8005364 <xTaskCreate>
 800362c:	4603      	mov	r3, r0
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <osThreadNew+0x146>
          hTask = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003636:	697b      	ldr	r3, [r7, #20]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3738      	adds	r7, #56	; 0x38
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	200000b8 	.word	0x200000b8

08003644 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8003648:	2000      	movs	r0, #0
 800364a:	f001 ffcf 	bl	80055ec <vTaskDelete>
#endif
  for (;;);
 800364e:	e7fe      	b.n	800364e <osThreadExit+0xa>

08003650 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af02      	add	r7, sp, #8
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <osThreadFlagsSet+0x1a>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	da03      	bge.n	8003672 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800366a:	f06f 0303 	mvn.w	r3, #3
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	e045      	b.n	80036fe <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003676:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003678:	f3ef 8305 	mrs	r3, IPSR
 800367c:	61bb      	str	r3, [r7, #24]
  return(result);
 800367e:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10f      	bne.n	80036a4 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003684:	f3ef 8310 	mrs	r3, PRIMASK
 8003688:	617b      	str	r3, [r7, #20]
  return(result);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d109      	bne.n	80036a4 <osThreadFlagsSet+0x54>
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <osThreadFlagsSet+0xb8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d125      	bne.n	80036e4 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003698:	f3ef 8311 	mrs	r3, BASEPRI
 800369c:	613b      	str	r3, [r7, #16]
  return(result);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01f      	beq.n	80036e4 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	2201      	movs	r2, #1
 80036b2:	6839      	ldr	r1, [r7, #0]
 80036b4:	69f8      	ldr	r0, [r7, #28]
 80036b6:	f002 ff2f 	bl	8006518 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	2200      	movs	r2, #0
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	2100      	movs	r1, #0
 80036c6:	69f8      	ldr	r0, [r7, #28]
 80036c8:	f002 ff26 	bl	8006518 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <osThreadFlagsSet+0xae>
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <osThreadFlagsSet+0xbc>)
 80036d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	e00c      	b.n	80036fe <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80036e4:	2300      	movs	r3, #0
 80036e6:	2201      	movs	r2, #1
 80036e8:	6839      	ldr	r1, [r7, #0]
 80036ea:	69f8      	ldr	r0, [r7, #28]
 80036ec:	f002 fe78 	bl	80063e0 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	2200      	movs	r2, #0
 80036f6:	2100      	movs	r1, #0
 80036f8:	69f8      	ldr	r0, [r7, #28]
 80036fa:	f002 fe71 	bl	80063e0 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 80036fe:	68fb      	ldr	r3, [r7, #12]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	200000b8 	.word	0x200000b8
 800370c:	e000ed04 	.word	0xe000ed04

08003710 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b08e      	sub	sp, #56	; 0x38
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800371c:	f3ef 8305 	mrs	r3, IPSR
 8003720:	61fb      	str	r3, [r7, #28]
  return(result);
 8003722:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003728:	f3ef 8310 	mrs	r3, PRIMASK
 800372c:	61bb      	str	r3, [r7, #24]
  return(result);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d109      	bne.n	8003748 <osThreadFlagsWait+0x38>
 8003734:	4b3f      	ldr	r3, [pc, #252]	; (8003834 <osThreadFlagsWait+0x124>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d109      	bne.n	8003750 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800373c:	f3ef 8311 	mrs	r3, BASEPRI
 8003740:	617b      	str	r3, [r7, #20]
  return(result);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8003748:	f06f 0305 	mvn.w	r3, #5
 800374c:	637b      	str	r3, [r7, #52]	; 0x34
 800374e:	e06b      	b.n	8003828 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	da03      	bge.n	800375e <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8003756:	f06f 0303 	mvn.w	r3, #3
 800375a:	637b      	str	r3, [r7, #52]	; 0x34
 800375c:	e064      	b.n	8003828 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <osThreadFlagsWait+0x5e>
      clear = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
 800376c:	e001      	b.n	8003772 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800377a:	f002 f8eb 	bl	8005954 <xTaskGetTickCount>
 800377e:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8003780:	f107 0210 	add.w	r2, r7, #16
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003788:	2000      	movs	r0, #0
 800378a:	f002 fdc9 	bl	8006320 <xTaskNotifyWait>
 800378e:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	2b01      	cmp	r3, #1
 8003794:	d137      	bne.n	8003806 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8003796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4013      	ands	r3, r2
 800379c:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037a2:	4313      	orrs	r3, r2
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b4:	4013      	ands	r3, r2
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d032      	beq.n	8003822 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80037c2:	f06f 0302 	mvn.w	r3, #2
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80037c8:	e02e      	b.n	8003828 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d128      	bne.n	8003826 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d103      	bne.n	80037e2 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80037da:	f06f 0302 	mvn.w	r3, #2
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80037e0:	e022      	b.n	8003828 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80037e2:	f002 f8b7 	bl	8005954 <xTaskGetTickCount>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 80037ee:	6a3a      	ldr	r2, [r7, #32]
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d902      	bls.n	80037fc <osThreadFlagsWait+0xec>
          tout  = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	e00e      	b.n	800381a <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 80037fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003804:	e009      	b.n	800381a <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d103      	bne.n	8003814 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800380c:	f06f 0302 	mvn.w	r3, #2
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
 8003812:	e002      	b.n	800381a <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8003814:	f06f 0301 	mvn.w	r3, #1
 8003818:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1af      	bne.n	8003780 <osThreadFlagsWait+0x70>
 8003820:	e002      	b.n	8003828 <osThreadFlagsWait+0x118>
            break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <osThreadFlagsWait+0x118>
            break;
 8003826:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8003828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800382a:	4618      	mov	r0, r3
 800382c:	3738      	adds	r7, #56	; 0x38
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	200000b8 	.word	0x200000b8

08003838 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003840:	f3ef 8305 	mrs	r3, IPSR
 8003844:	613b      	str	r3, [r7, #16]
  return(result);
 8003846:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10f      	bne.n	800386c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384c:	f3ef 8310 	mrs	r3, PRIMASK
 8003850:	60fb      	str	r3, [r7, #12]
  return(result);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <osDelay+0x34>
 8003858:	4b0d      	ldr	r3, [pc, #52]	; (8003890 <osDelay+0x58>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d109      	bne.n	8003874 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003860:	f3ef 8311 	mrs	r3, BASEPRI
 8003864:	60bb      	str	r3, [r7, #8]
  return(result);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <osDelay+0x3c>
    stat = osErrorISR;
 800386c:	f06f 0305 	mvn.w	r3, #5
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e007      	b.n	8003884 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <osDelay+0x4c>
      vTaskDelay(ticks);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f001 ff26 	bl	80056d0 <vTaskDelay>
    }
  }

  return (stat);
 8003884:	697b      	ldr	r3, [r7, #20]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200000b8 	.word	0x200000b8

08003894 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f003 fb03 	bl	8006ea8 <pvTimerGetTimerID>
 80038a2:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <TimerCallback+0x22>
    callb->func (callb->arg);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	6852      	ldr	r2, [r2, #4]
 80038b2:	4610      	mov	r0, r2
 80038b4:	4798      	blx	r3
  }
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08e      	sub	sp, #56	; 0x38
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	460b      	mov	r3, r1
 80038ce:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038d4:	f3ef 8305 	mrs	r3, IPSR
 80038d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80038da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d16a      	bne.n	80039b6 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e0:	f3ef 8310 	mrs	r3, PRIMASK
 80038e4:	617b      	str	r3, [r7, #20]
  return(result);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d164      	bne.n	80039b6 <osTimerNew+0xf6>
 80038ec:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <osTimerNew+0x100>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d105      	bne.n	8003900 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038f4:	f3ef 8311 	mrs	r3, BASEPRI
 80038f8:	613b      	str	r3, [r7, #16]
  return(result);
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d15a      	bne.n	80039b6 <osTimerNew+0xf6>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d057      	beq.n	80039b6 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003906:	2008      	movs	r0, #8
 8003908:	f003 fce0 	bl	80072cc <pvPortMalloc>
 800390c:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d050      	beq.n	80039b6 <osTimerNew+0xf6>
      callb->func = func;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <osTimerNew+0x6c>
        reload = pdFALSE;
 8003926:	2300      	movs	r3, #0
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
 800392a:	e001      	b.n	8003930 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800392c:	2301      	movs	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003934:	623b      	str	r3, [r7, #32]
      name = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01c      	beq.n	800397a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <osTimerNew+0x8e>
          name = attr->name;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d006      	beq.n	8003964 <osTimerNew+0xa4>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b2f      	cmp	r3, #47	; 0x2f
 800395c:	d902      	bls.n	8003964 <osTimerNew+0xa4>
          mem = 1;
 800395e:	2301      	movs	r3, #1
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	e00c      	b.n	800397e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <osTimerNew+0xbe>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d104      	bne.n	800397e <osTimerNew+0xbe>
            mem = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	623b      	str	r3, [r7, #32]
 8003978:	e001      	b.n	800397e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10c      	bne.n	800399e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <osTimerNew+0x104>)
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003992:	2101      	movs	r1, #1
 8003994:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003996:	f002 ff4e 	bl	8006836 <xTimerCreateStatic>
 800399a:	62b8      	str	r0, [r7, #40]	; 0x28
 800399c:	e00b      	b.n	80039b6 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d108      	bne.n	80039b6 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80039a4:	4b07      	ldr	r3, [pc, #28]	; (80039c4 <osTimerNew+0x104>)
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ac:	2101      	movs	r1, #1
 80039ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039b0:	f002 ff20 	bl	80067f4 <xTimerCreate>
 80039b4:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3730      	adds	r7, #48	; 0x30
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	200000b8 	.word	0x200000b8
 80039c4:	08003895 	.word	0x08003895

080039c8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d6:	f3ef 8305 	mrs	r3, IPSR
 80039da:	617b      	str	r3, [r7, #20]
  return(result);
 80039dc:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e2:	f3ef 8310 	mrs	r3, PRIMASK
 80039e6:	613b      	str	r3, [r7, #16]
  return(result);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <osTimerStart+0x3a>
 80039ee:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <osTimerStart+0x7c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d109      	bne.n	8003a0a <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039f6:	f3ef 8311 	mrs	r3, BASEPRI
 80039fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <osTimerStart+0x42>
    stat = osErrorISR;
 8003a02:	f06f 0305 	mvn.w	r3, #5
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	e017      	b.n	8003a3a <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <osTimerStart+0x50>
    stat = osErrorParameter;
 8003a10:	f06f 0303 	mvn.w	r3, #3
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	e010      	b.n	8003a3a <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	2104      	movs	r1, #4
 8003a22:	69b8      	ldr	r0, [r7, #24]
 8003a24:	f002 ff76 	bl	8006914 <xTimerGenericCommand>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d102      	bne.n	8003a34 <osTimerStart+0x6c>
      stat = osOK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e002      	b.n	8003a3a <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 8003a34:	f06f 0302 	mvn.w	r3, #2
 8003a38:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8003a3a:	69fb      	ldr	r3, [r7, #28]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200000b8 	.word	0x200000b8

08003a48 <osMutexAcquire>:
  }

  return ((osMutexId_t)hMutex);
}

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a66:	f3ef 8305 	mrs	r3, IPSR
 8003a6a:	613b      	str	r3, [r7, #16]
  return(result);
 8003a6c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10f      	bne.n	8003a92 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a72:	f3ef 8310 	mrs	r3, PRIMASK
 8003a76:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <osMutexAcquire+0x4a>
 8003a7e:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <osMutexAcquire+0xb8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d109      	bne.n	8003a9a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a86:	f3ef 8311 	mrs	r3, BASEPRI
 8003a8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8003a92:	f06f 0305 	mvn.w	r3, #5
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	e02c      	b.n	8003af4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8003aa0:	f06f 0303 	mvn.w	r3, #3
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e025      	b.n	8003af4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d011      	beq.n	8003ad2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003aae:	6839      	ldr	r1, [r7, #0]
 8003ab0:	69b8      	ldr	r0, [r7, #24]
 8003ab2:	f000 fcfa 	bl	80044aa <xQueueTakeMutexRecursive>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d01b      	beq.n	8003af4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8003ac2:	f06f 0301 	mvn.w	r3, #1
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	e014      	b.n	8003af4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003aca:	f06f 0302 	mvn.w	r3, #2
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	e010      	b.n	8003af4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003ad2:	6839      	ldr	r1, [r7, #0]
 8003ad4:	69b8      	ldr	r0, [r7, #24]
 8003ad6:	f000 fff7 	bl	8004ac8 <xQueueSemaphoreTake>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d009      	beq.n	8003af4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8003ae6:	f06f 0301 	mvn.w	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	e002      	b.n	8003af4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8003aee:	f06f 0302 	mvn.w	r3, #2
 8003af2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003af4:	69fb      	ldr	r3, [r7, #28]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3720      	adds	r7, #32
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200000b8 	.word	0x200000b8

08003b04 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b20:	f3ef 8305 	mrs	r3, IPSR
 8003b24:	613b      	str	r3, [r7, #16]
  return(result);
 8003b26:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10f      	bne.n	8003b4c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b30:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <osMutexRelease+0x48>
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <osMutexRelease+0x9c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d109      	bne.n	8003b54 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b40:	f3ef 8311 	mrs	r3, BASEPRI
 8003b44:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <osMutexRelease+0x50>
    stat = osErrorISR;
 8003b4c:	f06f 0305 	mvn.w	r3, #5
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e01f      	b.n	8003b94 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8003b5a:	f06f 0303 	mvn.w	r3, #3
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e018      	b.n	8003b94 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003b68:	69b8      	ldr	r0, [r7, #24]
 8003b6a:	f000 fc6a 	bl	8004442 <xQueueGiveMutexRecursive>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d00f      	beq.n	8003b94 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003b74:	f06f 0302 	mvn.w	r3, #2
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	e00b      	b.n	8003b94 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2100      	movs	r1, #0
 8003b82:	69b8      	ldr	r0, [r7, #24]
 8003b84:	f000 fd32 	bl	80045ec <xQueueGenericSend>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d002      	beq.n	8003b94 <osMutexRelease+0x90>
        stat = osErrorResource;
 8003b8e:	f06f 0302 	mvn.w	r3, #2
 8003b92:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8003b94:	69fb      	ldr	r3, [r7, #28]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200000b8 	.word	0x200000b8

08003ba4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08c      	sub	sp, #48	; 0x30
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bb4:	f3ef 8305 	mrs	r3, IPSR
 8003bb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bba:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f040 8086 	bne.w	8003cce <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc6:	617b      	str	r3, [r7, #20]
  return(result);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d17f      	bne.n	8003cce <osSemaphoreNew+0x12a>
 8003bce:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <osSemaphoreNew+0x134>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d105      	bne.n	8003be2 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003bd6:	f3ef 8311 	mrs	r3, BASEPRI
 8003bda:	613b      	str	r3, [r7, #16]
  return(result);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d175      	bne.n	8003cce <osSemaphoreNew+0x12a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d072      	beq.n	8003cce <osSemaphoreNew+0x12a>
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d86e      	bhi.n	8003cce <osSemaphoreNew+0x12a>
    mem = -1;
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bf4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d015      	beq.n	8003c28 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d006      	beq.n	8003c12 <osSemaphoreNew+0x6e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2b53      	cmp	r3, #83	; 0x53
 8003c0a:	d902      	bls.n	8003c12 <osSemaphoreNew+0x6e>
        mem = 1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	e00c      	b.n	8003c2c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d108      	bne.n	8003c2c <osSemaphoreNew+0x88>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d104      	bne.n	8003c2c <osSemaphoreNew+0x88>
          mem = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
 8003c26:	e001      	b.n	8003c2c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c32:	d04c      	beq.n	8003cce <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d128      	bne.n	8003c8c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d10a      	bne.n	8003c56 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2203      	movs	r2, #3
 8003c46:	9200      	str	r2, [sp, #0]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	f000 fb1d 	bl	800428c <xQueueGenericCreateStatic>
 8003c52:	6278      	str	r0, [r7, #36]	; 0x24
 8003c54:	e005      	b.n	8003c62 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003c56:	2203      	movs	r2, #3
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f000 fb8d 	bl	800437a <xQueueGenericCreate>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d022      	beq.n	8003cae <osSemaphoreNew+0x10a>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01f      	beq.n	8003cae <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2200      	movs	r2, #0
 8003c72:	2100      	movs	r1, #0
 8003c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c76:	f000 fcb9 	bl	80045ec <xQueueGenericSend>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d016      	beq.n	8003cae <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8003c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c82:	f001 f8da 	bl	8004e3a <vQueueDelete>
            hSemaphore = NULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8a:	e010      	b.n	8003cae <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d108      	bne.n	8003ca4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 fc3b 	bl	8004516 <xQueueCreateCountingSemaphoreStatic>
 8003ca0:	6278      	str	r0, [r7, #36]	; 0x24
 8003ca2:	e004      	b.n	8003cae <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 fc6c 	bl	8004584 <xQueueCreateCountingSemaphore>
 8003cac:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00c      	beq.n	8003cce <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <osSemaphoreNew+0x11e>
          name = attr->name;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	e001      	b.n	8003cc6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003cc6:	69f9      	ldr	r1, [r7, #28]
 8003cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cca:	f001 fa0f 	bl	80050ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3728      	adds	r7, #40	; 0x28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200000b8 	.word	0x200000b8

08003cdc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cec:	f3ef 8305 	mrs	r3, IPSR
 8003cf0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cf2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d16f      	bne.n	8003dd8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfc:	617b      	str	r3, [r7, #20]
  return(result);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d169      	bne.n	8003dd8 <osMessageQueueNew+0xfc>
 8003d04:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <osMessageQueueNew+0x108>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d105      	bne.n	8003d18 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8003d10:	613b      	str	r3, [r7, #16]
  return(result);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d15f      	bne.n	8003dd8 <osMessageQueueNew+0xfc>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d05c      	beq.n	8003dd8 <osMessageQueueNew+0xfc>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d059      	beq.n	8003dd8 <osMessageQueueNew+0xfc>
    mem = -1;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d029      	beq.n	8003d84 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d012      	beq.n	8003d5e <osMessageQueueNew+0x82>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b53      	cmp	r3, #83	; 0x53
 8003d3e:	d90e      	bls.n	8003d5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d302      	bcc.n	8003d5e <osMessageQueueNew+0x82>
        mem = 1;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	e014      	b.n	8003d88 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d110      	bne.n	8003d88 <osMessageQueueNew+0xac>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d104      	bne.n	8003d88 <osMessageQueueNew+0xac>
          mem = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	623b      	str	r3, [r7, #32]
 8003d82:	e001      	b.n	8003d88 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d10b      	bne.n	8003da6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2100      	movs	r1, #0
 8003d98:	9100      	str	r1, [sp, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fa75 	bl	800428c <xQueueGenericCreateStatic>
 8003da2:	6278      	str	r0, [r7, #36]	; 0x24
 8003da4:	e008      	b.n	8003db8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003dac:	2200      	movs	r2, #0
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 fae2 	bl	800437a <xQueueGenericCreate>
 8003db6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00c      	beq.n	8003dd8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <osMessageQueueNew+0xf0>
        name = attr->name;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	e001      	b.n	8003dd0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003dd0:	69f9      	ldr	r1, [r7, #28]
 8003dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003dd4:	f001 f98a 	bl	80050ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3728      	adds	r7, #40	; 0x28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	200000b8 	.word	0x200000b8

08003de8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e00:	f3ef 8305 	mrs	r3, IPSR
 8003e04:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e06:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10f      	bne.n	8003e2c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e10:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d109      	bne.n	8003e2c <osMessageQueuePut+0x44>
 8003e18:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <osMessageQueuePut+0xe0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d12e      	bne.n	8003e7e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e20:	f3ef 8311 	mrs	r3, BASEPRI
 8003e24:	617b      	str	r3, [r7, #20]
  return(result);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d028      	beq.n	8003e7e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <osMessageQueuePut+0x56>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <osMessageQueuePut+0x56>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003e3e:	f06f 0303 	mvn.w	r3, #3
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e44:	e039      	b.n	8003eba <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003e4a:	f107 0210 	add.w	r2, r7, #16
 8003e4e:	2300      	movs	r3, #0
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	6a38      	ldr	r0, [r7, #32]
 8003e54:	f000 fcba 	bl	80047cc <xQueueGenericSendFromISR>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d003      	beq.n	8003e66 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003e5e:	f06f 0302 	mvn.w	r3, #2
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e64:	e029      	b.n	8003eba <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d026      	beq.n	8003eba <osMessageQueuePut+0xd2>
 8003e6c:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <osMessageQueuePut+0xe4>)
 8003e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003e7c:	e01d      	b.n	8003eba <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <osMessageQueuePut+0xa2>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003e8a:	f06f 0303 	mvn.w	r3, #3
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e90:	e014      	b.n	8003ebc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003e92:	2300      	movs	r3, #0
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	68b9      	ldr	r1, [r7, #8]
 8003e98:	6a38      	ldr	r0, [r7, #32]
 8003e9a:	f000 fba7 	bl	80045ec <xQueueGenericSend>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d00b      	beq.n	8003ebc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003eaa:	f06f 0301 	mvn.w	r3, #1
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb0:	e004      	b.n	8003ebc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003eb2:	f06f 0302 	mvn.w	r3, #2
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb8:	e000      	b.n	8003ebc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003eba:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3728      	adds	r7, #40	; 0x28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200000b8 	.word	0x200000b8
 8003ecc:	e000ed04 	.word	0xe000ed04

08003ed0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee6:	f3ef 8305 	mrs	r3, IPSR
 8003eea:	61fb      	str	r3, [r7, #28]
  return(result);
 8003eec:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ef6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d109      	bne.n	8003f12 <osMessageQueueGet+0x42>
 8003efe:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <osMessageQueueGet+0xdc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d12e      	bne.n	8003f64 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f06:	f3ef 8311 	mrs	r3, BASEPRI
 8003f0a:	617b      	str	r3, [r7, #20]
  return(result);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d028      	beq.n	8003f64 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <osMessageQueueGet+0x54>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <osMessageQueueGet+0x54>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003f24:	f06f 0303 	mvn.w	r3, #3
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f2a:	e038      	b.n	8003f9e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003f30:	f107 0310 	add.w	r3, r7, #16
 8003f34:	461a      	mov	r2, r3
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	6a38      	ldr	r0, [r7, #32]
 8003f3a:	f000 fec5 	bl	8004cc8 <xQueueReceiveFromISR>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d003      	beq.n	8003f4c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003f44:	f06f 0302 	mvn.w	r3, #2
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f4a:	e028      	b.n	8003f9e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d025      	beq.n	8003f9e <osMessageQueueGet+0xce>
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <osMessageQueueGet+0xe0>)
 8003f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f62:	e01c      	b.n	8003f9e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <osMessageQueueGet+0xa0>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d103      	bne.n	8003f78 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003f70:	f06f 0303 	mvn.w	r3, #3
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
 8003f76:	e013      	b.n	8003fa0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	6a38      	ldr	r0, [r7, #32]
 8003f7e:	f000 fccf 	bl	8004920 <xQueueReceive>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d00b      	beq.n	8003fa0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003f8e:	f06f 0301 	mvn.w	r3, #1
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
 8003f94:	e004      	b.n	8003fa0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003f96:	f06f 0302 	mvn.w	r3, #2
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9c:	e000      	b.n	8003fa0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003f9e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3728      	adds	r7, #40	; 0x28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	200000b8 	.word	0x200000b8
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <osMessageQueueGetCount+0x18>
    count = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e01e      	b.n	800400a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fcc:	f3ef 8305 	mrs	r3, IPSR
 8003fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8003fd2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10f      	bne.n	8003ff8 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fdc:	613b      	str	r3, [r7, #16]
  return(result);
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <osMessageQueueGetCount+0x44>
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <osMessageQueueGetCount+0x60>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d10a      	bne.n	8004002 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fec:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003ff8:	69b8      	ldr	r0, [r7, #24]
 8003ffa:	f000 ff03 	bl	8004e04 <uxQueueMessagesWaitingFromISR>
 8003ffe:	61f8      	str	r0, [r7, #28]
 8004000:	e003      	b.n	800400a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004002:	69b8      	ldr	r0, [r7, #24]
 8004004:	f000 fee0 	bl	8004dc8 <uxQueueMessagesWaiting>
 8004008:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800400a:	69fb      	ldr	r3, [r7, #28]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	200000b8 	.word	0x200000b8

08004018 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4a06      	ldr	r2, [pc, #24]	; (8004040 <vApplicationGetIdleTaskMemory+0x28>)
 8004028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	4a05      	ldr	r2, [pc, #20]	; (8004044 <vApplicationGetIdleTaskMemory+0x2c>)
 800402e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	601a      	str	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	200000bc 	.word	0x200000bc
 8004044:	20000178 	.word	0x20000178

08004048 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a06      	ldr	r2, [pc, #24]	; (8004070 <vApplicationGetTimerTaskMemory+0x28>)
 8004058:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4a05      	ldr	r2, [pc, #20]	; (8004074 <vApplicationGetTimerTaskMemory+0x2c>)
 800405e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2280      	movs	r2, #128	; 0x80
 8004064:	601a      	str	r2, [r3, #0]
}
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr
 8004070:	20000378 	.word	0x20000378
 8004074:	20000434 	.word	0x20000434

08004078 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f103 0208 	add.w	r2, r3, #8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004090:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f103 0208 	add.w	r2, r3, #8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f103 0208 	add.w	r2, r3, #8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr

080040b6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr

080040ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040ce:	b480      	push	{r7}
 80040d0:	b085      	sub	sp, #20
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800412a:	d103      	bne.n	8004134 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e00c      	b.n	800414e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3308      	adds	r3, #8
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e002      	b.n	8004142 <vListInsert+0x2e>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	d2f6      	bcs.n	800413c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6892      	ldr	r2, [r2, #8]
 800419a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6852      	ldr	r2, [r2, #4]
 80041a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d103      	bne.n	80041b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	1e5a      	subs	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc80      	pop	{r7}
 80041d4:	4770      	bx	lr

080041d6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10a      	bne.n	8004200 <xQueueGenericReset+0x2a>
	__asm volatile
 80041ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	60bb      	str	r3, [r7, #8]
}
 80041fc:	bf00      	nop
 80041fe:	e7fe      	b.n	80041fe <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004200:	f002 ff64 	bl	80070cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	68f9      	ldr	r1, [r7, #12]
 800420e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	441a      	add	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004230:	3b01      	subs	r3, #1
 8004232:	68f9      	ldr	r1, [r7, #12]
 8004234:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	441a      	add	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	22ff      	movs	r2, #255	; 0xff
 8004244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	22ff      	movs	r2, #255	; 0xff
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00f      	beq.n	800427e <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3310      	adds	r3, #16
 8004262:	4618      	mov	r0, r3
 8004264:	f001 fcfa 	bl	8005c5c <xTaskRemoveFromEventList>
 8004268:	e009      	b.n	800427e <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3310      	adds	r3, #16
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff02 	bl	8004078 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3324      	adds	r3, #36	; 0x24
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fefd 	bl	8004078 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800427e:	f002 ff55 	bl	800712c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004282:	2301      	movs	r3, #1
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08e      	sub	sp, #56	; 0x38
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80042b2:	bf00      	nop
 80042b4:	e7fe      	b.n	80042b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <xQueueGenericCreateStatic+0x52>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <xQueueGenericCreateStatic+0x56>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <xQueueGenericCreateStatic+0x58>
 80042e2:	2300      	movs	r3, #0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	623b      	str	r3, [r7, #32]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d102      	bne.n	800430a <xQueueGenericCreateStatic+0x7e>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <xQueueGenericCreateStatic+0x82>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <xQueueGenericCreateStatic+0x84>
 800430e:	2300      	movs	r3, #0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	61fb      	str	r3, [r7, #28]
}
 8004326:	bf00      	nop
 8004328:	e7fe      	b.n	8004328 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800432a:	2354      	movs	r3, #84	; 0x54
 800432c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	2b54      	cmp	r3, #84	; 0x54
 8004332:	d00a      	beq.n	800434a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	61bb      	str	r3, [r7, #24]
}
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00d      	beq.n	8004370 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800435c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	4613      	mov	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f843 	bl	80043f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004372:	4618      	mov	r0, r3
 8004374:	3730      	adds	r7, #48	; 0x30
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800437a:	b580      	push	{r7, lr}
 800437c:	b08a      	sub	sp, #40	; 0x28
 800437e:	af02      	add	r7, sp, #8
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	4613      	mov	r3, r2
 8004386:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	613b      	str	r3, [r7, #16]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e004      	b.n	80043ba <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	fb02 f303 	mul.w	r3, r2, r3
 80043b8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3354      	adds	r3, #84	; 0x54
 80043be:	4618      	mov	r0, r3
 80043c0:	f002 ff84 	bl	80072cc <pvPortMalloc>
 80043c4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00f      	beq.n	80043ec <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	3354      	adds	r3, #84	; 0x54
 80043d0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043da:	79fa      	ldrb	r2, [r7, #7]
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f805 	bl	80043f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80043ec:	69bb      	ldr	r3, [r7, #24]
	}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	e002      	b.n	8004418 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004424:	2101      	movs	r1, #1
 8004426:	69b8      	ldr	r0, [r7, #24]
 8004428:	f7ff fed5 	bl	80041d6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2200      	movs	r2, #0
 8004438:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800443a:	bf00      	nop
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004442:	b590      	push	{r4, r7, lr}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	60fb      	str	r3, [r7, #12]
}
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	685c      	ldr	r4, [r3, #4]
 800446e:	f001 fdb5 	bl	8005fdc <xTaskGetCurrentTaskHandle>
 8004472:	4603      	mov	r3, r0
 8004474:	429c      	cmp	r4, r3
 8004476:	d111      	bne.n	800449c <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800448a:	2300      	movs	r3, #0
 800448c:	2200      	movs	r2, #0
 800448e:	2100      	movs	r1, #0
 8004490:	6938      	ldr	r0, [r7, #16]
 8004492:	f000 f8ab 	bl	80045ec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004496:	2301      	movs	r3, #1
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	e001      	b.n	80044a0 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80044a0:	697b      	ldr	r3, [r7, #20]
	}
 80044a2:	4618      	mov	r0, r3
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd90      	pop	{r4, r7, pc}

080044aa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80044aa:	b590      	push	{r4, r7, lr}
 80044ac:	b087      	sub	sp, #28
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	60fb      	str	r3, [r7, #12]
}
 80044d0:	bf00      	nop
 80044d2:	e7fe      	b.n	80044d2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	685c      	ldr	r4, [r3, #4]
 80044d8:	f001 fd80 	bl	8005fdc <xTaskGetCurrentTaskHandle>
 80044dc:	4603      	mov	r3, r0
 80044de:	429c      	cmp	r4, r3
 80044e0:	d107      	bne.n	80044f2 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80044ec:	2301      	movs	r3, #1
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e00c      	b.n	800450c <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80044f2:	6839      	ldr	r1, [r7, #0]
 80044f4:	6938      	ldr	r0, [r7, #16]
 80044f6:	f000 fae7 	bl	8004ac8 <xQueueSemaphoreTake>
 80044fa:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800450c:	697b      	ldr	r3, [r7, #20]
	}
 800450e:	4618      	mov	r0, r3
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	bd90      	pop	{r4, r7, pc}

08004516 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004516:	b580      	push	{r7, lr}
 8004518:	b08a      	sub	sp, #40	; 0x28
 800451a:	af02      	add	r7, sp, #8
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	61bb      	str	r3, [r7, #24]
}
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	429a      	cmp	r2, r3
 8004544:	d90a      	bls.n	800455c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454a:	f383 8811 	msr	BASEPRI, r3
 800454e:	f3bf 8f6f 	isb	sy
 8004552:	f3bf 8f4f 	dsb	sy
 8004556:	617b      	str	r3, [r7, #20]
}
 8004558:	bf00      	nop
 800455a:	e7fe      	b.n	800455a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800455c:	2302      	movs	r3, #2
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	2100      	movs	r1, #0
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff fe90 	bl	800428c <xQueueGenericCreateStatic>
 800456c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800457a:	69fb      	ldr	r3, [r7, #28]
	}
 800457c:	4618      	mov	r0, r3
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	613b      	str	r3, [r7, #16]
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d90a      	bls.n	80045c8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	60fb      	str	r3, [r7, #12]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80045c8:	2202      	movs	r2, #2
 80045ca:	2100      	movs	r1, #0
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fed4 	bl	800437a <xQueueGenericCreate>
 80045d2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80045e0:	697b      	ldr	r3, [r7, #20]
	}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08e      	sub	sp, #56	; 0x38
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045fa:	2300      	movs	r3, #0
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <xQueueGenericSend+0x32>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d103      	bne.n	800462c <xQueueGenericSend+0x40>
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <xQueueGenericSend+0x44>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <xQueueGenericSend+0x46>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <xQueueGenericSend+0x60>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004648:	bf00      	nop
 800464a:	e7fe      	b.n	800464a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d103      	bne.n	800465a <xQueueGenericSend+0x6e>
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <xQueueGenericSend+0x72>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <xQueueGenericSend+0x74>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <xQueueGenericSend+0x8e>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	623b      	str	r3, [r7, #32]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800467a:	f001 fcbd 	bl	8005ff8 <xTaskGetSchedulerState>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <xQueueGenericSend+0x9e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <xQueueGenericSend+0xa2>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <xQueueGenericSend+0xa4>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <xQueueGenericSend+0xbe>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	61fb      	str	r3, [r7, #28]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046aa:	f002 fd0f 	bl	80070cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <xQueueGenericSend+0xd4>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d11b      	bne.n	80046f8 <xQueueGenericSend+0x10c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046c6:	f000 fbf2 	bl	8004eae <prvCopyDataToQueue>
 80046ca:	62f8      	str	r0, [r7, #44]	; 0x2c

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d004      	beq.n	80046de <xQueueGenericSend+0xf2>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 80046d4:	6839      	ldr	r1, [r7, #0]
 80046d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d8:	f000 fd8e 	bl	80051f8 <prvNotifyQueueSetContainer>
 80046dc:	e008      	b.n	80046f0 <xQueueGenericSend+0x104>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d004      	beq.n	80046f0 <xQueueGenericSend+0x104>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	3324      	adds	r3, #36	; 0x24
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 fab6 	bl	8005c5c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046f0:	f002 fd1c 	bl	800712c <vPortExitCritical>
				return pdPASS;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e062      	b.n	80047be <xQueueGenericSend+0x1d2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d103      	bne.n	8004706 <xQueueGenericSend+0x11a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046fe:	f002 fd15 	bl	800712c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004702:	2300      	movs	r3, #0
 8004704:	e05b      	b.n	80047be <xQueueGenericSend+0x1d2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	2b00      	cmp	r3, #0
 800470a:	d106      	bne.n	800471a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	4618      	mov	r0, r3
 8004712:	f001 fb07 	bl	8005d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004716:	2301      	movs	r3, #1
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800471a:	f002 fd07 	bl	800712c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800471e:	f001 f87b 	bl	8005818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004722:	f002 fcd3 	bl	80070cc <vPortEnterCritical>
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800472c:	b25b      	sxtb	r3, r3
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004732:	d103      	bne.n	800473c <xQueueGenericSend+0x150>
 8004734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004742:	b25b      	sxtb	r3, r3
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004748:	d103      	bne.n	8004752 <xQueueGenericSend+0x166>
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004752:	f002 fceb 	bl	800712c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004756:	1d3a      	adds	r2, r7, #4
 8004758:	f107 0314 	add.w	r3, r7, #20
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f001 faf6 	bl	8005d50 <xTaskCheckForTimeOut>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d123      	bne.n	80047b2 <xQueueGenericSend+0x1c6>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800476a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800476c:	f000 fca5 	bl	80050ba <prvIsQueueFull>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d017      	beq.n	80047a6 <xQueueGenericSend+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	3310      	adds	r3, #16
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4611      	mov	r1, r2
 800477e:	4618      	mov	r0, r3
 8004780:	f001 fa1c 	bl	8005bbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004786:	f000 fc22 	bl	8004fce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800478a:	f001 f853 	bl	8005834 <xTaskResumeAll>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d18a      	bne.n	80046aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <xQueueGenericSend+0x1dc>)
 8004796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	e781      	b.n	80046aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a8:	f000 fc11 	bl	8004fce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ac:	f001 f842 	bl	8005834 <xTaskResumeAll>
 80047b0:	e77b      	b.n	80046aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047b4:	f000 fc0b 	bl	8004fce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047b8:	f001 f83c 	bl	8005834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047bc:	2300      	movs	r3, #0
		}
	}
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3738      	adds	r7, #56	; 0x38
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08e      	sub	sp, #56	; 0x38
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10a      	bne.n	80047fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047f6:	bf00      	nop
 80047f8:	e7fe      	b.n	80047f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d103      	bne.n	8004808 <xQueueGenericSendFromISR+0x3c>
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <xQueueGenericSendFromISR+0x40>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <xQueueGenericSendFromISR+0x42>
 800480c:	2300      	movs	r3, #0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	623b      	str	r3, [r7, #32]
}
 8004824:	bf00      	nop
 8004826:	e7fe      	b.n	8004826 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d103      	bne.n	8004836 <xQueueGenericSendFromISR+0x6a>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <xQueueGenericSendFromISR+0x6e>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <xQueueGenericSendFromISR+0x70>
 800483a:	2300      	movs	r3, #0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	61fb      	str	r3, [r7, #28]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004856:	f002 fcfb 	bl	8007250 <vPortValidateInterruptPriority>
	__asm volatile
 800485a:	f3ef 8211 	mrs	r2, BASEPRI
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	61ba      	str	r2, [r7, #24]
 8004870:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004872:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487e:	429a      	cmp	r2, r3
 8004880:	d302      	bcc.n	8004888 <xQueueGenericSendFromISR+0xbc>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d13e      	bne.n	8004906 <xQueueGenericSendFromISR+0x13a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004898:	f000 fb09 	bl	8004eae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800489c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048a4:	d124      	bne.n	80048f0 <xQueueGenericSendFromISR+0x124>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <xQueueGenericSendFromISR+0xfe>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 80048ae:	6839      	ldr	r1, [r7, #0]
 80048b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048b2:	f000 fca1 	bl	80051f8 <prvNotifyQueueSetContainer>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d021      	beq.n	8004900 <xQueueGenericSendFromISR+0x134>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01e      	beq.n	8004900 <xQueueGenericSendFromISR+0x134>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e01a      	b.n	8004900 <xQueueGenericSendFromISR+0x134>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d016      	beq.n	8004900 <xQueueGenericSendFromISR+0x134>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	3324      	adds	r3, #36	; 0x24
 80048d6:	4618      	mov	r0, r3
 80048d8:	f001 f9c0 	bl	8005c5c <xTaskRemoveFromEventList>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00e      	beq.n	8004900 <xQueueGenericSendFromISR+0x134>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <xQueueGenericSendFromISR+0x134>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e007      	b.n	8004900 <xQueueGenericSendFromISR+0x134>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048f4:	3301      	adds	r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	b25a      	sxtb	r2, r3
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004900:	2301      	movs	r3, #1
 8004902:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004904:	e001      	b.n	800490a <xQueueGenericSendFromISR+0x13e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004906:	2300      	movs	r3, #0
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
 800490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f383 8811 	msr	BASEPRI, r3
}
 8004914:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004918:	4618      	mov	r0, r3
 800491a:	3738      	adds	r7, #56	; 0x38
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08c      	sub	sp, #48	; 0x30
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800492c:	2300      	movs	r3, #0
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <xQueueReceive+0x30>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	623b      	str	r3, [r7, #32]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <xQueueReceive+0x3e>
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <xQueueReceive+0x42>
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <xQueueReceive+0x44>
 8004962:	2300      	movs	r3, #0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <xQueueReceive+0x5e>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	61fb      	str	r3, [r7, #28]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800497e:	f001 fb3b 	bl	8005ff8 <xTaskGetSchedulerState>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d102      	bne.n	800498e <xQueueReceive+0x6e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <xQueueReceive+0x72>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <xQueueReceive+0x74>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <xQueueReceive+0x8e>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	61bb      	str	r3, [r7, #24]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049ae:	f002 fb8d 	bl	80070cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d014      	beq.n	80049e8 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c2:	f000 fade 	bl	8004f82 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	1e5a      	subs	r2, r3, #1
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	3310      	adds	r3, #16
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 f93e 	bl	8005c5c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049e0:	f002 fba4 	bl	800712c <vPortExitCritical>
				return pdPASS;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e069      	b.n	8004abc <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049ee:	f002 fb9d 	bl	800712c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e062      	b.n	8004abc <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d106      	bne.n	8004a0a <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049fc:	f107 0310 	add.w	r3, r7, #16
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 f98f 	bl	8005d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a06:	2301      	movs	r3, #1
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a0a:	f002 fb8f 	bl	800712c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a0e:	f000 ff03 	bl	8005818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a12:	f002 fb5b 	bl	80070cc <vPortEnterCritical>
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a1c:	b25b      	sxtb	r3, r3
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a22:	d103      	bne.n	8004a2c <xQueueReceive+0x10c>
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a32:	b25b      	sxtb	r3, r3
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a38:	d103      	bne.n	8004a42 <xQueueReceive+0x122>
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a42:	f002 fb73 	bl	800712c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a46:	1d3a      	adds	r2, r7, #4
 8004a48:	f107 0310 	add.w	r3, r7, #16
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 f97e 	bl	8005d50 <xTaskCheckForTimeOut>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d123      	bne.n	8004aa2 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a5c:	f000 fb17 	bl	800508e <prvIsQueueEmpty>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d017      	beq.n	8004a96 <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	3324      	adds	r3, #36	; 0x24
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f8a4 	bl	8005bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a76:	f000 faaa 	bl	8004fce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a7a:	f000 fedb 	bl	8005834 <xTaskResumeAll>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d194      	bne.n	80049ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <xQueueReceive+0x1a4>)
 8004a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	e78b      	b.n	80049ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a98:	f000 fa99 	bl	8004fce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a9c:	f000 feca 	bl	8005834 <xTaskResumeAll>
 8004aa0:	e785      	b.n	80049ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa4:	f000 fa93 	bl	8004fce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aa8:	f000 fec4 	bl	8005834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aae:	f000 faee 	bl	800508e <prvIsQueueEmpty>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f43f af7a 	beq.w	80049ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004aba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3730      	adds	r7, #48	; 0x30
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08e      	sub	sp, #56	; 0x38
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	623b      	str	r3, [r7, #32]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00a      	beq.n	8004b18 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	61fb      	str	r3, [r7, #28]
}
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b18:	f001 fa6e 	bl	8005ff8 <xTaskGetSchedulerState>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <xQueueSemaphoreTake+0x60>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <xQueueSemaphoreTake+0x64>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <xQueueSemaphoreTake+0x66>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	61bb      	str	r3, [r7, #24]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b48:	f002 fac0 	bl	80070cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d019      	beq.n	8004b8c <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	1e5a      	subs	r2, r3, #1
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004b68:	f001 fbc6 	bl	80062f8 <pvTaskIncrementMutexHeldCount>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d004      	beq.n	8004b84 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7c:	3310      	adds	r3, #16
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 f86c 	bl	8005c5c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b84:	f002 fad2 	bl	800712c <vPortExitCritical>
				return pdPASS;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e097      	b.n	8004cbc <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d111      	bne.n	8004bb6 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	617b      	str	r3, [r7, #20]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004bae:	f002 fabd 	bl	800712c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e082      	b.n	8004cbc <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bbc:	f107 030c 	add.w	r3, r7, #12
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 f8af 	bl	8005d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bca:	f002 faaf 	bl	800712c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bce:	f000 fe23 	bl	8005818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bd2:	f002 fa7b 	bl	80070cc <vPortEnterCritical>
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bdc:	b25b      	sxtb	r3, r3
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be2:	d103      	bne.n	8004bec <xQueueSemaphoreTake+0x124>
 8004be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf8:	d103      	bne.n	8004c02 <xQueueSemaphoreTake+0x13a>
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c02:	f002 fa93 	bl	800712c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c06:	463a      	mov	r2, r7
 8004c08:	f107 030c 	add.w	r3, r7, #12
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 f89e 	bl	8005d50 <xTaskCheckForTimeOut>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d132      	bne.n	8004c80 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c1c:	f000 fa37 	bl	800508e <prvIsQueueEmpty>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d026      	beq.n	8004c74 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 8004c2e:	f002 fa4d 	bl	80070cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f001 f9fc 	bl	8006034 <xTaskPriorityInherit>
 8004c3c:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004c3e:	f002 fa75 	bl	800712c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	3324      	adds	r3, #36	; 0x24
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 ffb6 	bl	8005bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c52:	f000 f9bc 	bl	8004fce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c56:	f000 fded 	bl	8005834 <xTaskResumeAll>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f47f af73 	bne.w	8004b48 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004c62:	4b18      	ldr	r3, [pc, #96]	; (8004cc4 <xQueueSemaphoreTake+0x1fc>)
 8004c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	e769      	b.n	8004b48 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c76:	f000 f9aa 	bl	8004fce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c7a:	f000 fddb 	bl	8005834 <xTaskResumeAll>
 8004c7e:	e763      	b.n	8004b48 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c82:	f000 f9a4 	bl	8004fce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c86:	f000 fdd5 	bl	8005834 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c8c:	f000 f9ff 	bl	800508e <prvIsQueueEmpty>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f43f af58 	beq.w	8004b48 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00d      	beq.n	8004cba <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 8004c9e:	f002 fa15 	bl	80070cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ca2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ca4:	f000 f8ec 	bl	8004e80 <prvGetDisinheritPriorityAfterTimeout>
 8004ca8:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f001 fa9b 	bl	80061ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004cb6:	f002 fa39 	bl	800712c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3738      	adds	r7, #56	; 0x38
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08e      	sub	sp, #56	; 0x38
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10a      	bne.n	8004cf4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	623b      	str	r3, [r7, #32]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <xQueueReceiveFromISR+0x3a>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <xQueueReceiveFromISR+0x3e>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <xQueueReceiveFromISR+0x40>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	61fb      	str	r3, [r7, #28]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d22:	f002 fa95 	bl	8007250 <vPortValidateInterruptPriority>
	__asm volatile
 8004d26:	f3ef 8211 	mrs	r2, BASEPRI
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	61ba      	str	r2, [r7, #24]
 8004d3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004d3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d02f      	beq.n	8004dae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d5c:	f000 f911 	bl	8004f82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	1e5a      	subs	r2, r3, #1
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004d68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d70:	d112      	bne.n	8004d98 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	3310      	adds	r3, #16
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 ff6c 	bl	8005c5c <xTaskRemoveFromEventList>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00e      	beq.n	8004da8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00b      	beq.n	8004da8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
 8004d96:	e007      	b.n	8004da8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	b25a      	sxtb	r2, r3
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004da8:	2301      	movs	r3, #1
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dac:	e001      	b.n	8004db2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f383 8811 	msr	BASEPRI, r3
}
 8004dbc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3738      	adds	r7, #56	; 0x38
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10a      	bne.n	8004dec <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8004dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	60bb      	str	r3, [r7, #8]
}
 8004de8:	bf00      	nop
 8004dea:	e7fe      	b.n	8004dea <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004dec:	f002 f96e 	bl	80070cc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004df6:	f002 f999 	bl	800712c <vPortExitCritical>

	return uxReturn;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	60bb      	str	r3, [r7, #8]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr

08004e3a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <vQueueDelete+0x28>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60bb      	str	r3, [r7, #8]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f96a 	bl	800513c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d102      	bne.n	8004e78 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f002 faee 	bl	8007454 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d006      	beq.n	8004e9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e001      	b.n	8004ea2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
	}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b086      	sub	sp, #24
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10d      	bne.n	8004ee8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d14d      	bne.n	8004f70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 f919 	bl	8006110 <xTaskPriorityDisinherit>
 8004ede:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	605a      	str	r2, [r3, #4]
 8004ee6:	e043      	b.n	8004f70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d119      	bne.n	8004f22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6898      	ldr	r0, [r3, #8]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	f002 fce7 	bl	80078cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	441a      	add	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d32b      	bcc.n	8004f70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	609a      	str	r2, [r3, #8]
 8004f20:	e026      	b.n	8004f70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	68d8      	ldr	r0, [r3, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68b9      	ldr	r1, [r7, #8]
 8004f2e:	f002 fccd 	bl	80078cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	425b      	negs	r3, r3
 8004f3c:	441a      	add	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d207      	bcs.n	8004f5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	425b      	negs	r3, r3
 8004f58:	441a      	add	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d105      	bne.n	8004f70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004f78:	697b      	ldr	r3, [r7, #20]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b082      	sub	sp, #8
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d018      	beq.n	8004fc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	441a      	add	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d303      	bcc.n	8004fb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68d9      	ldr	r1, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	6838      	ldr	r0, [r7, #0]
 8004fc2:	f002 fc83 	bl	80078cc <memcpy>
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004fd6:	f002 f879 	bl	80070cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fe2:	e01f      	b.n	8005024 <prvUnlockQueue+0x56>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d009      	beq.n	8005000 <prvUnlockQueue+0x32>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
 8004fec:	2100      	movs	r1, #0
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f902 	bl	80051f8 <prvNotifyQueueSetContainer>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d010      	beq.n	800501c <prvUnlockQueue+0x4e>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
 8004ffa:	f000 ff0b 	bl	8005e14 <vTaskMissedYield>
 8004ffe:	e00d      	b.n	800501c <prvUnlockQueue+0x4e>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d012      	beq.n	800502e <prvUnlockQueue+0x60>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3324      	adds	r3, #36	; 0x24
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fe25 	bl	8005c5c <xTaskRemoveFromEventList>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <prvUnlockQueue+0x4e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
 8005018:	f000 fefc 	bl	8005e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	3b01      	subs	r3, #1
 8005020:	b2db      	uxtb	r3, r3
 8005022:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005028:	2b00      	cmp	r3, #0
 800502a:	dcdb      	bgt.n	8004fe4 <prvUnlockQueue+0x16>
 800502c:	e000      	b.n	8005030 <prvUnlockQueue+0x62>
						break;
 800502e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	22ff      	movs	r2, #255	; 0xff
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005038:	f002 f878 	bl	800712c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800503c:	f002 f846 	bl	80070cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005046:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005048:	e011      	b.n	800506e <prvUnlockQueue+0xa0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d012      	beq.n	8005078 <prvUnlockQueue+0xaa>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3310      	adds	r3, #16
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fe00 	bl	8005c5c <xTaskRemoveFromEventList>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <prvUnlockQueue+0x98>
				{
					vTaskMissedYield();
 8005062:	f000 fed7 	bl	8005e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005066:	7bbb      	ldrb	r3, [r7, #14]
 8005068:	3b01      	subs	r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800506e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005072:	2b00      	cmp	r3, #0
 8005074:	dce9      	bgt.n	800504a <prvUnlockQueue+0x7c>
 8005076:	e000      	b.n	800507a <prvUnlockQueue+0xac>
			}
			else
			{
				break;
 8005078:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	22ff      	movs	r2, #255	; 0xff
 800507e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005082:	f002 f853 	bl	800712c <vPortExitCritical>
}
 8005086:	bf00      	nop
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005096:	f002 f819 	bl	80070cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050a2:	2301      	movs	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e001      	b.n	80050ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ac:	f002 f83e 	bl	800712c <vPortExitCritical>

	return xReturn;
 80050b0:	68fb      	ldr	r3, [r7, #12]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050c2:	f002 f803 	bl	80070cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d102      	bne.n	80050d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050d2:	2301      	movs	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e001      	b.n	80050dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050dc:	f002 f826 	bl	800712c <vPortExitCritical>

	return xReturn;
 80050e0:	68fb      	ldr	r3, [r7, #12]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	e014      	b.n	8005126 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050fc:	4a0e      	ldr	r2, [pc, #56]	; (8005138 <vQueueAddToRegistry+0x4c>)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10b      	bne.n	8005120 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005108:	490b      	ldr	r1, [pc, #44]	; (8005138 <vQueueAddToRegistry+0x4c>)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005112:	4a09      	ldr	r2, [pc, #36]	; (8005138 <vQueueAddToRegistry+0x4c>)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800511e:	e006      	b.n	800512e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b07      	cmp	r3, #7
 800512a:	d9e7      	bls.n	80050fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr
 8005138:	200028c8 	.word	0x200028c8

0800513c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e016      	b.n	8005178 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800514a:	4a10      	ldr	r2, [pc, #64]	; (800518c <vQueueUnregisterQueue+0x50>)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	4413      	add	r3, r2
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	429a      	cmp	r2, r3
 8005158:	d10b      	bne.n	8005172 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800515a:	4a0c      	ldr	r2, [pc, #48]	; (800518c <vQueueUnregisterQueue+0x50>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2100      	movs	r1, #0
 8005160:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005164:	4a09      	ldr	r2, [pc, #36]	; (800518c <vQueueUnregisterQueue+0x50>)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	4413      	add	r3, r2
 800516c:	2200      	movs	r2, #0
 800516e:	605a      	str	r2, [r3, #4]
				break;
 8005170:	e006      	b.n	8005180 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3301      	adds	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2b07      	cmp	r3, #7
 800517c:	d9e5      	bls.n	800514a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800517e:	bf00      	nop
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	200028c8 	.word	0x200028c8

08005190 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051a0:	f001 ff94 	bl	80070cc <vPortEnterCritical>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051aa:	b25b      	sxtb	r3, r3
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051b0:	d103      	bne.n	80051ba <vQueueWaitForMessageRestricted+0x2a>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c0:	b25b      	sxtb	r3, r3
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c6:	d103      	bne.n	80051d0 <vQueueWaitForMessageRestricted+0x40>
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d0:	f001 ffac 	bl	800712c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	3324      	adds	r3, #36	; 0x24
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fd0d 	bl	8005c04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051ea:	6978      	ldr	r0, [r7, #20]
 80051ec:	f7ff feef 	bl	8004fce <prvUnlockQueue>
	}
 80051f0:	bf00      	nop
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005206:	61bb      	str	r3, [r7, #24]
	BaseType_t xReturn = pdFALSE;
 8005208:	2300      	movs	r3, #0
 800520a:	61fb      	str	r3, [r7, #28]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <prvNotifyQueueSetContainer+0x30>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	613b      	str	r3, [r7, #16]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <prvNotifyQueueSetContainer+0x2e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005230:	429a      	cmp	r2, r3
 8005232:	d30a      	bcc.n	800524a <prvNotifyQueueSetContainer+0x52>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	60fb      	str	r3, [r7, #12]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <prvNotifyQueueSetContainer+0x50>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	429a      	cmp	r2, r3
 8005254:	d225      	bcs.n	80052a2 <prvNotifyQueueSetContainer+0xaa>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800525c:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
 800525e:	1d3b      	adds	r3, r7, #4
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	4619      	mov	r1, r3
 8005264:	69b8      	ldr	r0, [r7, #24]
 8005266:	f7ff fe22 	bl	8004eae <prvCopyDataToQueue>
 800526a:	61f8      	str	r0, [r7, #28]

			if( cTxLock == queueUNLOCKED )
 800526c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005274:	d10e      	bne.n	8005294 <prvNotifyQueueSetContainer+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d011      	beq.n	80052a2 <prvNotifyQueueSetContainer+0xaa>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	3324      	adds	r3, #36	; 0x24
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fcea 	bl	8005c5c <xTaskRemoveFromEventList>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <prvNotifyQueueSetContainer+0xaa>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
 800528e:	2301      	movs	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
 8005292:	e006      	b.n	80052a2 <prvNotifyQueueSetContainer+0xaa>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005294:	7dfb      	ldrb	r3, [r7, #23]
 8005296:	3301      	adds	r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	b25a      	sxtb	r2, r3
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052a2:	69fb      	ldr	r3, [r7, #28]
	}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08e      	sub	sp, #56	; 0x38
 80052b0:	af04      	add	r7, sp, #16
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	623b      	str	r3, [r7, #32]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	61fb      	str	r3, [r7, #28]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052f2:	23bc      	movs	r3, #188	; 0xbc
 80052f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2bbc      	cmp	r3, #188	; 0xbc
 80052fa:	d00a      	beq.n	8005312 <xTaskCreateStatic+0x66>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	f383 8811 	msr	BASEPRI, r3
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	61bb      	str	r3, [r7, #24]
}
 800530e:	bf00      	nop
 8005310:	e7fe      	b.n	8005310 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01e      	beq.n	8005356 <xTaskCreateStatic+0xaa>
 8005318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01b      	beq.n	8005356 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005326:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	2202      	movs	r2, #2
 800532c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005330:	2300      	movs	r3, #0
 8005332:	9303      	str	r3, [sp, #12]
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	9302      	str	r3, [sp, #8]
 8005338:	f107 0314 	add.w	r3, r7, #20
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f851 	bl	80053f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800534e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005350:	f000 f8ec 	bl	800552c <prvAddNewTaskToReadyList>
 8005354:	e001      	b.n	800535a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800535a:	697b      	ldr	r3, [r7, #20]
	}
 800535c:	4618      	mov	r0, r3
 800535e:	3728      	adds	r7, #40	; 0x28
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08c      	sub	sp, #48	; 0x30
 8005368:	af04      	add	r7, sp, #16
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005374:	88fb      	ldrh	r3, [r7, #6]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4618      	mov	r0, r3
 800537a:	f001 ffa7 	bl	80072cc <pvPortMalloc>
 800537e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00e      	beq.n	80053a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005386:	20bc      	movs	r0, #188	; 0xbc
 8005388:	f001 ffa0 	bl	80072cc <pvPortMalloc>
 800538c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
 800539a:	e005      	b.n	80053a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800539c:	6978      	ldr	r0, [r7, #20]
 800539e:	f002 f859 	bl	8007454 <vPortFree>
 80053a2:	e001      	b.n	80053a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d017      	beq.n	80053de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053b6:	88fa      	ldrh	r2, [r7, #6]
 80053b8:	2300      	movs	r3, #0
 80053ba:	9303      	str	r3, [sp, #12]
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	9302      	str	r3, [sp, #8]
 80053c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f80f 	bl	80053f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053d2:	69f8      	ldr	r0, [r7, #28]
 80053d4:	f000 f8aa 	bl	800552c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053d8:	2301      	movs	r3, #1
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	e002      	b.n	80053e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053e4:	69bb      	ldr	r3, [r7, #24]
	}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3720      	adds	r7, #32
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	461a      	mov	r2, r3
 8005408:	21a5      	movs	r1, #165	; 0xa5
 800540a:	f002 fa6d 	bl	80078e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005418:	3b01      	subs	r3, #1
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f023 0307 	bic.w	r3, r3, #7
 8005426:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	617b      	str	r3, [r7, #20]
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	e012      	b.n	8005474 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	7819      	ldrb	r1, [r3, #0]
 8005456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	3334      	adds	r3, #52	; 0x34
 800545e:	460a      	mov	r2, r1
 8005460:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	4413      	add	r3, r2
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d006      	beq.n	800547c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	3301      	adds	r3, #1
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b0f      	cmp	r3, #15
 8005478:	d9e9      	bls.n	800544e <prvInitialiseNewTask+0x5e>
 800547a:	e000      	b.n	800547e <prvInitialiseNewTask+0x8e>
		{
			break;
 800547c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	2b37      	cmp	r3, #55	; 0x37
 800548a:	d901      	bls.n	8005490 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800548c:	2337      	movs	r3, #55	; 0x37
 800548e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005494:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800549a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	2200      	movs	r2, #0
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	3304      	adds	r3, #4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe fe05 	bl	80040b6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	3318      	adds	r3, #24
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fe fe00 	bl	80040b6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	2200      	movs	r2, #0
 80054d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	3354      	adds	r3, #84	; 0x54
 80054e0:	2260      	movs	r2, #96	; 0x60
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f002 f9ff 	bl	80078e8 <memset>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	4a0c      	ldr	r2, [pc, #48]	; (8005520 <prvInitialiseNewTask+0x130>)
 80054ee:	659a      	str	r2, [r3, #88]	; 0x58
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	4a0c      	ldr	r2, [pc, #48]	; (8005524 <prvInitialiseNewTask+0x134>)
 80054f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <prvInitialiseNewTask+0x138>)
 80054fa:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	68f9      	ldr	r1, [r7, #12]
 8005500:	69b8      	ldr	r0, [r7, #24]
 8005502:	f001 fcf1 	bl	8006ee8 <pxPortInitialiseStack>
 8005506:	4602      	mov	r2, r0
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005516:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005518:	bf00      	nop
 800551a:	3720      	adds	r7, #32
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	08008aec 	.word	0x08008aec
 8005524:	08008b0c 	.word	0x08008b0c
 8005528:	08008acc 	.word	0x08008acc

0800552c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005534:	f001 fdca 	bl	80070cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005538:	4b26      	ldr	r3, [pc, #152]	; (80055d4 <prvAddNewTaskToReadyList+0xa8>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	4a25      	ldr	r2, [pc, #148]	; (80055d4 <prvAddNewTaskToReadyList+0xa8>)
 8005540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005542:	4b25      	ldr	r3, [pc, #148]	; (80055d8 <prvAddNewTaskToReadyList+0xac>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800554a:	4a23      	ldr	r2, [pc, #140]	; (80055d8 <prvAddNewTaskToReadyList+0xac>)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005550:	4b20      	ldr	r3, [pc, #128]	; (80055d4 <prvAddNewTaskToReadyList+0xa8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d110      	bne.n	800557a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005558:	f000 fc7a 	bl	8005e50 <prvInitialiseTaskLists>
 800555c:	e00d      	b.n	800557a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800555e:	4b1f      	ldr	r3, [pc, #124]	; (80055dc <prvAddNewTaskToReadyList+0xb0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005566:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <prvAddNewTaskToReadyList+0xac>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	429a      	cmp	r2, r3
 8005572:	d802      	bhi.n	800557a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005574:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <prvAddNewTaskToReadyList+0xac>)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800557a:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <prvAddNewTaskToReadyList+0xb4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3301      	adds	r3, #1
 8005580:	4a17      	ldr	r2, [pc, #92]	; (80055e0 <prvAddNewTaskToReadyList+0xb4>)
 8005582:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005584:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <prvAddNewTaskToReadyList+0xb4>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005590:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <prvAddNewTaskToReadyList+0xb8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d903      	bls.n	80055a0 <prvAddNewTaskToReadyList+0x74>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	4a11      	ldr	r2, [pc, #68]	; (80055e4 <prvAddNewTaskToReadyList+0xb8>)
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4a0e      	ldr	r2, [pc, #56]	; (80055e8 <prvAddNewTaskToReadyList+0xbc>)
 80055ae:	441a      	add	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f7fe fd89 	bl	80040ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055bc:	f001 fdb6 	bl	800712c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055c0:	4b06      	ldr	r3, [pc, #24]	; (80055dc <prvAddNewTaskToReadyList+0xb0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <prvAddNewTaskToReadyList+0xac>)
 80055ca:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055cc:	bf00      	nop
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000b08 	.word	0x20000b08
 80055d8:	20000634 	.word	0x20000634
 80055dc:	20000b14 	.word	0x20000b14
 80055e0:	20000b24 	.word	0x20000b24
 80055e4:	20000b10 	.word	0x20000b10
 80055e8:	20000638 	.word	0x20000638

080055ec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80055f4:	f001 fd6a 	bl	80070cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <vTaskDelete+0x18>
 80055fe:	4b2c      	ldr	r3, [pc, #176]	; (80056b0 <vTaskDelete+0xc4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	e000      	b.n	8005606 <vTaskDelete+0x1a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3304      	adds	r3, #4
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe fdb9 	bl	8004184 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	3318      	adds	r3, #24
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe fdb0 	bl	8004184 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005624:	4b23      	ldr	r3, [pc, #140]	; (80056b4 <vTaskDelete+0xc8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	4a22      	ldr	r2, [pc, #136]	; (80056b4 <vTaskDelete+0xc8>)
 800562c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800562e:	4b20      	ldr	r3, [pc, #128]	; (80056b0 <vTaskDelete+0xc4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	429a      	cmp	r2, r3
 8005636:	d10b      	bne.n	8005650 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3304      	adds	r3, #4
 800563c:	4619      	mov	r1, r3
 800563e:	481e      	ldr	r0, [pc, #120]	; (80056b8 <vTaskDelete+0xcc>)
 8005640:	f7fe fd45 	bl	80040ce <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005644:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <vTaskDelete+0xd0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3301      	adds	r3, #1
 800564a:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <vTaskDelete+0xd0>)
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	e009      	b.n	8005664 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005650:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <vTaskDelete+0xd4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3b01      	subs	r3, #1
 8005656:	4a1a      	ldr	r2, [pc, #104]	; (80056c0 <vTaskDelete+0xd4>)
 8005658:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fc66 	bl	8005f2c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005660:	f000 fc98 	bl	8005f94 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005664:	f001 fd62 	bl	800712c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005668:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <vTaskDelete+0xd8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01b      	beq.n	80056a8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8005670:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <vTaskDelete+0xc4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	429a      	cmp	r2, r3
 8005678:	d116      	bne.n	80056a8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <vTaskDelete+0xdc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <vTaskDelete+0xac>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60bb      	str	r3, [r7, #8]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <vTaskDelete+0xe0>)
 800569a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000634 	.word	0x20000634
 80056b4:	20000b24 	.word	0x20000b24
 80056b8:	20000adc 	.word	0x20000adc
 80056bc:	20000af0 	.word	0x20000af0
 80056c0:	20000b08 	.word	0x20000b08
 80056c4:	20000b14 	.word	0x20000b14
 80056c8:	20000b30 	.word	0x20000b30
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d017      	beq.n	8005712 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056e2:	4b13      	ldr	r3, [pc, #76]	; (8005730 <vTaskDelay+0x60>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <vTaskDelay+0x30>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60bb      	str	r3, [r7, #8]
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005700:	f000 f88a 	bl	8005818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005704:	2100      	movs	r1, #0
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 ffd8 	bl	80066bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800570c:	f000 f892 	bl	8005834 <xTaskResumeAll>
 8005710:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d107      	bne.n	8005728 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005718:	4b06      	ldr	r3, [pc, #24]	; (8005734 <vTaskDelay+0x64>)
 800571a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20000b30 	.word	0x20000b30
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005746:	463a      	mov	r2, r7
 8005748:	1d39      	adds	r1, r7, #4
 800574a:	f107 0308 	add.w	r3, r7, #8
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe fc62 	bl	8004018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	9202      	str	r2, [sp, #8]
 800575c:	9301      	str	r3, [sp, #4]
 800575e:	2300      	movs	r3, #0
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	2300      	movs	r3, #0
 8005764:	460a      	mov	r2, r1
 8005766:	4924      	ldr	r1, [pc, #144]	; (80057f8 <vTaskStartScheduler+0xc0>)
 8005768:	4824      	ldr	r0, [pc, #144]	; (80057fc <vTaskStartScheduler+0xc4>)
 800576a:	f7ff fd9f 	bl	80052ac <xTaskCreateStatic>
 800576e:	4603      	mov	r3, r0
 8005770:	4a23      	ldr	r2, [pc, #140]	; (8005800 <vTaskStartScheduler+0xc8>)
 8005772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005774:	4b22      	ldr	r3, [pc, #136]	; (8005800 <vTaskStartScheduler+0xc8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800577c:	2301      	movs	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e001      	b.n	8005786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d102      	bne.n	8005792 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800578c:	f000 ffea 	bl	8006764 <xTimerCreateTimerTask>
 8005790:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d11b      	bne.n	80057d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	613b      	str	r3, [r7, #16]
}
 80057aa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057ac:	4b15      	ldr	r3, [pc, #84]	; (8005804 <vTaskStartScheduler+0xcc>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3354      	adds	r3, #84	; 0x54
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <vTaskStartScheduler+0xd0>)
 80057b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057b6:	4b15      	ldr	r3, [pc, #84]	; (800580c <vTaskStartScheduler+0xd4>)
 80057b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <vTaskStartScheduler+0xd8>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80057c4:	4b13      	ldr	r3, [pc, #76]	; (8005814 <vTaskStartScheduler+0xdc>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ca:	f001 fc0d 	bl	8006fe8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057ce:	e00e      	b.n	80057ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d6:	d10a      	bne.n	80057ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	60fb      	str	r3, [r7, #12]
}
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <vTaskStartScheduler+0xb4>
}
 80057ee:	bf00      	nop
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	08008928 	.word	0x08008928
 80057fc:	08005e2d 	.word	0x08005e2d
 8005800:	20000b2c 	.word	0x20000b2c
 8005804:	20000634 	.word	0x20000634
 8005808:	20000010 	.word	0x20000010
 800580c:	20000b28 	.word	0x20000b28
 8005810:	20000b14 	.word	0x20000b14
 8005814:	20000b0c 	.word	0x20000b0c

08005818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005818:	b480      	push	{r7}
 800581a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800581c:	4b04      	ldr	r3, [pc, #16]	; (8005830 <vTaskSuspendAll+0x18>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	4a03      	ldr	r2, [pc, #12]	; (8005830 <vTaskSuspendAll+0x18>)
 8005824:	6013      	str	r3, [r2, #0]
}
 8005826:	bf00      	nop
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000b30 	.word	0x20000b30

08005834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800583e:	2300      	movs	r3, #0
 8005840:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005842:	4b3c      	ldr	r3, [pc, #240]	; (8005934 <xTaskResumeAll+0x100>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <xTaskResumeAll+0x2c>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	603b      	str	r3, [r7, #0]
}
 800585c:	bf00      	nop
 800585e:	e7fe      	b.n	800585e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005860:	f001 fc34 	bl	80070cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005864:	4b33      	ldr	r3, [pc, #204]	; (8005934 <xTaskResumeAll+0x100>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	4a32      	ldr	r2, [pc, #200]	; (8005934 <xTaskResumeAll+0x100>)
 800586c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800586e:	4b31      	ldr	r3, [pc, #196]	; (8005934 <xTaskResumeAll+0x100>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d156      	bne.n	8005924 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005876:	4b30      	ldr	r3, [pc, #192]	; (8005938 <xTaskResumeAll+0x104>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d052      	beq.n	8005924 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800587e:	e02f      	b.n	80058e0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005880:	4b2e      	ldr	r3, [pc, #184]	; (800593c <xTaskResumeAll+0x108>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	3318      	adds	r3, #24
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe fc79 	bl	8004184 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3304      	adds	r3, #4
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fc74 	bl	8004184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a0:	4b27      	ldr	r3, [pc, #156]	; (8005940 <xTaskResumeAll+0x10c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d903      	bls.n	80058b0 <xTaskResumeAll+0x7c>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	4a24      	ldr	r2, [pc, #144]	; (8005940 <xTaskResumeAll+0x10c>)
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4a21      	ldr	r2, [pc, #132]	; (8005944 <xTaskResumeAll+0x110>)
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f7fe fc01 	bl	80040ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d0:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <xTaskResumeAll+0x114>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d302      	bcc.n	80058e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058da:	4b1c      	ldr	r3, [pc, #112]	; (800594c <xTaskResumeAll+0x118>)
 80058dc:	2201      	movs	r2, #1
 80058de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <xTaskResumeAll+0x108>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1cb      	bne.n	8005880 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ee:	f000 fb51 	bl	8005f94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058f2:	4b17      	ldr	r3, [pc, #92]	; (8005950 <xTaskResumeAll+0x11c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60bb      	str	r3, [r7, #8]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058fe:	f000 f837 	bl	8005970 <xTaskIncrementTick>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005908:	4b10      	ldr	r3, [pc, #64]	; (800594c <xTaskResumeAll+0x118>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	3b01      	subs	r3, #1
 8005912:	60bb      	str	r3, [r7, #8]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f1      	bne.n	80058fe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800591a:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <xTaskResumeAll+0x11c>)
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <xTaskResumeAll+0x118>)
 8005922:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005924:	f001 fc02 	bl	800712c <vPortExitCritical>

	return xAlreadyYielded;
 8005928:	687b      	ldr	r3, [r7, #4]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000b30 	.word	0x20000b30
 8005938:	20000b08 	.word	0x20000b08
 800593c:	20000ac8 	.word	0x20000ac8
 8005940:	20000b10 	.word	0x20000b10
 8005944:	20000638 	.word	0x20000638
 8005948:	20000634 	.word	0x20000634
 800594c:	20000b1c 	.word	0x20000b1c
 8005950:	20000b18 	.word	0x20000b18

08005954 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800595a:	4b04      	ldr	r3, [pc, #16]	; (800596c <xTaskGetTickCount+0x18>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005960:	687b      	ldr	r3, [r7, #4]
}
 8005962:	4618      	mov	r0, r3
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr
 800596c:	20000b0c 	.word	0x20000b0c

08005970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800597a:	4b42      	ldr	r3, [pc, #264]	; (8005a84 <xTaskIncrementTick+0x114>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d175      	bne.n	8005a6e <xTaskIncrementTick+0xfe>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005982:	4b41      	ldr	r3, [pc, #260]	; (8005a88 <xTaskIncrementTick+0x118>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800598a:	4a3f      	ldr	r2, [pc, #252]	; (8005a88 <xTaskIncrementTick+0x118>)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d120      	bne.n	80059d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005996:	4b3d      	ldr	r3, [pc, #244]	; (8005a8c <xTaskIncrementTick+0x11c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <xTaskIncrementTick+0x46>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	603b      	str	r3, [r7, #0]
}
 80059b2:	bf00      	nop
 80059b4:	e7fe      	b.n	80059b4 <xTaskIncrementTick+0x44>
 80059b6:	4b35      	ldr	r3, [pc, #212]	; (8005a8c <xTaskIncrementTick+0x11c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	4b34      	ldr	r3, [pc, #208]	; (8005a90 <xTaskIncrementTick+0x120>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a32      	ldr	r2, [pc, #200]	; (8005a8c <xTaskIncrementTick+0x11c>)
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	4a32      	ldr	r2, [pc, #200]	; (8005a90 <xTaskIncrementTick+0x120>)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	4b32      	ldr	r3, [pc, #200]	; (8005a94 <xTaskIncrementTick+0x124>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3301      	adds	r3, #1
 80059d0:	4a30      	ldr	r2, [pc, #192]	; (8005a94 <xTaskIncrementTick+0x124>)
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	f000 fade 	bl	8005f94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059d8:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <xTaskIncrementTick+0x128>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d34a      	bcc.n	8005a78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e2:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <xTaskIncrementTick+0x11c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <xTaskIncrementTick+0x80>
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <xTaskIncrementTick+0x82>
 80059f0:	2300      	movs	r3, #0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d004      	beq.n	8005a00 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f6:	4b28      	ldr	r3, [pc, #160]	; (8005a98 <xTaskIncrementTick+0x128>)
 80059f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059fc:	601a      	str	r2, [r3, #0]
					break;
 80059fe:	e03b      	b.n	8005a78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a00:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <xTaskIncrementTick+0x11c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d203      	bcs.n	8005a20 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a18:	4a1f      	ldr	r2, [pc, #124]	; (8005a98 <xTaskIncrementTick+0x128>)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6013      	str	r3, [r2, #0]
						break;
 8005a1e:	e02b      	b.n	8005a78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe fbad 	bl	8004184 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	3318      	adds	r3, #24
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fe fba4 	bl	8004184 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a40:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <xTaskIncrementTick+0x12c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d903      	bls.n	8005a50 <xTaskIncrementTick+0xe0>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	4a13      	ldr	r2, [pc, #76]	; (8005a9c <xTaskIncrementTick+0x12c>)
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a10      	ldr	r2, [pc, #64]	; (8005aa0 <xTaskIncrementTick+0x130>)
 8005a5e:	441a      	add	r2, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4619      	mov	r1, r3
 8005a66:	4610      	mov	r0, r2
 8005a68:	f7fe fb31 	bl	80040ce <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a6c:	e7b9      	b.n	80059e2 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <xTaskIncrementTick+0x134>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3301      	adds	r3, #1
 8005a74:	4a0b      	ldr	r2, [pc, #44]	; (8005aa4 <xTaskIncrementTick+0x134>)
 8005a76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a78:	697b      	ldr	r3, [r7, #20]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000b30 	.word	0x20000b30
 8005a88:	20000b0c 	.word	0x20000b0c
 8005a8c:	20000ac0 	.word	0x20000ac0
 8005a90:	20000ac4 	.word	0x20000ac4
 8005a94:	20000b20 	.word	0x20000b20
 8005a98:	20000b28 	.word	0x20000b28
 8005a9c:	20000b10 	.word	0x20000b10
 8005aa0:	20000638 	.word	0x20000638
 8005aa4:	20000b18 	.word	0x20000b18

08005aa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aae:	4b3d      	ldr	r3, [pc, #244]	; (8005ba4 <vTaskSwitchContext+0xfc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ab6:	4b3c      	ldr	r3, [pc, #240]	; (8005ba8 <vTaskSwitchContext+0x100>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005abc:	e06d      	b.n	8005b9a <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8005abe:	4b3a      	ldr	r3, [pc, #232]	; (8005ba8 <vTaskSwitchContext+0x100>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005ac4:	4b39      	ldr	r3, [pc, #228]	; (8005bac <vTaskSwitchContext+0x104>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d111      	bne.n	8005b00 <vTaskSwitchContext+0x58>
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d10b      	bne.n	8005b00 <vTaskSwitchContext+0x58>
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	3308      	adds	r3, #8
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d105      	bne.n	8005b00 <vTaskSwitchContext+0x58>
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	330c      	adds	r3, #12
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d008      	beq.n	8005b12 <vTaskSwitchContext+0x6a>
 8005b00:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <vTaskSwitchContext+0x104>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b29      	ldr	r3, [pc, #164]	; (8005bac <vTaskSwitchContext+0x104>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3334      	adds	r3, #52	; 0x34
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f7fa fced 	bl	80004ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005b12:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <vTaskSwitchContext+0x108>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e010      	b.n	8005b3c <vTaskSwitchContext+0x94>
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <vTaskSwitchContext+0x8e>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	607b      	str	r3, [r7, #4]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <vTaskSwitchContext+0x8c>
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	491d      	ldr	r1, [pc, #116]	; (8005bb4 <vTaskSwitchContext+0x10c>)
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0e4      	beq.n	8005b1a <vTaskSwitchContext+0x72>
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <vTaskSwitchContext+0x10c>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	3308      	adds	r3, #8
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d104      	bne.n	8005b80 <vTaskSwitchContext+0xd8>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	605a      	str	r2, [r3, #4]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	4a09      	ldr	r2, [pc, #36]	; (8005bac <vTaskSwitchContext+0x104>)
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	4a09      	ldr	r2, [pc, #36]	; (8005bb0 <vTaskSwitchContext+0x108>)
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <vTaskSwitchContext+0x104>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3354      	adds	r3, #84	; 0x54
 8005b96:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <vTaskSwitchContext+0x110>)
 8005b98:	6013      	str	r3, [r2, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20000b30 	.word	0x20000b30
 8005ba8:	20000b1c 	.word	0x20000b1c
 8005bac:	20000634 	.word	0x20000634
 8005bb0:	20000b10 	.word	0x20000b10
 8005bb4:	20000638 	.word	0x20000638
 8005bb8:	20000010 	.word	0x20000010

08005bbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	60fb      	str	r3, [r7, #12]
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <vTaskPlaceOnEventList+0x44>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3318      	adds	r3, #24
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fe fa92 	bl	8004114 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	6838      	ldr	r0, [r7, #0]
 8005bf4:	f000 fd62 	bl	80066bc <prvAddCurrentTaskToDelayedList>
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	20000634 	.word	0x20000634

08005c04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	617b      	str	r3, [r7, #20]
}
 8005c28:	bf00      	nop
 8005c2a:	e7fe      	b.n	8005c2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c2c:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3318      	adds	r3, #24
 8005c32:	4619      	mov	r1, r3
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f7fe fa4a 	bl	80040ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	68b8      	ldr	r0, [r7, #8]
 8005c4a:	f000 fd37 	bl	80066bc <prvAddCurrentTaskToDelayedList>
	}
 8005c4e:	bf00      	nop
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000634 	.word	0x20000634

08005c5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	60fb      	str	r3, [r7, #12]
}
 8005c84:	bf00      	nop
 8005c86:	e7fe      	b.n	8005c86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	3318      	adds	r3, #24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe fa79 	bl	8004184 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c92:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <xTaskRemoveFromEventList+0xb0>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d11d      	bne.n	8005cd6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fa70 	bl	8004184 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <xTaskRemoveFromEventList+0xb4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d903      	bls.n	8005cb8 <xTaskRemoveFromEventList+0x5c>
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	4a16      	ldr	r2, [pc, #88]	; (8005d10 <xTaskRemoveFromEventList+0xb4>)
 8005cb6:	6013      	str	r3, [r2, #0]
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <xTaskRemoveFromEventList+0xb8>)
 8005cc6:	441a      	add	r2, r3
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7fe f9fd 	bl	80040ce <vListInsertEnd>
 8005cd4:	e005      	b.n	8005ce2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	3318      	adds	r3, #24
 8005cda:	4619      	mov	r1, r3
 8005cdc:	480e      	ldr	r0, [pc, #56]	; (8005d18 <xTaskRemoveFromEventList+0xbc>)
 8005cde:	f7fe f9f6 	bl	80040ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce6:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <xTaskRemoveFromEventList+0xc0>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d905      	bls.n	8005cfc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cf4:	4b0a      	ldr	r3, [pc, #40]	; (8005d20 <xTaskRemoveFromEventList+0xc4>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e001      	b.n	8005d00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005d00:	697b      	ldr	r3, [r7, #20]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000b30 	.word	0x20000b30
 8005d10:	20000b10 	.word	0x20000b10
 8005d14:	20000638 	.word	0x20000638
 8005d18:	20000ac8 	.word	0x20000ac8
 8005d1c:	20000634 	.word	0x20000634
 8005d20:	20000b1c 	.word	0x20000b1c

08005d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <vTaskInternalSetTimeOutState+0x24>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <vTaskInternalSetTimeOutState+0x28>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	605a      	str	r2, [r3, #4]
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	20000b20 	.word	0x20000b20
 8005d4c:	20000b0c 	.word	0x20000b0c

08005d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60fb      	str	r3, [r7, #12]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d92:	f001 f99b 	bl	80070cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d96:	4b1d      	ldr	r3, [pc, #116]	; (8005e0c <xTaskCheckForTimeOut+0xbc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dae:	d102      	bne.n	8005db6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	e023      	b.n	8005dfe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b15      	ldr	r3, [pc, #84]	; (8005e10 <xTaskCheckForTimeOut+0xc0>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d007      	beq.n	8005dd2 <xTaskCheckForTimeOut+0x82>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d302      	bcc.n	8005dd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	e015      	b.n	8005dfe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d20b      	bcs.n	8005df4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1ad2      	subs	r2, r2, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff9b 	bl	8005d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	e004      	b.n	8005dfe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dfe:	f001 f995 	bl	800712c <vPortExitCritical>

	return xReturn;
 8005e02:	69fb      	ldr	r3, [r7, #28]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000b0c 	.word	0x20000b0c
 8005e10:	20000b20 	.word	0x20000b20

08005e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e18:	4b03      	ldr	r3, [pc, #12]	; (8005e28 <vTaskMissedYield+0x14>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
}
 8005e1e:	bf00      	nop
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	20000b1c 	.word	0x20000b1c

08005e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e34:	f000 f84c 	bl	8005ed0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8005e38:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <prvIdleTask+0x20>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e48:	e7f4      	b.n	8005e34 <prvIdleTask+0x8>
 8005e4a:	bf00      	nop
 8005e4c:	e000ed04 	.word	0xe000ed04

08005e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e56:	2300      	movs	r3, #0
 8005e58:	607b      	str	r3, [r7, #4]
 8005e5a:	e00c      	b.n	8005e76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4a12      	ldr	r2, [pc, #72]	; (8005eb0 <prvInitialiseTaskLists+0x60>)
 8005e68:	4413      	add	r3, r2
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe f904 	bl	8004078 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3301      	adds	r3, #1
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b37      	cmp	r3, #55	; 0x37
 8005e7a:	d9ef      	bls.n	8005e5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e7c:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <prvInitialiseTaskLists+0x64>)
 8005e7e:	f7fe f8fb 	bl	8004078 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e82:	480d      	ldr	r0, [pc, #52]	; (8005eb8 <prvInitialiseTaskLists+0x68>)
 8005e84:	f7fe f8f8 	bl	8004078 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e88:	480c      	ldr	r0, [pc, #48]	; (8005ebc <prvInitialiseTaskLists+0x6c>)
 8005e8a:	f7fe f8f5 	bl	8004078 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e8e:	480c      	ldr	r0, [pc, #48]	; (8005ec0 <prvInitialiseTaskLists+0x70>)
 8005e90:	f7fe f8f2 	bl	8004078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e94:	480b      	ldr	r0, [pc, #44]	; (8005ec4 <prvInitialiseTaskLists+0x74>)
 8005e96:	f7fe f8ef 	bl	8004078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <prvInitialiseTaskLists+0x78>)
 8005e9c:	4a05      	ldr	r2, [pc, #20]	; (8005eb4 <prvInitialiseTaskLists+0x64>)
 8005e9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <prvInitialiseTaskLists+0x7c>)
 8005ea2:	4a05      	ldr	r2, [pc, #20]	; (8005eb8 <prvInitialiseTaskLists+0x68>)
 8005ea4:	601a      	str	r2, [r3, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000638 	.word	0x20000638
 8005eb4:	20000a98 	.word	0x20000a98
 8005eb8:	20000aac 	.word	0x20000aac
 8005ebc:	20000ac8 	.word	0x20000ac8
 8005ec0:	20000adc 	.word	0x20000adc
 8005ec4:	20000af4 	.word	0x20000af4
 8005ec8:	20000ac0 	.word	0x20000ac0
 8005ecc:	20000ac4 	.word	0x20000ac4

08005ed0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ed6:	e019      	b.n	8005f0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ed8:	f001 f8f8 	bl	80070cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <prvCheckTasksWaitingTermination+0x50>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe f94b 	bl	8004184 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005eee:	4b0d      	ldr	r3, [pc, #52]	; (8005f24 <prvCheckTasksWaitingTermination+0x54>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	4a0b      	ldr	r2, [pc, #44]	; (8005f24 <prvCheckTasksWaitingTermination+0x54>)
 8005ef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <prvCheckTasksWaitingTermination+0x58>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	4a0a      	ldr	r2, [pc, #40]	; (8005f28 <prvCheckTasksWaitingTermination+0x58>)
 8005f00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f02:	f001 f913 	bl	800712c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f810 	bl	8005f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <prvCheckTasksWaitingTermination+0x58>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e1      	bne.n	8005ed8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000adc 	.word	0x20000adc
 8005f24:	20000b08 	.word	0x20000b08
 8005f28:	20000af0 	.word	0x20000af0

08005f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3354      	adds	r3, #84	; 0x54
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f001 fe1f 	bl	8007b7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d108      	bne.n	8005f5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f001 fa81 	bl	8007454 <vPortFree>
				vPortFree( pxTCB );
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f001 fa7e 	bl	8007454 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f58:	e018      	b.n	8005f8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d103      	bne.n	8005f6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f001 fa75 	bl	8007454 <vPortFree>
	}
 8005f6a:	e00f      	b.n	8005f8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d00a      	beq.n	8005f8c <prvDeleteTCB+0x60>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	60fb      	str	r3, [r7, #12]
}
 8005f88:	bf00      	nop
 8005f8a:	e7fe      	b.n	8005f8a <prvDeleteTCB+0x5e>
	}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <prvResetNextTaskUnblockTime+0x40>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <prvResetNextTaskUnblockTime+0x14>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <prvResetNextTaskUnblockTime+0x16>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d004      	beq.n	8005fb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fae:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <prvResetNextTaskUnblockTime+0x44>)
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fb6:	e008      	b.n	8005fca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fb8:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <prvResetNextTaskUnblockTime+0x40>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4a04      	ldr	r2, [pc, #16]	; (8005fd8 <prvResetNextTaskUnblockTime+0x44>)
 8005fc8:	6013      	str	r3, [r2, #0]
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr
 8005fd4:	20000ac0 	.word	0x20000ac0
 8005fd8:	20000b28 	.word	0x20000b28

08005fdc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005fe2:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <xTaskGetCurrentTaskHandle+0x18>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005fe8:	687b      	ldr	r3, [r7, #4]
	}
 8005fea:	4618      	mov	r0, r3
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr
 8005ff4:	20000634 	.word	0x20000634

08005ff8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ffe:	4b0b      	ldr	r3, [pc, #44]	; (800602c <xTaskGetSchedulerState+0x34>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006006:	2301      	movs	r3, #1
 8006008:	607b      	str	r3, [r7, #4]
 800600a:	e008      	b.n	800601e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800600c:	4b08      	ldr	r3, [pc, #32]	; (8006030 <xTaskGetSchedulerState+0x38>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d102      	bne.n	800601a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006014:	2302      	movs	r3, #2
 8006016:	607b      	str	r3, [r7, #4]
 8006018:	e001      	b.n	800601e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800601e:	687b      	ldr	r3, [r7, #4]
	}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	20000b14 	.word	0x20000b14
 8006030:	20000b30 	.word	0x20000b30

08006034 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d056      	beq.n	80060f8 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <xTaskPriorityInherit+0xd0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	429a      	cmp	r2, r3
 8006056:	d246      	bcs.n	80060e6 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	db06      	blt.n	800606e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006060:	4b28      	ldr	r3, [pc, #160]	; (8006104 <xTaskPriorityInherit+0xd0>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	6959      	ldr	r1, [r3, #20]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4a22      	ldr	r2, [pc, #136]	; (8006108 <xTaskPriorityInherit+0xd4>)
 8006080:	4413      	add	r3, r2
 8006082:	4299      	cmp	r1, r3
 8006084:	d101      	bne.n	800608a <xTaskPriorityInherit+0x56>
 8006086:	2301      	movs	r3, #1
 8006088:	e000      	b.n	800608c <xTaskPriorityInherit+0x58>
 800608a:	2300      	movs	r3, #0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d022      	beq.n	80060d6 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	3304      	adds	r3, #4
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe f875 	bl	8004184 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800609a:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <xTaskPriorityInherit+0xd0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	4b18      	ldr	r3, [pc, #96]	; (800610c <xTaskPriorityInherit+0xd8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d903      	bls.n	80060b8 <xTaskPriorityInherit+0x84>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a15      	ldr	r2, [pc, #84]	; (800610c <xTaskPriorityInherit+0xd8>)
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4a10      	ldr	r2, [pc, #64]	; (8006108 <xTaskPriorityInherit+0xd4>)
 80060c6:	441a      	add	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f7fd fffd 	bl	80040ce <vListInsertEnd>
 80060d4:	e004      	b.n	80060e0 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <xTaskPriorityInherit+0xd0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80060e0:	2301      	movs	r3, #1
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e008      	b.n	80060f8 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <xTaskPriorityInherit+0xd0>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d201      	bcs.n	80060f8 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060f8:	68fb      	ldr	r3, [r7, #12]
	}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000634 	.word	0x20000634
 8006108:	20000638 	.word	0x20000638
 800610c:	20000b10 	.word	0x20000b10

08006110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d056      	beq.n	80061d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006126:	4b2e      	ldr	r3, [pc, #184]	; (80061e0 <xTaskPriorityDisinherit+0xd0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	429a      	cmp	r2, r3
 800612e:	d00a      	beq.n	8006146 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	60fb      	str	r3, [r7, #12]
}
 8006142:	bf00      	nop
 8006144:	e7fe      	b.n	8006144 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	60bb      	str	r3, [r7, #8]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006176:	429a      	cmp	r2, r3
 8006178:	d02c      	beq.n	80061d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617e:	2b00      	cmp	r3, #0
 8006180:	d128      	bne.n	80061d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	3304      	adds	r3, #4
 8006186:	4618      	mov	r0, r3
 8006188:	f7fd fffc 	bl	8004184 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <xTaskPriorityDisinherit+0xd4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d903      	bls.n	80061b4 <xTaskPriorityDisinherit+0xa4>
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	4a0c      	ldr	r2, [pc, #48]	; (80061e4 <xTaskPriorityDisinherit+0xd4>)
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <xTaskPriorityDisinherit+0xd8>)
 80061c2:	441a      	add	r2, r3
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f7fd ff7f 	bl	80040ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061d4:	697b      	ldr	r3, [r7, #20]
	}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000634 	.word	0x20000634
 80061e4:	20000b10 	.word	0x20000b10
 80061e8:	20000638 	.word	0x20000638

080061ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80061fa:	2301      	movs	r3, #1
 80061fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d06f      	beq.n	80062e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10a      	bne.n	8006222 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60fb      	str	r3, [r7, #12]
}
 800621e:	bf00      	nop
 8006220:	e7fe      	b.n	8006220 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d902      	bls.n	8006232 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	e002      	b.n	8006238 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006236:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	429a      	cmp	r2, r3
 8006240:	d050      	beq.n	80062e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	429a      	cmp	r2, r3
 800624a:	d14b      	bne.n	80062e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800624c:	4b27      	ldr	r3, [pc, #156]	; (80062ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	429a      	cmp	r2, r3
 8006254:	d10a      	bne.n	800626c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625a:	f383 8811 	msr	BASEPRI, r3
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	60bb      	str	r3, [r7, #8]
}
 8006268:	bf00      	nop
 800626a:	e7fe      	b.n	800626a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	69fa      	ldr	r2, [r7, #28]
 8006276:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	db04      	blt.n	800628a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	6959      	ldr	r1, [r3, #20]
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4a15      	ldr	r2, [pc, #84]	; (80062f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800629a:	4413      	add	r3, r2
 800629c:	4299      	cmp	r1, r3
 800629e:	d101      	bne.n	80062a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <vTaskPriorityDisinheritAfterTimeout+0xba>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01c      	beq.n	80062e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	3304      	adds	r3, #4
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fd ff68 	bl	8004184 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b8:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d903      	bls.n	80062c8 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	4a0b      	ldr	r2, [pc, #44]	; (80062f4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4a06      	ldr	r2, [pc, #24]	; (80062f0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80062d6:	441a      	add	r2, r3
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	3304      	adds	r3, #4
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f7fd fef5 	bl	80040ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062e4:	bf00      	nop
 80062e6:	3720      	adds	r7, #32
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20000634 	.word	0x20000634
 80062f0:	20000638 	.word	0x20000638
 80062f4:	20000b10 	.word	0x20000b10

080062f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80062fc:	4b07      	ldr	r3, [pc, #28]	; (800631c <pvTaskIncrementMutexHeldCount+0x24>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <pvTaskIncrementMutexHeldCount+0x24>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800630a:	3201      	adds	r2, #1
 800630c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800630e:	4b03      	ldr	r3, [pc, #12]	; (800631c <pvTaskIncrementMutexHeldCount+0x24>)
 8006310:	681b      	ldr	r3, [r3, #0]
	}
 8006312:	4618      	mov	r0, r3
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000634 	.word	0x20000634

08006320 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800632e:	f000 fecd 	bl	80070cc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006332:	4b29      	ldr	r3, [pc, #164]	; (80063d8 <xTaskNotifyWait+0xb8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d01c      	beq.n	800637a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006340:	4b25      	ldr	r3, [pc, #148]	; (80063d8 <xTaskNotifyWait+0xb8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	43d2      	mvns	r2, r2
 800634c:	400a      	ands	r2, r1
 800634e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006352:	4b21      	ldr	r3, [pc, #132]	; (80063d8 <xTaskNotifyWait+0xb8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00b      	beq.n	800637a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006362:	2101      	movs	r1, #1
 8006364:	6838      	ldr	r0, [r7, #0]
 8006366:	f000 f9a9 	bl	80066bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800636a:	4b1c      	ldr	r3, [pc, #112]	; (80063dc <xTaskNotifyWait+0xbc>)
 800636c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800637a:	f000 fed7 	bl	800712c <vPortExitCritical>

		taskENTER_CRITICAL();
 800637e:	f000 fea5 	bl	80070cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006388:	4b13      	ldr	r3, [pc, #76]	; (80063d8 <xTaskNotifyWait+0xb8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006394:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <xTaskNotifyWait+0xb8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d002      	beq.n	80063a8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	e00a      	b.n	80063be <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80063a8:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <xTaskNotifyWait+0xb8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	43d2      	mvns	r2, r2
 80063b4:	400a      	ands	r2, r1
 80063b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80063ba:	2301      	movs	r3, #1
 80063bc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063be:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <xTaskNotifyWait+0xb8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80063c8:	f000 feb0 	bl	800712c <vPortExitCritical>

		return xReturn;
 80063cc:	697b      	ldr	r3, [r7, #20]
	}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20000634 	.word	0x20000634
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	; 0x28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80063f0:	2301      	movs	r3, #1
 80063f2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <xTaskGenericNotify+0x30>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	61bb      	str	r3, [r7, #24]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006414:	f000 fe5a 	bl	80070cc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d004      	beq.n	8006428 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800642e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	2b04      	cmp	r3, #4
 800643c:	d82d      	bhi.n	800649a <xTaskGenericNotify+0xba>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <xTaskGenericNotify+0x64>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	0800649b 	.word	0x0800649b
 8006448:	08006459 	.word	0x08006459
 800644c:	0800646b 	.word	0x0800646b
 8006450:	0800647b 	.word	0x0800647b
 8006454:	08006485 	.word	0x08006485
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	431a      	orrs	r2, r3
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8006468:	e017      	b.n	800649a <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8006478:	e00f      	b.n	800649a <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8006482:	e00a      	b.n	800649a <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006484:	7ffb      	ldrb	r3, [r7, #31]
 8006486:	2b02      	cmp	r3, #2
 8006488:	d004      	beq.n	8006494 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006492:	e001      	b.n	8006498 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8006494:	2300      	movs	r3, #0
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006498:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800649a:	7ffb      	ldrb	r3, [r7, #31]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d12d      	bne.n	80064fc <xTaskGenericNotify+0x11c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fd fe6d 	bl	8004184 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ae:	4b17      	ldr	r3, [pc, #92]	; (800650c <xTaskGenericNotify+0x12c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d903      	bls.n	80064be <xTaskGenericNotify+0xde>
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	4a14      	ldr	r2, [pc, #80]	; (800650c <xTaskGenericNotify+0x12c>)
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4a11      	ldr	r2, [pc, #68]	; (8006510 <xTaskGenericNotify+0x130>)
 80064cc:	441a      	add	r2, r3
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	3304      	adds	r3, #4
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f7fd fdfa 	bl	80040ce <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <xTaskGenericNotify+0x118>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	617b      	str	r3, [r7, #20]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <xTaskGenericNotify+0x116>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <xTaskGenericNotify+0x134>)
 80064fa:	681b      	ldr	r3, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80064fc:	f000 fe16 	bl	800712c <vPortExitCritical>

		return xReturn;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006502:	4618      	mov	r0, r3
 8006504:	3728      	adds	r7, #40	; 0x28
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000b10 	.word	0x20000b10
 8006510:	20000638 	.word	0x20000638
 8006514:	20000634 	.word	0x20000634

08006518 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08e      	sub	sp, #56	; 0x38
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	4613      	mov	r3, r2
 8006526:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006528:	2301      	movs	r3, #1
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006548:	f000 fe82 	bl	8007250 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006550:	f3ef 8211 	mrs	r2, BASEPRI
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	623a      	str	r2, [r7, #32]
 8006566:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006568:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	2202      	movs	r2, #2
 800658a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	2b04      	cmp	r3, #4
 8006592:	d82f      	bhi.n	80065f4 <xTaskGenericNotifyFromISR+0xdc>
 8006594:	a201      	add	r2, pc, #4	; (adr r2, 800659c <xTaskGenericNotifyFromISR+0x84>)
 8006596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659a:	bf00      	nop
 800659c:	080065f5 	.word	0x080065f5
 80065a0:	080065b1 	.word	0x080065b1
 80065a4:	080065c3 	.word	0x080065c3
 80065a8:	080065d3 	.word	0x080065d3
 80065ac:	080065dd 	.word	0x080065dd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80065c0:	e018      	b.n	80065f4 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80065d0:	e010      	b.n	80065f4 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80065da:	e00b      	b.n	80065f4 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80065dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d004      	beq.n	80065ee <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80065ec:	e001      	b.n	80065f2 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80065f2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80065f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d147      	bne.n	800668c <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	61bb      	str	r3, [r7, #24]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661a:	4b22      	ldr	r3, [pc, #136]	; (80066a4 <xTaskGenericNotifyFromISR+0x18c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d11d      	bne.n	800665e <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	3304      	adds	r3, #4
 8006626:	4618      	mov	r0, r3
 8006628:	f7fd fdac 	bl	8004184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4b1d      	ldr	r3, [pc, #116]	; (80066a8 <xTaskGenericNotifyFromISR+0x190>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d903      	bls.n	8006640 <xTaskGenericNotifyFromISR+0x128>
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	4a1a      	ldr	r2, [pc, #104]	; (80066a8 <xTaskGenericNotifyFromISR+0x190>)
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4a17      	ldr	r2, [pc, #92]	; (80066ac <xTaskGenericNotifyFromISR+0x194>)
 800664e:	441a      	add	r2, r3
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f7fd fd39 	bl	80040ce <vListInsertEnd>
 800665c:	e005      	b.n	800666a <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	3318      	adds	r3, #24
 8006662:	4619      	mov	r1, r3
 8006664:	4812      	ldr	r0, [pc, #72]	; (80066b0 <xTaskGenericNotifyFromISR+0x198>)
 8006666:	f7fd fd32 	bl	80040ce <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800666e:	4b11      	ldr	r3, [pc, #68]	; (80066b4 <xTaskGenericNotifyFromISR+0x19c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	429a      	cmp	r2, r3
 8006676:	d909      	bls.n	800668c <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800667e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006680:	2201      	movs	r2, #1
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e002      	b.n	800668c <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8006686:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <xTaskGenericNotifyFromISR+0x1a0>)
 8006688:	2201      	movs	r2, #1
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f383 8811 	msr	BASEPRI, r3
}
 8006696:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800669a:	4618      	mov	r0, r3
 800669c:	3738      	adds	r7, #56	; 0x38
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000b30 	.word	0x20000b30
 80066a8:	20000b10 	.word	0x20000b10
 80066ac:	20000638 	.word	0x20000638
 80066b0:	20000ac8 	.word	0x20000ac8
 80066b4:	20000634 	.word	0x20000634
 80066b8:	20000b1c 	.word	0x20000b1c

080066bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066c6:	4b21      	ldr	r3, [pc, #132]	; (800674c <prvAddCurrentTaskToDelayedList+0x90>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066cc:	4b20      	ldr	r3, [pc, #128]	; (8006750 <prvAddCurrentTaskToDelayedList+0x94>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fd fd56 	bl	8004184 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066de:	d10a      	bne.n	80066f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066e6:	4b1a      	ldr	r3, [pc, #104]	; (8006750 <prvAddCurrentTaskToDelayedList+0x94>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4619      	mov	r1, r3
 80066ee:	4819      	ldr	r0, [pc, #100]	; (8006754 <prvAddCurrentTaskToDelayedList+0x98>)
 80066f0:	f7fd fced 	bl	80040ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066f4:	e026      	b.n	8006744 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4413      	add	r3, r2
 80066fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066fe:	4b14      	ldr	r3, [pc, #80]	; (8006750 <prvAddCurrentTaskToDelayedList+0x94>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	429a      	cmp	r2, r3
 800670c:	d209      	bcs.n	8006722 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <prvAddCurrentTaskToDelayedList+0x94>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3304      	adds	r3, #4
 8006718:	4619      	mov	r1, r3
 800671a:	4610      	mov	r0, r2
 800671c:	f7fd fcfa 	bl	8004114 <vListInsert>
}
 8006720:	e010      	b.n	8006744 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006722:	4b0e      	ldr	r3, [pc, #56]	; (800675c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <prvAddCurrentTaskToDelayedList+0x94>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3304      	adds	r3, #4
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f7fd fcf0 	bl	8004114 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006734:	4b0a      	ldr	r3, [pc, #40]	; (8006760 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	429a      	cmp	r2, r3
 800673c:	d202      	bcs.n	8006744 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800673e:	4a08      	ldr	r2, [pc, #32]	; (8006760 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	6013      	str	r3, [r2, #0]
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20000b0c 	.word	0x20000b0c
 8006750:	20000634 	.word	0x20000634
 8006754:	20000af4 	.word	0x20000af4
 8006758:	20000ac4 	.word	0x20000ac4
 800675c:	20000ac0 	.word	0x20000ac0
 8006760:	20000b28 	.word	0x20000b28

08006764 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08a      	sub	sp, #40	; 0x28
 8006768:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800676e:	f000 fb5b 	bl	8006e28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006772:	4b1c      	ldr	r3, [pc, #112]	; (80067e4 <xTimerCreateTimerTask+0x80>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d021      	beq.n	80067be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006782:	1d3a      	adds	r2, r7, #4
 8006784:	f107 0108 	add.w	r1, r7, #8
 8006788:	f107 030c 	add.w	r3, r7, #12
 800678c:	4618      	mov	r0, r3
 800678e:	f7fd fc5b 	bl	8004048 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	9202      	str	r2, [sp, #8]
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	2302      	movs	r3, #2
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	2300      	movs	r3, #0
 80067a2:	460a      	mov	r2, r1
 80067a4:	4910      	ldr	r1, [pc, #64]	; (80067e8 <xTimerCreateTimerTask+0x84>)
 80067a6:	4811      	ldr	r0, [pc, #68]	; (80067ec <xTimerCreateTimerTask+0x88>)
 80067a8:	f7fe fd80 	bl	80052ac <xTaskCreateStatic>
 80067ac:	4603      	mov	r3, r0
 80067ae:	4a10      	ldr	r2, [pc, #64]	; (80067f0 <xTimerCreateTimerTask+0x8c>)
 80067b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80067b2:	4b0f      	ldr	r3, [pc, #60]	; (80067f0 <xTimerCreateTimerTask+0x8c>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80067ba:	2301      	movs	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10a      	bne.n	80067da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	613b      	str	r3, [r7, #16]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80067da:	697b      	ldr	r3, [r7, #20]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000b64 	.word	0x20000b64
 80067e8:	08008930 	.word	0x08008930
 80067ec:	08006a31 	.word	0x08006a31
 80067f0:	20000b68 	.word	0x20000b68

080067f4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006802:	2030      	movs	r0, #48	; 0x30
 8006804:	f000 fd62 	bl	80072cc <pvPortMalloc>
 8006808:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00d      	beq.n	800682c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f846 	bl	80068b0 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800682c:	697b      	ldr	r3, [r7, #20]
	}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006836:	b580      	push	{r7, lr}
 8006838:	b08a      	sub	sp, #40	; 0x28
 800683a:	af02      	add	r7, sp, #8
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006844:	2330      	movs	r3, #48	; 0x30
 8006846:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b30      	cmp	r3, #48	; 0x30
 800684c:	d00a      	beq.n	8006864 <xTimerCreateStatic+0x2e>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	61bb      	str	r3, [r7, #24]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <xTimerCreateStatic+0x4a>
	__asm volatile
 800686a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686e:	f383 8811 	msr	BASEPRI, r3
 8006872:	f3bf 8f6f 	isb	sy
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	617b      	str	r3, [r7, #20]
}
 800687c:	bf00      	nop
 800687e:	e7fe      	b.n	800687e <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00d      	beq.n	80068a6 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f809 	bl	80068b0 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80068a6:	69fb      	ldr	r3, [r7, #28]
	}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3720      	adds	r7, #32
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	617b      	str	r3, [r7, #20]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80068e0:	f000 faa2 	bl	8006e28 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	6a3a      	ldr	r2, [r7, #32]
 8006900:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	3304      	adds	r3, #4
 8006906:	4618      	mov	r0, r3
 8006908:	f7fd fbd5 	bl	80040b6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800690c:	bf00      	nop
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08a      	sub	sp, #40	; 0x28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006922:	2300      	movs	r3, #0
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10a      	bne.n	8006942 <xTimerGenericCommand+0x2e>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	623b      	str	r3, [r7, #32]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006942:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <xTimerGenericCommand+0x98>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02a      	beq.n	80069a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b05      	cmp	r3, #5
 800695a:	dc18      	bgt.n	800698e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800695c:	f7ff fb4c 	bl	8005ff8 <xTaskGetSchedulerState>
 8006960:	4603      	mov	r3, r0
 8006962:	2b02      	cmp	r3, #2
 8006964:	d109      	bne.n	800697a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006966:	4b11      	ldr	r3, [pc, #68]	; (80069ac <xTimerGenericCommand+0x98>)
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	f107 0110 	add.w	r1, r7, #16
 800696e:	2300      	movs	r3, #0
 8006970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006972:	f7fd fe3b 	bl	80045ec <xQueueGenericSend>
 8006976:	6278      	str	r0, [r7, #36]	; 0x24
 8006978:	e012      	b.n	80069a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800697a:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <xTimerGenericCommand+0x98>)
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	f107 0110 	add.w	r1, r7, #16
 8006982:	2300      	movs	r3, #0
 8006984:	2200      	movs	r2, #0
 8006986:	f7fd fe31 	bl	80045ec <xQueueGenericSend>
 800698a:	6278      	str	r0, [r7, #36]	; 0x24
 800698c:	e008      	b.n	80069a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <xTimerGenericCommand+0x98>)
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	f107 0110 	add.w	r1, r7, #16
 8006996:	2300      	movs	r3, #0
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	f7fd ff17 	bl	80047cc <xQueueGenericSendFromISR>
 800699e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3728      	adds	r7, #40	; 0x28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20000b64 	.word	0x20000b64

080069b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069ba:	4b1c      	ldr	r3, [pc, #112]	; (8006a2c <prvProcessExpiredTimer+0x7c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fd fbdb 	bl	8004184 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d122      	bne.n	8006a1c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	699a      	ldr	r2, [r3, #24]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	18d1      	adds	r1, r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	6978      	ldr	r0, [r7, #20]
 80069e4:	f000 f8c8 	bl	8006b78 <prvInsertTimerInActiveList>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d016      	beq.n	8006a1c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069ee:	2300      	movs	r3, #0
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	2300      	movs	r3, #0
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	2100      	movs	r1, #0
 80069f8:	6978      	ldr	r0, [r7, #20]
 80069fa:	f7ff ff8b 	bl	8006914 <xTimerGenericCommand>
 80069fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	60fb      	str	r3, [r7, #12]
}
 8006a18:	bf00      	nop
 8006a1a:	e7fe      	b.n	8006a1a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	6978      	ldr	r0, [r7, #20]
 8006a22:	4798      	blx	r3
}
 8006a24:	bf00      	nop
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20000b5c 	.word	0x20000b5c

08006a30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a38:	f107 0308 	add.w	r3, r7, #8
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 f857 	bl	8006af0 <prvGetNextExpireTime>
 8006a42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4619      	mov	r1, r3
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f803 	bl	8006a54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a4e:	f000 f8d5 	bl	8006bfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a52:	e7f1      	b.n	8006a38 <prvTimerTask+0x8>

08006a54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a5e:	f7fe fedb 	bl	8005818 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a62:	f107 0308 	add.w	r3, r7, #8
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f866 	bl	8006b38 <prvSampleTimeNow>
 8006a6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d130      	bne.n	8006ad6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <prvProcessTimerOrBlockTask+0x3c>
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d806      	bhi.n	8006a90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a82:	f7fe fed7 	bl	8005834 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ff91 	bl	80069b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a8e:	e024      	b.n	8006ada <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a96:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <prvProcessTimerOrBlockTask+0x90>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bf0c      	ite	eq
 8006aa0:	2301      	moveq	r3, #1
 8006aa2:	2300      	movne	r3, #0
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006aa8:	4b0f      	ldr	r3, [pc, #60]	; (8006ae8 <prvProcessTimerOrBlockTask+0x94>)
 8006aaa:	6818      	ldr	r0, [r3, #0]
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f7fe fb6b 	bl	8005190 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006aba:	f7fe febb 	bl	8005834 <xTaskResumeAll>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ac4:	4b09      	ldr	r3, [pc, #36]	; (8006aec <prvProcessTimerOrBlockTask+0x98>)
 8006ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	f3bf 8f6f 	isb	sy
}
 8006ad4:	e001      	b.n	8006ada <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ad6:	f7fe fead 	bl	8005834 <xTaskResumeAll>
}
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000b60 	.word	0x20000b60
 8006ae8:	20000b64 	.word	0x20000b64
 8006aec:	e000ed04 	.word	0xe000ed04

08006af0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006af8:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <prvGetNextExpireTime+0x44>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d105      	bne.n	8006b22 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b16:	4b07      	ldr	r3, [pc, #28]	; (8006b34 <prvGetNextExpireTime+0x44>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	e001      	b.n	8006b26 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b26:	68fb      	ldr	r3, [r7, #12]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	20000b5c 	.word	0x20000b5c

08006b38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b40:	f7fe ff08 	bl	8005954 <xTaskGetTickCount>
 8006b44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <prvSampleTimeNow+0x3c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d205      	bcs.n	8006b5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b50:	f000 f908 	bl	8006d64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	e002      	b.n	8006b62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b62:	4a04      	ldr	r2, [pc, #16]	; (8006b74 <prvSampleTimeNow+0x3c>)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b68:	68fb      	ldr	r3, [r7, #12]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000b6c 	.word	0x20000b6c

08006b78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d812      	bhi.n	8006bc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d302      	bcc.n	8006bb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e01b      	b.n	8006bea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bb2:	4b10      	ldr	r3, [pc, #64]	; (8006bf4 <prvInsertTimerInActiveList+0x7c>)
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f7fd faa9 	bl	8004114 <vListInsert>
 8006bc2:	e012      	b.n	8006bea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d206      	bcs.n	8006bda <prvInsertTimerInActiveList+0x62>
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d302      	bcc.n	8006bda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e007      	b.n	8006bea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bda:	4b07      	ldr	r3, [pc, #28]	; (8006bf8 <prvInsertTimerInActiveList+0x80>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f7fd fa95 	bl	8004114 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bea:	697b      	ldr	r3, [r7, #20]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20000b60 	.word	0x20000b60
 8006bf8:	20000b5c 	.word	0x20000b5c

08006bfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08e      	sub	sp, #56	; 0x38
 8006c00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c02:	e09d      	b.n	8006d40 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da18      	bge.n	8006c3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c0a:	1d3b      	adds	r3, r7, #4
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	61fb      	str	r3, [r7, #28]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c32:	6850      	ldr	r0, [r2, #4]
 8006c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c36:	6892      	ldr	r2, [r2, #8]
 8006c38:	4611      	mov	r1, r2
 8006c3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	db7d      	blt.n	8006d3e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d004      	beq.n	8006c58 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	3304      	adds	r3, #4
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fd fa96 	bl	8004184 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c58:	463b      	mov	r3, r7
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff ff6c 	bl	8006b38 <prvSampleTimeNow>
 8006c60:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b09      	cmp	r3, #9
 8006c66:	d86b      	bhi.n	8006d40 <prvProcessReceivedCommands+0x144>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <prvProcessReceivedCommands+0x74>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006c99 	.word	0x08006c99
 8006c74:	08006c99 	.word	0x08006c99
 8006c78:	08006c99 	.word	0x08006c99
 8006c7c:	08006d41 	.word	0x08006d41
 8006c80:	08006cf5 	.word	0x08006cf5
 8006c84:	08006d2d 	.word	0x08006d2d
 8006c88:	08006c99 	.word	0x08006c99
 8006c8c:	08006c99 	.word	0x08006c99
 8006c90:	08006d41 	.word	0x08006d41
 8006c94:	08006cf5 	.word	0x08006cf5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	18d1      	adds	r1, r2, r3
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca6:	f7ff ff67 	bl	8006b78 <prvInsertTimerInActiveList>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d047      	beq.n	8006d40 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cb6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d13f      	bne.n	8006d40 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	441a      	add	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2300      	movs	r3, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd2:	f7ff fe1f 	bl	8006914 <xTimerGenericCommand>
 8006cd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d130      	bne.n	8006d40 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	61bb      	str	r3, [r7, #24]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	617b      	str	r3, [r7, #20]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	699a      	ldr	r2, [r3, #24]
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	18d1      	adds	r1, r2, r3
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d26:	f7ff ff27 	bl	8006b78 <prvInsertTimerInActiveList>
					break;
 8006d2a:	e009      	b.n	8006d40 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d104      	bne.n	8006d40 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d38:	f000 fb8c 	bl	8007454 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d3c:	e000      	b.n	8006d40 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d3e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <prvProcessReceivedCommands+0x164>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	1d39      	adds	r1, r7, #4
 8006d46:	2200      	movs	r2, #0
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fd fde9 	bl	8004920 <xQueueReceive>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f47f af57 	bne.w	8006c04 <prvProcessReceivedCommands+0x8>
	}
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	3730      	adds	r7, #48	; 0x30
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000b64 	.word	0x20000b64

08006d64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d6a:	e045      	b.n	8006df8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d6c:	4b2c      	ldr	r3, [pc, #176]	; (8006e20 <prvSwitchTimerLists+0xbc>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d76:	4b2a      	ldr	r3, [pc, #168]	; (8006e20 <prvSwitchTimerLists+0xbc>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3304      	adds	r3, #4
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fd f9fd 	bl	8004184 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d12e      	bne.n	8006df8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4413      	add	r3, r2
 8006da2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d90e      	bls.n	8006dca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006db8:	4b19      	ldr	r3, [pc, #100]	; (8006e20 <prvSwitchTimerLists+0xbc>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	f7fd f9a6 	bl	8004114 <vListInsert>
 8006dc8:	e016      	b.n	8006df8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dca:	2300      	movs	r3, #0
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff fd9d 	bl	8006914 <xTimerGenericCommand>
 8006dda:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	603b      	str	r3, [r7, #0]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006df8:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <prvSwitchTimerLists+0xbc>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1b4      	bne.n	8006d6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e02:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <prvSwitchTimerLists+0xbc>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <prvSwitchTimerLists+0xc0>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a04      	ldr	r2, [pc, #16]	; (8006e20 <prvSwitchTimerLists+0xbc>)
 8006e0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e10:	4a04      	ldr	r2, [pc, #16]	; (8006e24 <prvSwitchTimerLists+0xc0>)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	6013      	str	r3, [r2, #0]
}
 8006e16:	bf00      	nop
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000b5c 	.word	0x20000b5c
 8006e24:	20000b60 	.word	0x20000b60

08006e28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e2e:	f000 f94d 	bl	80070cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e32:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <prvCheckForValidListAndQueue+0x60>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d120      	bne.n	8006e7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e3a:	4814      	ldr	r0, [pc, #80]	; (8006e8c <prvCheckForValidListAndQueue+0x64>)
 8006e3c:	f7fd f91c 	bl	8004078 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e40:	4813      	ldr	r0, [pc, #76]	; (8006e90 <prvCheckForValidListAndQueue+0x68>)
 8006e42:	f7fd f919 	bl	8004078 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e46:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <prvCheckForValidListAndQueue+0x6c>)
 8006e48:	4a10      	ldr	r2, [pc, #64]	; (8006e8c <prvCheckForValidListAndQueue+0x64>)
 8006e4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e4c:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <prvCheckForValidListAndQueue+0x70>)
 8006e4e:	4a10      	ldr	r2, [pc, #64]	; (8006e90 <prvCheckForValidListAndQueue+0x68>)
 8006e50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e52:	2300      	movs	r3, #0
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <prvCheckForValidListAndQueue+0x74>)
 8006e58:	4a11      	ldr	r2, [pc, #68]	; (8006ea0 <prvCheckForValidListAndQueue+0x78>)
 8006e5a:	2110      	movs	r1, #16
 8006e5c:	2004      	movs	r0, #4
 8006e5e:	f7fd fa15 	bl	800428c <xQueueGenericCreateStatic>
 8006e62:	4603      	mov	r3, r0
 8006e64:	4a08      	ldr	r2, [pc, #32]	; (8006e88 <prvCheckForValidListAndQueue+0x60>)
 8006e66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e68:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <prvCheckForValidListAndQueue+0x60>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e70:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <prvCheckForValidListAndQueue+0x60>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	490b      	ldr	r1, [pc, #44]	; (8006ea4 <prvCheckForValidListAndQueue+0x7c>)
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe f938 	bl	80050ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e7c:	f000 f956 	bl	800712c <vPortExitCritical>
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000b64 	.word	0x20000b64
 8006e8c:	20000b34 	.word	0x20000b34
 8006e90:	20000b48 	.word	0x20000b48
 8006e94:	20000b5c 	.word	0x20000b5c
 8006e98:	20000b60 	.word	0x20000b60
 8006e9c:	20000bb0 	.word	0x20000bb0
 8006ea0:	20000b70 	.word	0x20000b70
 8006ea4:	08008938 	.word	0x08008938

08006ea8 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10a      	bne.n	8006ed0 <pvTimerGetTimerID+0x28>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	60fb      	str	r3, [r7, #12]
}
 8006ecc:	bf00      	nop
 8006ece:	e7fe      	b.n	8006ece <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006ed0:	f000 f8fc 	bl	80070cc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006eda:	f000 f927 	bl	800712c <vPortExitCritical>

	return pvReturn;
 8006ede:	693b      	ldr	r3, [r7, #16]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3b04      	subs	r3, #4
 8006ef8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f023 0201 	bic.w	r2, r3, #1
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3b04      	subs	r3, #4
 8006f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f18:	4a08      	ldr	r2, [pc, #32]	; (8006f3c <pxPortInitialiseStack+0x54>)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3b14      	subs	r3, #20
 8006f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3b20      	subs	r3, #32
 8006f2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f30:	68fb      	ldr	r3, [r7, #12]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bc80      	pop	{r7}
 8006f3a:	4770      	bx	lr
 8006f3c:	08006f41 	.word	0x08006f41

08006f40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f4a:	4b12      	ldr	r3, [pc, #72]	; (8006f94 <prvTaskExitError+0x54>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f52:	d00a      	beq.n	8006f6a <prvTaskExitError+0x2a>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	60fb      	str	r3, [r7, #12]
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <prvTaskExitError+0x28>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	60bb      	str	r3, [r7, #8]
}
 8006f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f7e:	bf00      	nop
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0fc      	beq.n	8006f80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	2000000c 	.word	0x2000000c
	...

08006fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fa0:	4b07      	ldr	r3, [pc, #28]	; (8006fc0 <pxCurrentTCBConst2>)
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	6808      	ldr	r0, [r1, #0]
 8006fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006faa:	f380 8809 	msr	PSP, r0
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8811 	msr	BASEPRI, r0
 8006fba:	f04e 0e0d 	orr.w	lr, lr, #13
 8006fbe:	4770      	bx	lr

08006fc0 <pxCurrentTCBConst2>:
 8006fc0:	20000634 	.word	0x20000634
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop

08006fc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006fc8:	4806      	ldr	r0, [pc, #24]	; (8006fe4 <prvPortStartFirstTask+0x1c>)
 8006fca:	6800      	ldr	r0, [r0, #0]
 8006fcc:	6800      	ldr	r0, [r0, #0]
 8006fce:	f380 8808 	msr	MSP, r0
 8006fd2:	b662      	cpsie	i
 8006fd4:	b661      	cpsie	f
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	df00      	svc	0
 8006fe0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fe2:	bf00      	nop
 8006fe4:	e000ed08 	.word	0xe000ed08

08006fe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fee:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <xPortStartScheduler+0xd0>)
 8006ff0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	22ff      	movs	r2, #255	; 0xff
 8006ffe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	b2db      	uxtb	r3, r3
 800700c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007010:	b2da      	uxtb	r2, r3
 8007012:	4b2a      	ldr	r3, [pc, #168]	; (80070bc <xPortStartScheduler+0xd4>)
 8007014:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007016:	4b2a      	ldr	r3, [pc, #168]	; (80070c0 <xPortStartScheduler+0xd8>)
 8007018:	2207      	movs	r2, #7
 800701a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800701c:	e009      	b.n	8007032 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800701e:	4b28      	ldr	r3, [pc, #160]	; (80070c0 <xPortStartScheduler+0xd8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3b01      	subs	r3, #1
 8007024:	4a26      	ldr	r2, [pc, #152]	; (80070c0 <xPortStartScheduler+0xd8>)
 8007026:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	b2db      	uxtb	r3, r3
 8007030:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703a:	2b80      	cmp	r3, #128	; 0x80
 800703c:	d0ef      	beq.n	800701e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800703e:	4b20      	ldr	r3, [pc, #128]	; (80070c0 <xPortStartScheduler+0xd8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f1c3 0307 	rsb	r3, r3, #7
 8007046:	2b04      	cmp	r3, #4
 8007048:	d00a      	beq.n	8007060 <xPortStartScheduler+0x78>
	__asm volatile
 800704a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	60bb      	str	r3, [r7, #8]
}
 800705c:	bf00      	nop
 800705e:	e7fe      	b.n	800705e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007060:	4b17      	ldr	r3, [pc, #92]	; (80070c0 <xPortStartScheduler+0xd8>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	021b      	lsls	r3, r3, #8
 8007066:	4a16      	ldr	r2, [pc, #88]	; (80070c0 <xPortStartScheduler+0xd8>)
 8007068:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800706a:	4b15      	ldr	r3, [pc, #84]	; (80070c0 <xPortStartScheduler+0xd8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007072:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <xPortStartScheduler+0xd8>)
 8007074:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800707e:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <xPortStartScheduler+0xdc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a10      	ldr	r2, [pc, #64]	; (80070c4 <xPortStartScheduler+0xdc>)
 8007084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007088:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800708a:	4b0e      	ldr	r3, [pc, #56]	; (80070c4 <xPortStartScheduler+0xdc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a0d      	ldr	r2, [pc, #52]	; (80070c4 <xPortStartScheduler+0xdc>)
 8007090:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007094:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007096:	f000 f8b9 	bl	800720c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800709a:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <xPortStartScheduler+0xe0>)
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070a0:	f7ff ff92 	bl	8006fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070a4:	f7fe fd00 	bl	8005aa8 <vTaskSwitchContext>
	prvTaskExitError();
 80070a8:	f7ff ff4a 	bl	8006f40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	e000e400 	.word	0xe000e400
 80070bc:	20000c04 	.word	0x20000c04
 80070c0:	20000c08 	.word	0x20000c08
 80070c4:	e000ed20 	.word	0xe000ed20
 80070c8:	2000000c 	.word	0x2000000c

080070cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	607b      	str	r3, [r7, #4]
}
 80070e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070e6:	4b0f      	ldr	r3, [pc, #60]	; (8007124 <vPortEnterCritical+0x58>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	4a0d      	ldr	r2, [pc, #52]	; (8007124 <vPortEnterCritical+0x58>)
 80070ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070f0:	4b0c      	ldr	r3, [pc, #48]	; (8007124 <vPortEnterCritical+0x58>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d10f      	bne.n	8007118 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070f8:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <vPortEnterCritical+0x5c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <vPortEnterCritical+0x4c>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	603b      	str	r3, [r7, #0]
}
 8007114:	bf00      	nop
 8007116:	e7fe      	b.n	8007116 <vPortEnterCritical+0x4a>
	}
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	bc80      	pop	{r7}
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	2000000c 	.word	0x2000000c
 8007128:	e000ed04 	.word	0xe000ed04

0800712c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007132:	4b11      	ldr	r3, [pc, #68]	; (8007178 <vPortExitCritical+0x4c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10a      	bne.n	8007150 <vPortExitCritical+0x24>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	607b      	str	r3, [r7, #4]
}
 800714c:	bf00      	nop
 800714e:	e7fe      	b.n	800714e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007150:	4b09      	ldr	r3, [pc, #36]	; (8007178 <vPortExitCritical+0x4c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	3b01      	subs	r3, #1
 8007156:	4a08      	ldr	r2, [pc, #32]	; (8007178 <vPortExitCritical+0x4c>)
 8007158:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800715a:	4b07      	ldr	r3, [pc, #28]	; (8007178 <vPortExitCritical+0x4c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d105      	bne.n	800716e <vPortExitCritical+0x42>
 8007162:	2300      	movs	r3, #0
 8007164:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	f383 8811 	msr	BASEPRI, r3
}
 800716c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr
 8007178:	2000000c 	.word	0x2000000c
 800717c:	00000000 	.word	0x00000000

08007180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007180:	f3ef 8009 	mrs	r0, PSP
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	4b0d      	ldr	r3, [pc, #52]	; (80071c0 <pxCurrentTCBConst>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007190:	6010      	str	r0, [r2, #0]
 8007192:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007196:	f04f 0050 	mov.w	r0, #80	; 0x50
 800719a:	f380 8811 	msr	BASEPRI, r0
 800719e:	f7fe fc83 	bl	8005aa8 <vTaskSwitchContext>
 80071a2:	f04f 0000 	mov.w	r0, #0
 80071a6:	f380 8811 	msr	BASEPRI, r0
 80071aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80071ae:	6819      	ldr	r1, [r3, #0]
 80071b0:	6808      	ldr	r0, [r1, #0]
 80071b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80071b6:	f380 8809 	msr	PSP, r0
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	4770      	bx	lr

080071c0 <pxCurrentTCBConst>:
 80071c0:	20000634 	.word	0x20000634
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop

080071c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	607b      	str	r3, [r7, #4]
}
 80071e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071e2:	f7fe fbc5 	bl	8005970 <xTaskIncrementTick>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d003      	beq.n	80071f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <SysTick_Handler+0x40>)
 80071ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	2300      	movs	r3, #0
 80071f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	f383 8811 	msr	BASEPRI, r3
}
 80071fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	e000ed04 	.word	0xe000ed04

0800720c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007210:	4b0a      	ldr	r3, [pc, #40]	; (800723c <vPortSetupTimerInterrupt+0x30>)
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007216:	4b0a      	ldr	r3, [pc, #40]	; (8007240 <vPortSetupTimerInterrupt+0x34>)
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800721c:	4b09      	ldr	r3, [pc, #36]	; (8007244 <vPortSetupTimerInterrupt+0x38>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a09      	ldr	r2, [pc, #36]	; (8007248 <vPortSetupTimerInterrupt+0x3c>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	099b      	lsrs	r3, r3, #6
 8007228:	4a08      	ldr	r2, [pc, #32]	; (800724c <vPortSetupTimerInterrupt+0x40>)
 800722a:	3b01      	subs	r3, #1
 800722c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800722e:	4b03      	ldr	r3, [pc, #12]	; (800723c <vPortSetupTimerInterrupt+0x30>)
 8007230:	2207      	movs	r2, #7
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr
 800723c:	e000e010 	.word	0xe000e010
 8007240:	e000e018 	.word	0xe000e018
 8007244:	20000000 	.word	0x20000000
 8007248:	10624dd3 	.word	0x10624dd3
 800724c:	e000e014 	.word	0xe000e014

08007250 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007256:	f3ef 8305 	mrs	r3, IPSR
 800725a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2b0f      	cmp	r3, #15
 8007260:	d914      	bls.n	800728c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007262:	4a16      	ldr	r2, [pc, #88]	; (80072bc <vPortValidateInterruptPriority+0x6c>)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800726c:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <vPortValidateInterruptPriority+0x70>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	7afa      	ldrb	r2, [r7, #11]
 8007272:	429a      	cmp	r2, r3
 8007274:	d20a      	bcs.n	800728c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	607b      	str	r3, [r7, #4]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800728c:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <vPortValidateInterruptPriority+0x74>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007294:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <vPortValidateInterruptPriority+0x78>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d90a      	bls.n	80072b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	603b      	str	r3, [r7, #0]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <vPortValidateInterruptPriority+0x60>
	}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr
 80072bc:	e000e3f0 	.word	0xe000e3f0
 80072c0:	20000c04 	.word	0x20000c04
 80072c4:	e000ed0c 	.word	0xe000ed0c
 80072c8:	20000c08 	.word	0x20000c08

080072cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08a      	sub	sp, #40	; 0x28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072d8:	f7fe fa9e 	bl	8005818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072dc:	4b58      	ldr	r3, [pc, #352]	; (8007440 <pvPortMalloc+0x174>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072e4:	f000 f910 	bl	8007508 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072e8:	4b56      	ldr	r3, [pc, #344]	; (8007444 <pvPortMalloc+0x178>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4013      	ands	r3, r2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 808e 	bne.w	8007412 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d01d      	beq.n	8007338 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80072fc:	2208      	movs	r2, #8
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4413      	add	r3, r2
 8007302:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f003 0307 	and.w	r3, r3, #7
 800730a:	2b00      	cmp	r3, #0
 800730c:	d014      	beq.n	8007338 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f023 0307 	bic.w	r3, r3, #7
 8007314:	3308      	adds	r3, #8
 8007316:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f003 0307 	and.w	r3, r3, #7
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <pvPortMalloc+0x6c>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	617b      	str	r3, [r7, #20]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d069      	beq.n	8007412 <pvPortMalloc+0x146>
 800733e:	4b42      	ldr	r3, [pc, #264]	; (8007448 <pvPortMalloc+0x17c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d864      	bhi.n	8007412 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007348:	4b40      	ldr	r3, [pc, #256]	; (800744c <pvPortMalloc+0x180>)
 800734a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800734c:	4b3f      	ldr	r3, [pc, #252]	; (800744c <pvPortMalloc+0x180>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007352:	e004      	b.n	800735e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	429a      	cmp	r2, r3
 8007366:	d903      	bls.n	8007370 <pvPortMalloc+0xa4>
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1f1      	bne.n	8007354 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007370:	4b33      	ldr	r3, [pc, #204]	; (8007440 <pvPortMalloc+0x174>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007376:	429a      	cmp	r2, r3
 8007378:	d04b      	beq.n	8007412 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2208      	movs	r2, #8
 8007380:	4413      	add	r3, r2
 8007382:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	1ad2      	subs	r2, r2, r3
 8007394:	2308      	movs	r3, #8
 8007396:	005b      	lsls	r3, r3, #1
 8007398:	429a      	cmp	r2, r3
 800739a:	d91f      	bls.n	80073dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800739c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <pvPortMalloc+0xf8>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	613b      	str	r3, [r7, #16]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	1ad2      	subs	r2, r2, r3
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073d6:	69b8      	ldr	r0, [r7, #24]
 80073d8:	f000 f8f8 	bl	80075cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073dc:	4b1a      	ldr	r3, [pc, #104]	; (8007448 <pvPortMalloc+0x17c>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	4a18      	ldr	r2, [pc, #96]	; (8007448 <pvPortMalloc+0x17c>)
 80073e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073ea:	4b17      	ldr	r3, [pc, #92]	; (8007448 <pvPortMalloc+0x17c>)
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	4b18      	ldr	r3, [pc, #96]	; (8007450 <pvPortMalloc+0x184>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d203      	bcs.n	80073fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073f6:	4b14      	ldr	r3, [pc, #80]	; (8007448 <pvPortMalloc+0x17c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a15      	ldr	r2, [pc, #84]	; (8007450 <pvPortMalloc+0x184>)
 80073fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	4b10      	ldr	r3, [pc, #64]	; (8007444 <pvPortMalloc+0x178>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	431a      	orrs	r2, r3
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007412:	f7fe fa0f 	bl	8005834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <pvPortMalloc+0x16a>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60fb      	str	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <pvPortMalloc+0x168>
	return pvReturn;
 8007436:	69fb      	ldr	r3, [r7, #28]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3728      	adds	r7, #40	; 0x28
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	200013f8 	.word	0x200013f8
 8007444:	20001404 	.word	0x20001404
 8007448:	200013fc 	.word	0x200013fc
 800744c:	200013f0 	.word	0x200013f0
 8007450:	20001400 	.word	0x20001400

08007454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d048      	beq.n	80074f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007466:	2308      	movs	r3, #8
 8007468:	425b      	negs	r3, r3
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4413      	add	r3, r2
 800746e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	4b21      	ldr	r3, [pc, #132]	; (8007500 <vPortFree+0xac>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4013      	ands	r3, r2
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <vPortFree+0x44>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	60fb      	str	r3, [r7, #12]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <vPortFree+0x62>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	60bb      	str	r3, [r7, #8]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	4b11      	ldr	r3, [pc, #68]	; (8007500 <vPortFree+0xac>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4013      	ands	r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d019      	beq.n	80074f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d115      	bne.n	80074f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <vPortFree+0xac>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	43db      	mvns	r3, r3
 80074d6:	401a      	ands	r2, r3
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074dc:	f7fe f99c 	bl	8005818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	4b07      	ldr	r3, [pc, #28]	; (8007504 <vPortFree+0xb0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4413      	add	r3, r2
 80074ea:	4a06      	ldr	r2, [pc, #24]	; (8007504 <vPortFree+0xb0>)
 80074ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074ee:	6938      	ldr	r0, [r7, #16]
 80074f0:	f000 f86c 	bl	80075cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80074f4:	f7fe f99e 	bl	8005834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074f8:	bf00      	nop
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20001404 	.word	0x20001404
 8007504:	200013fc 	.word	0x200013fc

08007508 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800750e:	f240 73e2 	movw	r3, #2018	; 0x7e2
 8007512:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007514:	4b27      	ldr	r3, [pc, #156]	; (80075b4 <prvHeapInit+0xac>)
 8007516:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00c      	beq.n	800753c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3307      	adds	r3, #7
 8007526:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0307 	bic.w	r3, r3, #7
 800752e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	4a1f      	ldr	r2, [pc, #124]	; (80075b4 <prvHeapInit+0xac>)
 8007538:	4413      	add	r3, r2
 800753a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007540:	4a1d      	ldr	r2, [pc, #116]	; (80075b8 <prvHeapInit+0xb0>)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007546:	4b1c      	ldr	r3, [pc, #112]	; (80075b8 <prvHeapInit+0xb0>)
 8007548:	2200      	movs	r2, #0
 800754a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	4413      	add	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007554:	2208      	movs	r2, #8
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	1a9b      	subs	r3, r3, r2
 800755a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0307 	bic.w	r3, r3, #7
 8007562:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4a15      	ldr	r2, [pc, #84]	; (80075bc <prvHeapInit+0xb4>)
 8007568:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800756a:	4b14      	ldr	r3, [pc, #80]	; (80075bc <prvHeapInit+0xb4>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2200      	movs	r2, #0
 8007570:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007572:	4b12      	ldr	r3, [pc, #72]	; (80075bc <prvHeapInit+0xb4>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	1ad2      	subs	r2, r2, r3
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007588:	4b0c      	ldr	r3, [pc, #48]	; (80075bc <prvHeapInit+0xb4>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	4a0a      	ldr	r2, [pc, #40]	; (80075c0 <prvHeapInit+0xb8>)
 8007596:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	4a09      	ldr	r2, [pc, #36]	; (80075c4 <prvHeapInit+0xbc>)
 800759e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075a0:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <prvHeapInit+0xc0>)
 80075a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075a6:	601a      	str	r2, [r3, #0]
}
 80075a8:	bf00      	nop
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000c0c 	.word	0x20000c0c
 80075b8:	200013f0 	.word	0x200013f0
 80075bc:	200013f8 	.word	0x200013f8
 80075c0:	20001400 	.word	0x20001400
 80075c4:	200013fc 	.word	0x200013fc
 80075c8:	20001404 	.word	0x20001404

080075cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075d4:	4b27      	ldr	r3, [pc, #156]	; (8007674 <prvInsertBlockIntoFreeList+0xa8>)
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	e002      	b.n	80075e0 <prvInsertBlockIntoFreeList+0x14>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d8f7      	bhi.n	80075da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	4413      	add	r3, r2
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d108      	bne.n	800760e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	441a      	add	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	441a      	add	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d118      	bne.n	8007654 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <prvInsertBlockIntoFreeList+0xac>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d00d      	beq.n	800764a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	441a      	add	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	e008      	b.n	800765c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800764a:	4b0b      	ldr	r3, [pc, #44]	; (8007678 <prvInsertBlockIntoFreeList+0xac>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	e003      	b.n	800765c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d002      	beq.n	800766a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr
 8007674:	200013f0 	.word	0x200013f0
 8007678:	200013f8 	.word	0x200013f8

0800767c <__errno>:
 800767c:	4b01      	ldr	r3, [pc, #4]	; (8007684 <__errno+0x8>)
 800767e:	6818      	ldr	r0, [r3, #0]
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20000010 	.word	0x20000010

08007688 <std>:
 8007688:	2300      	movs	r3, #0
 800768a:	b510      	push	{r4, lr}
 800768c:	4604      	mov	r4, r0
 800768e:	e9c0 3300 	strd	r3, r3, [r0]
 8007692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007696:	6083      	str	r3, [r0, #8]
 8007698:	8181      	strh	r1, [r0, #12]
 800769a:	6643      	str	r3, [r0, #100]	; 0x64
 800769c:	81c2      	strh	r2, [r0, #14]
 800769e:	6183      	str	r3, [r0, #24]
 80076a0:	4619      	mov	r1, r3
 80076a2:	2208      	movs	r2, #8
 80076a4:	305c      	adds	r0, #92	; 0x5c
 80076a6:	f000 f91f 	bl	80078e8 <memset>
 80076aa:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <std+0x38>)
 80076ac:	6224      	str	r4, [r4, #32]
 80076ae:	6263      	str	r3, [r4, #36]	; 0x24
 80076b0:	4b04      	ldr	r3, [pc, #16]	; (80076c4 <std+0x3c>)
 80076b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80076b4:	4b04      	ldr	r3, [pc, #16]	; (80076c8 <std+0x40>)
 80076b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076b8:	4b04      	ldr	r3, [pc, #16]	; (80076cc <std+0x44>)
 80076ba:	6323      	str	r3, [r4, #48]	; 0x30
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	bf00      	nop
 80076c0:	08007c55 	.word	0x08007c55
 80076c4:	08007c77 	.word	0x08007c77
 80076c8:	08007caf 	.word	0x08007caf
 80076cc:	08007cd3 	.word	0x08007cd3

080076d0 <_cleanup_r>:
 80076d0:	4901      	ldr	r1, [pc, #4]	; (80076d8 <_cleanup_r+0x8>)
 80076d2:	f000 b8af 	b.w	8007834 <_fwalk_reent>
 80076d6:	bf00      	nop
 80076d8:	08007fad 	.word	0x08007fad

080076dc <__sfmoreglue>:
 80076dc:	b570      	push	{r4, r5, r6, lr}
 80076de:	2568      	movs	r5, #104	; 0x68
 80076e0:	1e4a      	subs	r2, r1, #1
 80076e2:	4355      	muls	r5, r2
 80076e4:	460e      	mov	r6, r1
 80076e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076ea:	f000 f951 	bl	8007990 <_malloc_r>
 80076ee:	4604      	mov	r4, r0
 80076f0:	b140      	cbz	r0, 8007704 <__sfmoreglue+0x28>
 80076f2:	2100      	movs	r1, #0
 80076f4:	e9c0 1600 	strd	r1, r6, [r0]
 80076f8:	300c      	adds	r0, #12
 80076fa:	60a0      	str	r0, [r4, #8]
 80076fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007700:	f000 f8f2 	bl	80078e8 <memset>
 8007704:	4620      	mov	r0, r4
 8007706:	bd70      	pop	{r4, r5, r6, pc}

08007708 <__sfp_lock_acquire>:
 8007708:	4801      	ldr	r0, [pc, #4]	; (8007710 <__sfp_lock_acquire+0x8>)
 800770a:	f7f9 bd1f 	b.w	800114c <__retarget_lock_acquire_recursive>
 800770e:	bf00      	nop
 8007710:	200000a0 	.word	0x200000a0

08007714 <__sfp_lock_release>:
 8007714:	4801      	ldr	r0, [pc, #4]	; (800771c <__sfp_lock_release+0x8>)
 8007716:	f7f9 bd2d 	b.w	8001174 <__retarget_lock_release_recursive>
 800771a:	bf00      	nop
 800771c:	200000a0 	.word	0x200000a0

08007720 <__sinit_lock_acquire>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__sinit_lock_acquire+0x8>)
 8007722:	f7f9 bd13 	b.w	800114c <__retarget_lock_acquire_recursive>
 8007726:	bf00      	nop
 8007728:	20000094 	.word	0x20000094

0800772c <__sinit_lock_release>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__sinit_lock_release+0x8>)
 800772e:	f7f9 bd21 	b.w	8001174 <__retarget_lock_release_recursive>
 8007732:	bf00      	nop
 8007734:	20000094 	.word	0x20000094

08007738 <__sinit>:
 8007738:	b510      	push	{r4, lr}
 800773a:	4604      	mov	r4, r0
 800773c:	f7ff fff0 	bl	8007720 <__sinit_lock_acquire>
 8007740:	69a3      	ldr	r3, [r4, #24]
 8007742:	b11b      	cbz	r3, 800774c <__sinit+0x14>
 8007744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007748:	f7ff bff0 	b.w	800772c <__sinit_lock_release>
 800774c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007750:	6523      	str	r3, [r4, #80]	; 0x50
 8007752:	4b13      	ldr	r3, [pc, #76]	; (80077a0 <__sinit+0x68>)
 8007754:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <__sinit+0x6c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	62a2      	str	r2, [r4, #40]	; 0x28
 800775a:	42a3      	cmp	r3, r4
 800775c:	bf08      	it	eq
 800775e:	2301      	moveq	r3, #1
 8007760:	4620      	mov	r0, r4
 8007762:	bf08      	it	eq
 8007764:	61a3      	streq	r3, [r4, #24]
 8007766:	f000 f81f 	bl	80077a8 <__sfp>
 800776a:	6060      	str	r0, [r4, #4]
 800776c:	4620      	mov	r0, r4
 800776e:	f000 f81b 	bl	80077a8 <__sfp>
 8007772:	60a0      	str	r0, [r4, #8]
 8007774:	4620      	mov	r0, r4
 8007776:	f000 f817 	bl	80077a8 <__sfp>
 800777a:	2200      	movs	r2, #0
 800777c:	2104      	movs	r1, #4
 800777e:	60e0      	str	r0, [r4, #12]
 8007780:	6860      	ldr	r0, [r4, #4]
 8007782:	f7ff ff81 	bl	8007688 <std>
 8007786:	2201      	movs	r2, #1
 8007788:	2109      	movs	r1, #9
 800778a:	68a0      	ldr	r0, [r4, #8]
 800778c:	f7ff ff7c 	bl	8007688 <std>
 8007790:	2202      	movs	r2, #2
 8007792:	2112      	movs	r1, #18
 8007794:	68e0      	ldr	r0, [r4, #12]
 8007796:	f7ff ff77 	bl	8007688 <std>
 800779a:	2301      	movs	r3, #1
 800779c:	61a3      	str	r3, [r4, #24]
 800779e:	e7d1      	b.n	8007744 <__sinit+0xc>
 80077a0:	08008b2c 	.word	0x08008b2c
 80077a4:	080076d1 	.word	0x080076d1

080077a8 <__sfp>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	4607      	mov	r7, r0
 80077ac:	f7ff ffac 	bl	8007708 <__sfp_lock_acquire>
 80077b0:	4b1e      	ldr	r3, [pc, #120]	; (800782c <__sfp+0x84>)
 80077b2:	681e      	ldr	r6, [r3, #0]
 80077b4:	69b3      	ldr	r3, [r6, #24]
 80077b6:	b913      	cbnz	r3, 80077be <__sfp+0x16>
 80077b8:	4630      	mov	r0, r6
 80077ba:	f7ff ffbd 	bl	8007738 <__sinit>
 80077be:	3648      	adds	r6, #72	; 0x48
 80077c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	d503      	bpl.n	80077d0 <__sfp+0x28>
 80077c8:	6833      	ldr	r3, [r6, #0]
 80077ca:	b30b      	cbz	r3, 8007810 <__sfp+0x68>
 80077cc:	6836      	ldr	r6, [r6, #0]
 80077ce:	e7f7      	b.n	80077c0 <__sfp+0x18>
 80077d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077d4:	b9d5      	cbnz	r5, 800780c <__sfp+0x64>
 80077d6:	4b16      	ldr	r3, [pc, #88]	; (8007830 <__sfp+0x88>)
 80077d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077dc:	60e3      	str	r3, [r4, #12]
 80077de:	6665      	str	r5, [r4, #100]	; 0x64
 80077e0:	f7f9 fc8e 	bl	8001100 <__retarget_lock_init_recursive>
 80077e4:	f7ff ff96 	bl	8007714 <__sfp_lock_release>
 80077e8:	2208      	movs	r2, #8
 80077ea:	4629      	mov	r1, r5
 80077ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077f4:	6025      	str	r5, [r4, #0]
 80077f6:	61a5      	str	r5, [r4, #24]
 80077f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077fc:	f000 f874 	bl	80078e8 <memset>
 8007800:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007804:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007808:	4620      	mov	r0, r4
 800780a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800780c:	3468      	adds	r4, #104	; 0x68
 800780e:	e7d9      	b.n	80077c4 <__sfp+0x1c>
 8007810:	2104      	movs	r1, #4
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ff62 	bl	80076dc <__sfmoreglue>
 8007818:	4604      	mov	r4, r0
 800781a:	6030      	str	r0, [r6, #0]
 800781c:	2800      	cmp	r0, #0
 800781e:	d1d5      	bne.n	80077cc <__sfp+0x24>
 8007820:	f7ff ff78 	bl	8007714 <__sfp_lock_release>
 8007824:	230c      	movs	r3, #12
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	e7ee      	b.n	8007808 <__sfp+0x60>
 800782a:	bf00      	nop
 800782c:	08008b2c 	.word	0x08008b2c
 8007830:	ffff0001 	.word	0xffff0001

08007834 <_fwalk_reent>:
 8007834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007838:	4606      	mov	r6, r0
 800783a:	4688      	mov	r8, r1
 800783c:	2700      	movs	r7, #0
 800783e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007842:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007846:	f1b9 0901 	subs.w	r9, r9, #1
 800784a:	d505      	bpl.n	8007858 <_fwalk_reent+0x24>
 800784c:	6824      	ldr	r4, [r4, #0]
 800784e:	2c00      	cmp	r4, #0
 8007850:	d1f7      	bne.n	8007842 <_fwalk_reent+0xe>
 8007852:	4638      	mov	r0, r7
 8007854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007858:	89ab      	ldrh	r3, [r5, #12]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d907      	bls.n	800786e <_fwalk_reent+0x3a>
 800785e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007862:	3301      	adds	r3, #1
 8007864:	d003      	beq.n	800786e <_fwalk_reent+0x3a>
 8007866:	4629      	mov	r1, r5
 8007868:	4630      	mov	r0, r6
 800786a:	47c0      	blx	r8
 800786c:	4307      	orrs	r7, r0
 800786e:	3568      	adds	r5, #104	; 0x68
 8007870:	e7e9      	b.n	8007846 <_fwalk_reent+0x12>
	...

08007874 <__libc_init_array>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	2600      	movs	r6, #0
 8007878:	4d0c      	ldr	r5, [pc, #48]	; (80078ac <__libc_init_array+0x38>)
 800787a:	4c0d      	ldr	r4, [pc, #52]	; (80078b0 <__libc_init_array+0x3c>)
 800787c:	1b64      	subs	r4, r4, r5
 800787e:	10a4      	asrs	r4, r4, #2
 8007880:	42a6      	cmp	r6, r4
 8007882:	d109      	bne.n	8007898 <__libc_init_array+0x24>
 8007884:	f000 ff80 	bl	8008788 <_init>
 8007888:	2600      	movs	r6, #0
 800788a:	4d0a      	ldr	r5, [pc, #40]	; (80078b4 <__libc_init_array+0x40>)
 800788c:	4c0a      	ldr	r4, [pc, #40]	; (80078b8 <__libc_init_array+0x44>)
 800788e:	1b64      	subs	r4, r4, r5
 8007890:	10a4      	asrs	r4, r4, #2
 8007892:	42a6      	cmp	r6, r4
 8007894:	d105      	bne.n	80078a2 <__libc_init_array+0x2e>
 8007896:	bd70      	pop	{r4, r5, r6, pc}
 8007898:	f855 3b04 	ldr.w	r3, [r5], #4
 800789c:	4798      	blx	r3
 800789e:	3601      	adds	r6, #1
 80078a0:	e7ee      	b.n	8007880 <__libc_init_array+0xc>
 80078a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a6:	4798      	blx	r3
 80078a8:	3601      	adds	r6, #1
 80078aa:	e7f2      	b.n	8007892 <__libc_init_array+0x1e>
 80078ac:	08008b64 	.word	0x08008b64
 80078b0:	08008b64 	.word	0x08008b64
 80078b4:	08008b64 	.word	0x08008b64
 80078b8:	08008b68 	.word	0x08008b68

080078bc <malloc>:
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <malloc+0xc>)
 80078be:	4601      	mov	r1, r0
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f000 b865 	b.w	8007990 <_malloc_r>
 80078c6:	bf00      	nop
 80078c8:	20000010 	.word	0x20000010

080078cc <memcpy>:
 80078cc:	440a      	add	r2, r1
 80078ce:	4291      	cmp	r1, r2
 80078d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078d4:	d100      	bne.n	80078d8 <memcpy+0xc>
 80078d6:	4770      	bx	lr
 80078d8:	b510      	push	{r4, lr}
 80078da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078de:	4291      	cmp	r1, r2
 80078e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078e4:	d1f9      	bne.n	80078da <memcpy+0xe>
 80078e6:	bd10      	pop	{r4, pc}

080078e8 <memset>:
 80078e8:	4603      	mov	r3, r0
 80078ea:	4402      	add	r2, r0
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d100      	bne.n	80078f2 <memset+0xa>
 80078f0:	4770      	bx	lr
 80078f2:	f803 1b01 	strb.w	r1, [r3], #1
 80078f6:	e7f9      	b.n	80078ec <memset+0x4>

080078f8 <_free_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4605      	mov	r5, r0
 80078fc:	2900      	cmp	r1, #0
 80078fe:	d043      	beq.n	8007988 <_free_r+0x90>
 8007900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007904:	1f0c      	subs	r4, r1, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	bfb8      	it	lt
 800790a:	18e4      	addlt	r4, r4, r3
 800790c:	f000 fc00 	bl	8008110 <__malloc_lock>
 8007910:	4a1e      	ldr	r2, [pc, #120]	; (800798c <_free_r+0x94>)
 8007912:	6813      	ldr	r3, [r2, #0]
 8007914:	4610      	mov	r0, r2
 8007916:	b933      	cbnz	r3, 8007926 <_free_r+0x2e>
 8007918:	6063      	str	r3, [r4, #4]
 800791a:	6014      	str	r4, [r2, #0]
 800791c:	4628      	mov	r0, r5
 800791e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007922:	f000 bbfb 	b.w	800811c <__malloc_unlock>
 8007926:	42a3      	cmp	r3, r4
 8007928:	d90a      	bls.n	8007940 <_free_r+0x48>
 800792a:	6821      	ldr	r1, [r4, #0]
 800792c:	1862      	adds	r2, r4, r1
 800792e:	4293      	cmp	r3, r2
 8007930:	bf01      	itttt	eq
 8007932:	681a      	ldreq	r2, [r3, #0]
 8007934:	685b      	ldreq	r3, [r3, #4]
 8007936:	1852      	addeq	r2, r2, r1
 8007938:	6022      	streq	r2, [r4, #0]
 800793a:	6063      	str	r3, [r4, #4]
 800793c:	6004      	str	r4, [r0, #0]
 800793e:	e7ed      	b.n	800791c <_free_r+0x24>
 8007940:	461a      	mov	r2, r3
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	b10b      	cbz	r3, 800794a <_free_r+0x52>
 8007946:	42a3      	cmp	r3, r4
 8007948:	d9fa      	bls.n	8007940 <_free_r+0x48>
 800794a:	6811      	ldr	r1, [r2, #0]
 800794c:	1850      	adds	r0, r2, r1
 800794e:	42a0      	cmp	r0, r4
 8007950:	d10b      	bne.n	800796a <_free_r+0x72>
 8007952:	6820      	ldr	r0, [r4, #0]
 8007954:	4401      	add	r1, r0
 8007956:	1850      	adds	r0, r2, r1
 8007958:	4283      	cmp	r3, r0
 800795a:	6011      	str	r1, [r2, #0]
 800795c:	d1de      	bne.n	800791c <_free_r+0x24>
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	4401      	add	r1, r0
 8007964:	6011      	str	r1, [r2, #0]
 8007966:	6053      	str	r3, [r2, #4]
 8007968:	e7d8      	b.n	800791c <_free_r+0x24>
 800796a:	d902      	bls.n	8007972 <_free_r+0x7a>
 800796c:	230c      	movs	r3, #12
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	e7d4      	b.n	800791c <_free_r+0x24>
 8007972:	6820      	ldr	r0, [r4, #0]
 8007974:	1821      	adds	r1, r4, r0
 8007976:	428b      	cmp	r3, r1
 8007978:	bf01      	itttt	eq
 800797a:	6819      	ldreq	r1, [r3, #0]
 800797c:	685b      	ldreq	r3, [r3, #4]
 800797e:	1809      	addeq	r1, r1, r0
 8007980:	6021      	streq	r1, [r4, #0]
 8007982:	6063      	str	r3, [r4, #4]
 8007984:	6054      	str	r4, [r2, #4]
 8007986:	e7c9      	b.n	800791c <_free_r+0x24>
 8007988:	bd38      	pop	{r3, r4, r5, pc}
 800798a:	bf00      	nop
 800798c:	20001408 	.word	0x20001408

08007990 <_malloc_r>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	1ccd      	adds	r5, r1, #3
 8007994:	f025 0503 	bic.w	r5, r5, #3
 8007998:	3508      	adds	r5, #8
 800799a:	2d0c      	cmp	r5, #12
 800799c:	bf38      	it	cc
 800799e:	250c      	movcc	r5, #12
 80079a0:	2d00      	cmp	r5, #0
 80079a2:	4606      	mov	r6, r0
 80079a4:	db01      	blt.n	80079aa <_malloc_r+0x1a>
 80079a6:	42a9      	cmp	r1, r5
 80079a8:	d903      	bls.n	80079b2 <_malloc_r+0x22>
 80079aa:	230c      	movs	r3, #12
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	2000      	movs	r0, #0
 80079b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b2:	f000 fbad 	bl	8008110 <__malloc_lock>
 80079b6:	4921      	ldr	r1, [pc, #132]	; (8007a3c <_malloc_r+0xac>)
 80079b8:	680a      	ldr	r2, [r1, #0]
 80079ba:	4614      	mov	r4, r2
 80079bc:	b99c      	cbnz	r4, 80079e6 <_malloc_r+0x56>
 80079be:	4f20      	ldr	r7, [pc, #128]	; (8007a40 <_malloc_r+0xb0>)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	b923      	cbnz	r3, 80079ce <_malloc_r+0x3e>
 80079c4:	4621      	mov	r1, r4
 80079c6:	4630      	mov	r0, r6
 80079c8:	f000 f934 	bl	8007c34 <_sbrk_r>
 80079cc:	6038      	str	r0, [r7, #0]
 80079ce:	4629      	mov	r1, r5
 80079d0:	4630      	mov	r0, r6
 80079d2:	f000 f92f 	bl	8007c34 <_sbrk_r>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	d123      	bne.n	8007a22 <_malloc_r+0x92>
 80079da:	230c      	movs	r3, #12
 80079dc:	4630      	mov	r0, r6
 80079de:	6033      	str	r3, [r6, #0]
 80079e0:	f000 fb9c 	bl	800811c <__malloc_unlock>
 80079e4:	e7e3      	b.n	80079ae <_malloc_r+0x1e>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	1b5b      	subs	r3, r3, r5
 80079ea:	d417      	bmi.n	8007a1c <_malloc_r+0x8c>
 80079ec:	2b0b      	cmp	r3, #11
 80079ee:	d903      	bls.n	80079f8 <_malloc_r+0x68>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	441c      	add	r4, r3
 80079f4:	6025      	str	r5, [r4, #0]
 80079f6:	e004      	b.n	8007a02 <_malloc_r+0x72>
 80079f8:	6863      	ldr	r3, [r4, #4]
 80079fa:	42a2      	cmp	r2, r4
 80079fc:	bf0c      	ite	eq
 80079fe:	600b      	streq	r3, [r1, #0]
 8007a00:	6053      	strne	r3, [r2, #4]
 8007a02:	4630      	mov	r0, r6
 8007a04:	f000 fb8a 	bl	800811c <__malloc_unlock>
 8007a08:	f104 000b 	add.w	r0, r4, #11
 8007a0c:	1d23      	adds	r3, r4, #4
 8007a0e:	f020 0007 	bic.w	r0, r0, #7
 8007a12:	1ac2      	subs	r2, r0, r3
 8007a14:	d0cc      	beq.n	80079b0 <_malloc_r+0x20>
 8007a16:	1a1b      	subs	r3, r3, r0
 8007a18:	50a3      	str	r3, [r4, r2]
 8007a1a:	e7c9      	b.n	80079b0 <_malloc_r+0x20>
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	6864      	ldr	r4, [r4, #4]
 8007a20:	e7cc      	b.n	80079bc <_malloc_r+0x2c>
 8007a22:	1cc4      	adds	r4, r0, #3
 8007a24:	f024 0403 	bic.w	r4, r4, #3
 8007a28:	42a0      	cmp	r0, r4
 8007a2a:	d0e3      	beq.n	80079f4 <_malloc_r+0x64>
 8007a2c:	1a21      	subs	r1, r4, r0
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f000 f900 	bl	8007c34 <_sbrk_r>
 8007a34:	3001      	adds	r0, #1
 8007a36:	d1dd      	bne.n	80079f4 <_malloc_r+0x64>
 8007a38:	e7cf      	b.n	80079da <_malloc_r+0x4a>
 8007a3a:	bf00      	nop
 8007a3c:	20001408 	.word	0x20001408
 8007a40:	2000140c 	.word	0x2000140c

08007a44 <iprintf>:
 8007a44:	b40f      	push	{r0, r1, r2, r3}
 8007a46:	4b0a      	ldr	r3, [pc, #40]	; (8007a70 <iprintf+0x2c>)
 8007a48:	b513      	push	{r0, r1, r4, lr}
 8007a4a:	681c      	ldr	r4, [r3, #0]
 8007a4c:	b124      	cbz	r4, 8007a58 <iprintf+0x14>
 8007a4e:	69a3      	ldr	r3, [r4, #24]
 8007a50:	b913      	cbnz	r3, 8007a58 <iprintf+0x14>
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7ff fe70 	bl	8007738 <__sinit>
 8007a58:	ab05      	add	r3, sp, #20
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	9a04      	ldr	r2, [sp, #16]
 8007a5e:	68a1      	ldr	r1, [r4, #8]
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	f000 fb89 	bl	8008178 <_vfiprintf_r>
 8007a66:	b002      	add	sp, #8
 8007a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a6c:	b004      	add	sp, #16
 8007a6e:	4770      	bx	lr
 8007a70:	20000010 	.word	0x20000010

08007a74 <_puts_r>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	460e      	mov	r6, r1
 8007a78:	4605      	mov	r5, r0
 8007a7a:	b118      	cbz	r0, 8007a84 <_puts_r+0x10>
 8007a7c:	6983      	ldr	r3, [r0, #24]
 8007a7e:	b90b      	cbnz	r3, 8007a84 <_puts_r+0x10>
 8007a80:	f7ff fe5a 	bl	8007738 <__sinit>
 8007a84:	69ab      	ldr	r3, [r5, #24]
 8007a86:	68ac      	ldr	r4, [r5, #8]
 8007a88:	b913      	cbnz	r3, 8007a90 <_puts_r+0x1c>
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	f7ff fe54 	bl	8007738 <__sinit>
 8007a90:	4b2c      	ldr	r3, [pc, #176]	; (8007b44 <_puts_r+0xd0>)
 8007a92:	429c      	cmp	r4, r3
 8007a94:	d120      	bne.n	8007ad8 <_puts_r+0x64>
 8007a96:	686c      	ldr	r4, [r5, #4]
 8007a98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a9a:	07db      	lsls	r3, r3, #31
 8007a9c:	d405      	bmi.n	8007aaa <_puts_r+0x36>
 8007a9e:	89a3      	ldrh	r3, [r4, #12]
 8007aa0:	0598      	lsls	r0, r3, #22
 8007aa2:	d402      	bmi.n	8007aaa <_puts_r+0x36>
 8007aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aa6:	f7f9 fb51 	bl	800114c <__retarget_lock_acquire_recursive>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	0719      	lsls	r1, r3, #28
 8007aae:	d51d      	bpl.n	8007aec <_puts_r+0x78>
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	b1db      	cbz	r3, 8007aec <_puts_r+0x78>
 8007ab4:	3e01      	subs	r6, #1
 8007ab6:	68a3      	ldr	r3, [r4, #8]
 8007ab8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007abc:	3b01      	subs	r3, #1
 8007abe:	60a3      	str	r3, [r4, #8]
 8007ac0:	bb39      	cbnz	r1, 8007b12 <_puts_r+0x9e>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	da38      	bge.n	8007b38 <_puts_r+0xc4>
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	210a      	movs	r1, #10
 8007aca:	4628      	mov	r0, r5
 8007acc:	f000 f906 	bl	8007cdc <__swbuf_r>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d011      	beq.n	8007af8 <_puts_r+0x84>
 8007ad4:	250a      	movs	r5, #10
 8007ad6:	e011      	b.n	8007afc <_puts_r+0x88>
 8007ad8:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <_puts_r+0xd4>)
 8007ada:	429c      	cmp	r4, r3
 8007adc:	d101      	bne.n	8007ae2 <_puts_r+0x6e>
 8007ade:	68ac      	ldr	r4, [r5, #8]
 8007ae0:	e7da      	b.n	8007a98 <_puts_r+0x24>
 8007ae2:	4b1a      	ldr	r3, [pc, #104]	; (8007b4c <_puts_r+0xd8>)
 8007ae4:	429c      	cmp	r4, r3
 8007ae6:	bf08      	it	eq
 8007ae8:	68ec      	ldreq	r4, [r5, #12]
 8007aea:	e7d5      	b.n	8007a98 <_puts_r+0x24>
 8007aec:	4621      	mov	r1, r4
 8007aee:	4628      	mov	r0, r5
 8007af0:	f000 f958 	bl	8007da4 <__swsetup_r>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d0dd      	beq.n	8007ab4 <_puts_r+0x40>
 8007af8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007afc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007afe:	07da      	lsls	r2, r3, #31
 8007b00:	d405      	bmi.n	8007b0e <_puts_r+0x9a>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	059b      	lsls	r3, r3, #22
 8007b06:	d402      	bmi.n	8007b0e <_puts_r+0x9a>
 8007b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b0a:	f7f9 fb33 	bl	8001174 <__retarget_lock_release_recursive>
 8007b0e:	4628      	mov	r0, r5
 8007b10:	bd70      	pop	{r4, r5, r6, pc}
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	da04      	bge.n	8007b20 <_puts_r+0xac>
 8007b16:	69a2      	ldr	r2, [r4, #24]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	dc06      	bgt.n	8007b2a <_puts_r+0xb6>
 8007b1c:	290a      	cmp	r1, #10
 8007b1e:	d004      	beq.n	8007b2a <_puts_r+0xb6>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	1c5a      	adds	r2, r3, #1
 8007b24:	6022      	str	r2, [r4, #0]
 8007b26:	7019      	strb	r1, [r3, #0]
 8007b28:	e7c5      	b.n	8007ab6 <_puts_r+0x42>
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f000 f8d5 	bl	8007cdc <__swbuf_r>
 8007b32:	3001      	adds	r0, #1
 8007b34:	d1bf      	bne.n	8007ab6 <_puts_r+0x42>
 8007b36:	e7df      	b.n	8007af8 <_puts_r+0x84>
 8007b38:	250a      	movs	r5, #10
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	6022      	str	r2, [r4, #0]
 8007b40:	701d      	strb	r5, [r3, #0]
 8007b42:	e7db      	b.n	8007afc <_puts_r+0x88>
 8007b44:	08008aec 	.word	0x08008aec
 8007b48:	08008b0c 	.word	0x08008b0c
 8007b4c:	08008acc 	.word	0x08008acc

08007b50 <puts>:
 8007b50:	4b02      	ldr	r3, [pc, #8]	; (8007b5c <puts+0xc>)
 8007b52:	4601      	mov	r1, r0
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	f7ff bf8d 	b.w	8007a74 <_puts_r>
 8007b5a:	bf00      	nop
 8007b5c:	20000010 	.word	0x20000010

08007b60 <cleanup_glue>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	460c      	mov	r4, r1
 8007b64:	6809      	ldr	r1, [r1, #0]
 8007b66:	4605      	mov	r5, r0
 8007b68:	b109      	cbz	r1, 8007b6e <cleanup_glue+0xe>
 8007b6a:	f7ff fff9 	bl	8007b60 <cleanup_glue>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b76:	f7ff bebf 	b.w	80078f8 <_free_r>
	...

08007b7c <_reclaim_reent>:
 8007b7c:	4b2c      	ldr	r3, [pc, #176]	; (8007c30 <_reclaim_reent+0xb4>)
 8007b7e:	b570      	push	{r4, r5, r6, lr}
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4604      	mov	r4, r0
 8007b84:	4283      	cmp	r3, r0
 8007b86:	d051      	beq.n	8007c2c <_reclaim_reent+0xb0>
 8007b88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007b8a:	b143      	cbz	r3, 8007b9e <_reclaim_reent+0x22>
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d14a      	bne.n	8007c28 <_reclaim_reent+0xac>
 8007b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b94:	6819      	ldr	r1, [r3, #0]
 8007b96:	b111      	cbz	r1, 8007b9e <_reclaim_reent+0x22>
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f7ff fead 	bl	80078f8 <_free_r>
 8007b9e:	6961      	ldr	r1, [r4, #20]
 8007ba0:	b111      	cbz	r1, 8007ba8 <_reclaim_reent+0x2c>
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f7ff fea8 	bl	80078f8 <_free_r>
 8007ba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007baa:	b111      	cbz	r1, 8007bb2 <_reclaim_reent+0x36>
 8007bac:	4620      	mov	r0, r4
 8007bae:	f7ff fea3 	bl	80078f8 <_free_r>
 8007bb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007bb4:	b111      	cbz	r1, 8007bbc <_reclaim_reent+0x40>
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f7ff fe9e 	bl	80078f8 <_free_r>
 8007bbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007bbe:	b111      	cbz	r1, 8007bc6 <_reclaim_reent+0x4a>
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f7ff fe99 	bl	80078f8 <_free_r>
 8007bc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007bc8:	b111      	cbz	r1, 8007bd0 <_reclaim_reent+0x54>
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f7ff fe94 	bl	80078f8 <_free_r>
 8007bd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007bd2:	b111      	cbz	r1, 8007bda <_reclaim_reent+0x5e>
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f7ff fe8f 	bl	80078f8 <_free_r>
 8007bda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007bdc:	b111      	cbz	r1, 8007be4 <_reclaim_reent+0x68>
 8007bde:	4620      	mov	r0, r4
 8007be0:	f7ff fe8a 	bl	80078f8 <_free_r>
 8007be4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007be6:	b111      	cbz	r1, 8007bee <_reclaim_reent+0x72>
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7ff fe85 	bl	80078f8 <_free_r>
 8007bee:	69a3      	ldr	r3, [r4, #24]
 8007bf0:	b1e3      	cbz	r3, 8007c2c <_reclaim_reent+0xb0>
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007bf6:	4798      	blx	r3
 8007bf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007bfa:	b1b9      	cbz	r1, 8007c2c <_reclaim_reent+0xb0>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c02:	f7ff bfad 	b.w	8007b60 <cleanup_glue>
 8007c06:	5949      	ldr	r1, [r1, r5]
 8007c08:	b941      	cbnz	r1, 8007c1c <_reclaim_reent+0xa0>
 8007c0a:	3504      	adds	r5, #4
 8007c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c0e:	2d80      	cmp	r5, #128	; 0x80
 8007c10:	68d9      	ldr	r1, [r3, #12]
 8007c12:	d1f8      	bne.n	8007c06 <_reclaim_reent+0x8a>
 8007c14:	4620      	mov	r0, r4
 8007c16:	f7ff fe6f 	bl	80078f8 <_free_r>
 8007c1a:	e7ba      	b.n	8007b92 <_reclaim_reent+0x16>
 8007c1c:	680e      	ldr	r6, [r1, #0]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f7ff fe6a 	bl	80078f8 <_free_r>
 8007c24:	4631      	mov	r1, r6
 8007c26:	e7ef      	b.n	8007c08 <_reclaim_reent+0x8c>
 8007c28:	2500      	movs	r5, #0
 8007c2a:	e7ef      	b.n	8007c0c <_reclaim_reent+0x90>
 8007c2c:	bd70      	pop	{r4, r5, r6, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000010 	.word	0x20000010

08007c34 <_sbrk_r>:
 8007c34:	b538      	push	{r3, r4, r5, lr}
 8007c36:	2300      	movs	r3, #0
 8007c38:	4d05      	ldr	r5, [pc, #20]	; (8007c50 <_sbrk_r+0x1c>)
 8007c3a:	4604      	mov	r4, r0
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	602b      	str	r3, [r5, #0]
 8007c40:	f7f9 f90c 	bl	8000e5c <_sbrk>
 8007c44:	1c43      	adds	r3, r0, #1
 8007c46:	d102      	bne.n	8007c4e <_sbrk_r+0x1a>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	b103      	cbz	r3, 8007c4e <_sbrk_r+0x1a>
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	bd38      	pop	{r3, r4, r5, pc}
 8007c50:	20002908 	.word	0x20002908

08007c54 <__sread>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	460c      	mov	r4, r1
 8007c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c5c:	f000 fd52 	bl	8008704 <_read_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	bfab      	itete	ge
 8007c64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c66:	89a3      	ldrhlt	r3, [r4, #12]
 8007c68:	181b      	addge	r3, r3, r0
 8007c6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c6e:	bfac      	ite	ge
 8007c70:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c72:	81a3      	strhlt	r3, [r4, #12]
 8007c74:	bd10      	pop	{r4, pc}

08007c76 <__swrite>:
 8007c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7a:	461f      	mov	r7, r3
 8007c7c:	898b      	ldrh	r3, [r1, #12]
 8007c7e:	4605      	mov	r5, r0
 8007c80:	05db      	lsls	r3, r3, #23
 8007c82:	460c      	mov	r4, r1
 8007c84:	4616      	mov	r6, r2
 8007c86:	d505      	bpl.n	8007c94 <__swrite+0x1e>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c90:	f000 f9c8 	bl	8008024 <_lseek_r>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	4632      	mov	r2, r6
 8007c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007caa:	f000 b869 	b.w	8007d80 <_write_r>

08007cae <__sseek>:
 8007cae:	b510      	push	{r4, lr}
 8007cb0:	460c      	mov	r4, r1
 8007cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb6:	f000 f9b5 	bl	8008024 <_lseek_r>
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	89a3      	ldrh	r3, [r4, #12]
 8007cbe:	bf15      	itete	ne
 8007cc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cca:	81a3      	strheq	r3, [r4, #12]
 8007ccc:	bf18      	it	ne
 8007cce:	81a3      	strhne	r3, [r4, #12]
 8007cd0:	bd10      	pop	{r4, pc}

08007cd2 <__sclose>:
 8007cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd6:	f000 b8d3 	b.w	8007e80 <_close_r>
	...

08007cdc <__swbuf_r>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	460e      	mov	r6, r1
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	b118      	cbz	r0, 8007cee <__swbuf_r+0x12>
 8007ce6:	6983      	ldr	r3, [r0, #24]
 8007ce8:	b90b      	cbnz	r3, 8007cee <__swbuf_r+0x12>
 8007cea:	f7ff fd25 	bl	8007738 <__sinit>
 8007cee:	4b21      	ldr	r3, [pc, #132]	; (8007d74 <__swbuf_r+0x98>)
 8007cf0:	429c      	cmp	r4, r3
 8007cf2:	d12b      	bne.n	8007d4c <__swbuf_r+0x70>
 8007cf4:	686c      	ldr	r4, [r5, #4]
 8007cf6:	69a3      	ldr	r3, [r4, #24]
 8007cf8:	60a3      	str	r3, [r4, #8]
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	071a      	lsls	r2, r3, #28
 8007cfe:	d52f      	bpl.n	8007d60 <__swbuf_r+0x84>
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	b36b      	cbz	r3, 8007d60 <__swbuf_r+0x84>
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	6820      	ldr	r0, [r4, #0]
 8007d08:	b2f6      	uxtb	r6, r6
 8007d0a:	1ac0      	subs	r0, r0, r3
 8007d0c:	6963      	ldr	r3, [r4, #20]
 8007d0e:	4637      	mov	r7, r6
 8007d10:	4283      	cmp	r3, r0
 8007d12:	dc04      	bgt.n	8007d1e <__swbuf_r+0x42>
 8007d14:	4621      	mov	r1, r4
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 f948 	bl	8007fac <_fflush_r>
 8007d1c:	bb30      	cbnz	r0, 8007d6c <__swbuf_r+0x90>
 8007d1e:	68a3      	ldr	r3, [r4, #8]
 8007d20:	3001      	adds	r0, #1
 8007d22:	3b01      	subs	r3, #1
 8007d24:	60a3      	str	r3, [r4, #8]
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	6022      	str	r2, [r4, #0]
 8007d2c:	701e      	strb	r6, [r3, #0]
 8007d2e:	6963      	ldr	r3, [r4, #20]
 8007d30:	4283      	cmp	r3, r0
 8007d32:	d004      	beq.n	8007d3e <__swbuf_r+0x62>
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	07db      	lsls	r3, r3, #31
 8007d38:	d506      	bpl.n	8007d48 <__swbuf_r+0x6c>
 8007d3a:	2e0a      	cmp	r6, #10
 8007d3c:	d104      	bne.n	8007d48 <__swbuf_r+0x6c>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4628      	mov	r0, r5
 8007d42:	f000 f933 	bl	8007fac <_fflush_r>
 8007d46:	b988      	cbnz	r0, 8007d6c <__swbuf_r+0x90>
 8007d48:	4638      	mov	r0, r7
 8007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <__swbuf_r+0x9c>)
 8007d4e:	429c      	cmp	r4, r3
 8007d50:	d101      	bne.n	8007d56 <__swbuf_r+0x7a>
 8007d52:	68ac      	ldr	r4, [r5, #8]
 8007d54:	e7cf      	b.n	8007cf6 <__swbuf_r+0x1a>
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <__swbuf_r+0xa0>)
 8007d58:	429c      	cmp	r4, r3
 8007d5a:	bf08      	it	eq
 8007d5c:	68ec      	ldreq	r4, [r5, #12]
 8007d5e:	e7ca      	b.n	8007cf6 <__swbuf_r+0x1a>
 8007d60:	4621      	mov	r1, r4
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 f81e 	bl	8007da4 <__swsetup_r>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d0cb      	beq.n	8007d04 <__swbuf_r+0x28>
 8007d6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d70:	e7ea      	b.n	8007d48 <__swbuf_r+0x6c>
 8007d72:	bf00      	nop
 8007d74:	08008aec 	.word	0x08008aec
 8007d78:	08008b0c 	.word	0x08008b0c
 8007d7c:	08008acc 	.word	0x08008acc

08007d80 <_write_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4604      	mov	r4, r0
 8007d84:	4608      	mov	r0, r1
 8007d86:	4611      	mov	r1, r2
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4d05      	ldr	r5, [pc, #20]	; (8007da0 <_write_r+0x20>)
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7f9 f81e 	bl	8000dd0 <_write>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_write_r+0x1e>
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_write_r+0x1e>
 8007d9c:	6023      	str	r3, [r4, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20002908 	.word	0x20002908

08007da4 <__swsetup_r>:
 8007da4:	4b32      	ldr	r3, [pc, #200]	; (8007e70 <__swsetup_r+0xcc>)
 8007da6:	b570      	push	{r4, r5, r6, lr}
 8007da8:	681d      	ldr	r5, [r3, #0]
 8007daa:	4606      	mov	r6, r0
 8007dac:	460c      	mov	r4, r1
 8007dae:	b125      	cbz	r5, 8007dba <__swsetup_r+0x16>
 8007db0:	69ab      	ldr	r3, [r5, #24]
 8007db2:	b913      	cbnz	r3, 8007dba <__swsetup_r+0x16>
 8007db4:	4628      	mov	r0, r5
 8007db6:	f7ff fcbf 	bl	8007738 <__sinit>
 8007dba:	4b2e      	ldr	r3, [pc, #184]	; (8007e74 <__swsetup_r+0xd0>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	d10f      	bne.n	8007de0 <__swsetup_r+0x3c>
 8007dc0:	686c      	ldr	r4, [r5, #4]
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dc8:	0719      	lsls	r1, r3, #28
 8007dca:	d42c      	bmi.n	8007e26 <__swsetup_r+0x82>
 8007dcc:	06dd      	lsls	r5, r3, #27
 8007dce:	d411      	bmi.n	8007df4 <__swsetup_r+0x50>
 8007dd0:	2309      	movs	r3, #9
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	e03e      	b.n	8007e5e <__swsetup_r+0xba>
 8007de0:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <__swsetup_r+0xd4>)
 8007de2:	429c      	cmp	r4, r3
 8007de4:	d101      	bne.n	8007dea <__swsetup_r+0x46>
 8007de6:	68ac      	ldr	r4, [r5, #8]
 8007de8:	e7eb      	b.n	8007dc2 <__swsetup_r+0x1e>
 8007dea:	4b24      	ldr	r3, [pc, #144]	; (8007e7c <__swsetup_r+0xd8>)
 8007dec:	429c      	cmp	r4, r3
 8007dee:	bf08      	it	eq
 8007df0:	68ec      	ldreq	r4, [r5, #12]
 8007df2:	e7e6      	b.n	8007dc2 <__swsetup_r+0x1e>
 8007df4:	0758      	lsls	r0, r3, #29
 8007df6:	d512      	bpl.n	8007e1e <__swsetup_r+0x7a>
 8007df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dfa:	b141      	cbz	r1, 8007e0e <__swsetup_r+0x6a>
 8007dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e00:	4299      	cmp	r1, r3
 8007e02:	d002      	beq.n	8007e0a <__swsetup_r+0x66>
 8007e04:	4630      	mov	r0, r6
 8007e06:	f7ff fd77 	bl	80078f8 <_free_r>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e0e:	89a3      	ldrh	r3, [r4, #12]
 8007e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e14:	81a3      	strh	r3, [r4, #12]
 8007e16:	2300      	movs	r3, #0
 8007e18:	6063      	str	r3, [r4, #4]
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	6023      	str	r3, [r4, #0]
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	f043 0308 	orr.w	r3, r3, #8
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	b94b      	cbnz	r3, 8007e3e <__swsetup_r+0x9a>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e34:	d003      	beq.n	8007e3e <__swsetup_r+0x9a>
 8007e36:	4621      	mov	r1, r4
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f000 f929 	bl	8008090 <__smakebuf_r>
 8007e3e:	89a0      	ldrh	r0, [r4, #12]
 8007e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e44:	f010 0301 	ands.w	r3, r0, #1
 8007e48:	d00a      	beq.n	8007e60 <__swsetup_r+0xbc>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60a3      	str	r3, [r4, #8]
 8007e4e:	6963      	ldr	r3, [r4, #20]
 8007e50:	425b      	negs	r3, r3
 8007e52:	61a3      	str	r3, [r4, #24]
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	b943      	cbnz	r3, 8007e6a <__swsetup_r+0xc6>
 8007e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e5c:	d1ba      	bne.n	8007dd4 <__swsetup_r+0x30>
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	0781      	lsls	r1, r0, #30
 8007e62:	bf58      	it	pl
 8007e64:	6963      	ldrpl	r3, [r4, #20]
 8007e66:	60a3      	str	r3, [r4, #8]
 8007e68:	e7f4      	b.n	8007e54 <__swsetup_r+0xb0>
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	e7f7      	b.n	8007e5e <__swsetup_r+0xba>
 8007e6e:	bf00      	nop
 8007e70:	20000010 	.word	0x20000010
 8007e74:	08008aec 	.word	0x08008aec
 8007e78:	08008b0c 	.word	0x08008b0c
 8007e7c:	08008acc 	.word	0x08008acc

08007e80 <_close_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	2300      	movs	r3, #0
 8007e84:	4d05      	ldr	r5, [pc, #20]	; (8007e9c <_close_r+0x1c>)
 8007e86:	4604      	mov	r4, r0
 8007e88:	4608      	mov	r0, r1
 8007e8a:	602b      	str	r3, [r5, #0]
 8007e8c:	f7f8 ffb6 	bl	8000dfc <_close>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_close_r+0x1a>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_close_r+0x1a>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	20002908 	.word	0x20002908

08007ea0 <__sflush_r>:
 8007ea0:	898a      	ldrh	r2, [r1, #12]
 8007ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	0710      	lsls	r0, r2, #28
 8007eaa:	460c      	mov	r4, r1
 8007eac:	d458      	bmi.n	8007f60 <__sflush_r+0xc0>
 8007eae:	684b      	ldr	r3, [r1, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dc05      	bgt.n	8007ec0 <__sflush_r+0x20>
 8007eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dc02      	bgt.n	8007ec0 <__sflush_r+0x20>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ec2:	2e00      	cmp	r6, #0
 8007ec4:	d0f9      	beq.n	8007eba <__sflush_r+0x1a>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ecc:	682f      	ldr	r7, [r5, #0]
 8007ece:	602b      	str	r3, [r5, #0]
 8007ed0:	d032      	beq.n	8007f38 <__sflush_r+0x98>
 8007ed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	075a      	lsls	r2, r3, #29
 8007ed8:	d505      	bpl.n	8007ee6 <__sflush_r+0x46>
 8007eda:	6863      	ldr	r3, [r4, #4]
 8007edc:	1ac0      	subs	r0, r0, r3
 8007ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ee0:	b10b      	cbz	r3, 8007ee6 <__sflush_r+0x46>
 8007ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ee4:	1ac0      	subs	r0, r0, r3
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4602      	mov	r2, r0
 8007eea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eec:	4628      	mov	r0, r5
 8007eee:	6a21      	ldr	r1, [r4, #32]
 8007ef0:	47b0      	blx	r6
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	d106      	bne.n	8007f06 <__sflush_r+0x66>
 8007ef8:	6829      	ldr	r1, [r5, #0]
 8007efa:	291d      	cmp	r1, #29
 8007efc:	d82c      	bhi.n	8007f58 <__sflush_r+0xb8>
 8007efe:	4a2a      	ldr	r2, [pc, #168]	; (8007fa8 <__sflush_r+0x108>)
 8007f00:	40ca      	lsrs	r2, r1
 8007f02:	07d6      	lsls	r6, r2, #31
 8007f04:	d528      	bpl.n	8007f58 <__sflush_r+0xb8>
 8007f06:	2200      	movs	r2, #0
 8007f08:	6062      	str	r2, [r4, #4]
 8007f0a:	6922      	ldr	r2, [r4, #16]
 8007f0c:	04d9      	lsls	r1, r3, #19
 8007f0e:	6022      	str	r2, [r4, #0]
 8007f10:	d504      	bpl.n	8007f1c <__sflush_r+0x7c>
 8007f12:	1c42      	adds	r2, r0, #1
 8007f14:	d101      	bne.n	8007f1a <__sflush_r+0x7a>
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	b903      	cbnz	r3, 8007f1c <__sflush_r+0x7c>
 8007f1a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f1e:	602f      	str	r7, [r5, #0]
 8007f20:	2900      	cmp	r1, #0
 8007f22:	d0ca      	beq.n	8007eba <__sflush_r+0x1a>
 8007f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f28:	4299      	cmp	r1, r3
 8007f2a:	d002      	beq.n	8007f32 <__sflush_r+0x92>
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f7ff fce3 	bl	80078f8 <_free_r>
 8007f32:	2000      	movs	r0, #0
 8007f34:	6360      	str	r0, [r4, #52]	; 0x34
 8007f36:	e7c1      	b.n	8007ebc <__sflush_r+0x1c>
 8007f38:	6a21      	ldr	r1, [r4, #32]
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b0      	blx	r6
 8007f40:	1c41      	adds	r1, r0, #1
 8007f42:	d1c7      	bne.n	8007ed4 <__sflush_r+0x34>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0c4      	beq.n	8007ed4 <__sflush_r+0x34>
 8007f4a:	2b1d      	cmp	r3, #29
 8007f4c:	d001      	beq.n	8007f52 <__sflush_r+0xb2>
 8007f4e:	2b16      	cmp	r3, #22
 8007f50:	d101      	bne.n	8007f56 <__sflush_r+0xb6>
 8007f52:	602f      	str	r7, [r5, #0]
 8007f54:	e7b1      	b.n	8007eba <__sflush_r+0x1a>
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f5c:	81a3      	strh	r3, [r4, #12]
 8007f5e:	e7ad      	b.n	8007ebc <__sflush_r+0x1c>
 8007f60:	690f      	ldr	r7, [r1, #16]
 8007f62:	2f00      	cmp	r7, #0
 8007f64:	d0a9      	beq.n	8007eba <__sflush_r+0x1a>
 8007f66:	0793      	lsls	r3, r2, #30
 8007f68:	bf18      	it	ne
 8007f6a:	2300      	movne	r3, #0
 8007f6c:	680e      	ldr	r6, [r1, #0]
 8007f6e:	bf08      	it	eq
 8007f70:	694b      	ldreq	r3, [r1, #20]
 8007f72:	eba6 0807 	sub.w	r8, r6, r7
 8007f76:	600f      	str	r7, [r1, #0]
 8007f78:	608b      	str	r3, [r1, #8]
 8007f7a:	f1b8 0f00 	cmp.w	r8, #0
 8007f7e:	dd9c      	ble.n	8007eba <__sflush_r+0x1a>
 8007f80:	4643      	mov	r3, r8
 8007f82:	463a      	mov	r2, r7
 8007f84:	4628      	mov	r0, r5
 8007f86:	6a21      	ldr	r1, [r4, #32]
 8007f88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f8a:	47b0      	blx	r6
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	dc06      	bgt.n	8007f9e <__sflush_r+0xfe>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	e78e      	b.n	8007ebc <__sflush_r+0x1c>
 8007f9e:	4407      	add	r7, r0
 8007fa0:	eba8 0800 	sub.w	r8, r8, r0
 8007fa4:	e7e9      	b.n	8007f7a <__sflush_r+0xda>
 8007fa6:	bf00      	nop
 8007fa8:	20400001 	.word	0x20400001

08007fac <_fflush_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	690b      	ldr	r3, [r1, #16]
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	b913      	cbnz	r3, 8007fbc <_fflush_r+0x10>
 8007fb6:	2500      	movs	r5, #0
 8007fb8:	4628      	mov	r0, r5
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	b118      	cbz	r0, 8007fc6 <_fflush_r+0x1a>
 8007fbe:	6983      	ldr	r3, [r0, #24]
 8007fc0:	b90b      	cbnz	r3, 8007fc6 <_fflush_r+0x1a>
 8007fc2:	f7ff fbb9 	bl	8007738 <__sinit>
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <_fflush_r+0x6c>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	d11b      	bne.n	8008004 <_fflush_r+0x58>
 8007fcc:	686c      	ldr	r4, [r5, #4]
 8007fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0ef      	beq.n	8007fb6 <_fflush_r+0xa>
 8007fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fd8:	07d0      	lsls	r0, r2, #31
 8007fda:	d404      	bmi.n	8007fe6 <_fflush_r+0x3a>
 8007fdc:	0599      	lsls	r1, r3, #22
 8007fde:	d402      	bmi.n	8007fe6 <_fflush_r+0x3a>
 8007fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fe2:	f7f9 f8b3 	bl	800114c <__retarget_lock_acquire_recursive>
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	4621      	mov	r1, r4
 8007fea:	f7ff ff59 	bl	8007ea0 <__sflush_r>
 8007fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	07da      	lsls	r2, r3, #31
 8007ff4:	d4e0      	bmi.n	8007fb8 <_fflush_r+0xc>
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	059b      	lsls	r3, r3, #22
 8007ffa:	d4dd      	bmi.n	8007fb8 <_fflush_r+0xc>
 8007ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ffe:	f7f9 f8b9 	bl	8001174 <__retarget_lock_release_recursive>
 8008002:	e7d9      	b.n	8007fb8 <_fflush_r+0xc>
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <_fflush_r+0x70>)
 8008006:	429c      	cmp	r4, r3
 8008008:	d101      	bne.n	800800e <_fflush_r+0x62>
 800800a:	68ac      	ldr	r4, [r5, #8]
 800800c:	e7df      	b.n	8007fce <_fflush_r+0x22>
 800800e:	4b04      	ldr	r3, [pc, #16]	; (8008020 <_fflush_r+0x74>)
 8008010:	429c      	cmp	r4, r3
 8008012:	bf08      	it	eq
 8008014:	68ec      	ldreq	r4, [r5, #12]
 8008016:	e7da      	b.n	8007fce <_fflush_r+0x22>
 8008018:	08008aec 	.word	0x08008aec
 800801c:	08008b0c 	.word	0x08008b0c
 8008020:	08008acc 	.word	0x08008acc

08008024 <_lseek_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4604      	mov	r4, r0
 8008028:	4608      	mov	r0, r1
 800802a:	4611      	mov	r1, r2
 800802c:	2200      	movs	r2, #0
 800802e:	4d05      	ldr	r5, [pc, #20]	; (8008044 <_lseek_r+0x20>)
 8008030:	602a      	str	r2, [r5, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	f7f8 ff06 	bl	8000e44 <_lseek>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_lseek_r+0x1e>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_lseek_r+0x1e>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	20002908 	.word	0x20002908

08008048 <__swhatbuf_r>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	460e      	mov	r6, r1
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	4614      	mov	r4, r2
 8008052:	2900      	cmp	r1, #0
 8008054:	461d      	mov	r5, r3
 8008056:	b096      	sub	sp, #88	; 0x58
 8008058:	da07      	bge.n	800806a <__swhatbuf_r+0x22>
 800805a:	2300      	movs	r3, #0
 800805c:	602b      	str	r3, [r5, #0]
 800805e:	89b3      	ldrh	r3, [r6, #12]
 8008060:	061a      	lsls	r2, r3, #24
 8008062:	d410      	bmi.n	8008086 <__swhatbuf_r+0x3e>
 8008064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008068:	e00e      	b.n	8008088 <__swhatbuf_r+0x40>
 800806a:	466a      	mov	r2, sp
 800806c:	f000 fb5c 	bl	8008728 <_fstat_r>
 8008070:	2800      	cmp	r0, #0
 8008072:	dbf2      	blt.n	800805a <__swhatbuf_r+0x12>
 8008074:	9a01      	ldr	r2, [sp, #4]
 8008076:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800807a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800807e:	425a      	negs	r2, r3
 8008080:	415a      	adcs	r2, r3
 8008082:	602a      	str	r2, [r5, #0]
 8008084:	e7ee      	b.n	8008064 <__swhatbuf_r+0x1c>
 8008086:	2340      	movs	r3, #64	; 0x40
 8008088:	2000      	movs	r0, #0
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	b016      	add	sp, #88	; 0x58
 800808e:	bd70      	pop	{r4, r5, r6, pc}

08008090 <__smakebuf_r>:
 8008090:	898b      	ldrh	r3, [r1, #12]
 8008092:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008094:	079d      	lsls	r5, r3, #30
 8008096:	4606      	mov	r6, r0
 8008098:	460c      	mov	r4, r1
 800809a:	d507      	bpl.n	80080ac <__smakebuf_r+0x1c>
 800809c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	6123      	str	r3, [r4, #16]
 80080a4:	2301      	movs	r3, #1
 80080a6:	6163      	str	r3, [r4, #20]
 80080a8:	b002      	add	sp, #8
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	466a      	mov	r2, sp
 80080ae:	ab01      	add	r3, sp, #4
 80080b0:	f7ff ffca 	bl	8008048 <__swhatbuf_r>
 80080b4:	9900      	ldr	r1, [sp, #0]
 80080b6:	4605      	mov	r5, r0
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7ff fc69 	bl	8007990 <_malloc_r>
 80080be:	b948      	cbnz	r0, 80080d4 <__smakebuf_r+0x44>
 80080c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080c4:	059a      	lsls	r2, r3, #22
 80080c6:	d4ef      	bmi.n	80080a8 <__smakebuf_r+0x18>
 80080c8:	f023 0303 	bic.w	r3, r3, #3
 80080cc:	f043 0302 	orr.w	r3, r3, #2
 80080d0:	81a3      	strh	r3, [r4, #12]
 80080d2:	e7e3      	b.n	800809c <__smakebuf_r+0xc>
 80080d4:	4b0d      	ldr	r3, [pc, #52]	; (800810c <__smakebuf_r+0x7c>)
 80080d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	6020      	str	r0, [r4, #0]
 80080dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e0:	81a3      	strh	r3, [r4, #12]
 80080e2:	9b00      	ldr	r3, [sp, #0]
 80080e4:	6120      	str	r0, [r4, #16]
 80080e6:	6163      	str	r3, [r4, #20]
 80080e8:	9b01      	ldr	r3, [sp, #4]
 80080ea:	b15b      	cbz	r3, 8008104 <__smakebuf_r+0x74>
 80080ec:	4630      	mov	r0, r6
 80080ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080f2:	f000 fb2b 	bl	800874c <_isatty_r>
 80080f6:	b128      	cbz	r0, 8008104 <__smakebuf_r+0x74>
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	f023 0303 	bic.w	r3, r3, #3
 80080fe:	f043 0301 	orr.w	r3, r3, #1
 8008102:	81a3      	strh	r3, [r4, #12]
 8008104:	89a0      	ldrh	r0, [r4, #12]
 8008106:	4305      	orrs	r5, r0
 8008108:	81a5      	strh	r5, [r4, #12]
 800810a:	e7cd      	b.n	80080a8 <__smakebuf_r+0x18>
 800810c:	080076d1 	.word	0x080076d1

08008110 <__malloc_lock>:
 8008110:	4801      	ldr	r0, [pc, #4]	; (8008118 <__malloc_lock+0x8>)
 8008112:	f7f9 b81b 	b.w	800114c <__retarget_lock_acquire_recursive>
 8008116:	bf00      	nop
 8008118:	200000ac 	.word	0x200000ac

0800811c <__malloc_unlock>:
 800811c:	4801      	ldr	r0, [pc, #4]	; (8008124 <__malloc_unlock+0x8>)
 800811e:	f7f9 b829 	b.w	8001174 <__retarget_lock_release_recursive>
 8008122:	bf00      	nop
 8008124:	200000ac 	.word	0x200000ac

08008128 <__sfputc_r>:
 8008128:	6893      	ldr	r3, [r2, #8]
 800812a:	b410      	push	{r4}
 800812c:	3b01      	subs	r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	6093      	str	r3, [r2, #8]
 8008132:	da07      	bge.n	8008144 <__sfputc_r+0x1c>
 8008134:	6994      	ldr	r4, [r2, #24]
 8008136:	42a3      	cmp	r3, r4
 8008138:	db01      	blt.n	800813e <__sfputc_r+0x16>
 800813a:	290a      	cmp	r1, #10
 800813c:	d102      	bne.n	8008144 <__sfputc_r+0x1c>
 800813e:	bc10      	pop	{r4}
 8008140:	f7ff bdcc 	b.w	8007cdc <__swbuf_r>
 8008144:	6813      	ldr	r3, [r2, #0]
 8008146:	1c58      	adds	r0, r3, #1
 8008148:	6010      	str	r0, [r2, #0]
 800814a:	7019      	strb	r1, [r3, #0]
 800814c:	4608      	mov	r0, r1
 800814e:	bc10      	pop	{r4}
 8008150:	4770      	bx	lr

08008152 <__sfputs_r>:
 8008152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008154:	4606      	mov	r6, r0
 8008156:	460f      	mov	r7, r1
 8008158:	4614      	mov	r4, r2
 800815a:	18d5      	adds	r5, r2, r3
 800815c:	42ac      	cmp	r4, r5
 800815e:	d101      	bne.n	8008164 <__sfputs_r+0x12>
 8008160:	2000      	movs	r0, #0
 8008162:	e007      	b.n	8008174 <__sfputs_r+0x22>
 8008164:	463a      	mov	r2, r7
 8008166:	4630      	mov	r0, r6
 8008168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800816c:	f7ff ffdc 	bl	8008128 <__sfputc_r>
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d1f3      	bne.n	800815c <__sfputs_r+0xa>
 8008174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008178 <_vfiprintf_r>:
 8008178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817c:	460d      	mov	r5, r1
 800817e:	4614      	mov	r4, r2
 8008180:	4698      	mov	r8, r3
 8008182:	4606      	mov	r6, r0
 8008184:	b09d      	sub	sp, #116	; 0x74
 8008186:	b118      	cbz	r0, 8008190 <_vfiprintf_r+0x18>
 8008188:	6983      	ldr	r3, [r0, #24]
 800818a:	b90b      	cbnz	r3, 8008190 <_vfiprintf_r+0x18>
 800818c:	f7ff fad4 	bl	8007738 <__sinit>
 8008190:	4b89      	ldr	r3, [pc, #548]	; (80083b8 <_vfiprintf_r+0x240>)
 8008192:	429d      	cmp	r5, r3
 8008194:	d11b      	bne.n	80081ce <_vfiprintf_r+0x56>
 8008196:	6875      	ldr	r5, [r6, #4]
 8008198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800819a:	07d9      	lsls	r1, r3, #31
 800819c:	d405      	bmi.n	80081aa <_vfiprintf_r+0x32>
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	059a      	lsls	r2, r3, #22
 80081a2:	d402      	bmi.n	80081aa <_vfiprintf_r+0x32>
 80081a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081a6:	f7f8 ffd1 	bl	800114c <__retarget_lock_acquire_recursive>
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	071b      	lsls	r3, r3, #28
 80081ae:	d501      	bpl.n	80081b4 <_vfiprintf_r+0x3c>
 80081b0:	692b      	ldr	r3, [r5, #16]
 80081b2:	b9eb      	cbnz	r3, 80081f0 <_vfiprintf_r+0x78>
 80081b4:	4629      	mov	r1, r5
 80081b6:	4630      	mov	r0, r6
 80081b8:	f7ff fdf4 	bl	8007da4 <__swsetup_r>
 80081bc:	b1c0      	cbz	r0, 80081f0 <_vfiprintf_r+0x78>
 80081be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081c0:	07dc      	lsls	r4, r3, #31
 80081c2:	d50e      	bpl.n	80081e2 <_vfiprintf_r+0x6a>
 80081c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081c8:	b01d      	add	sp, #116	; 0x74
 80081ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ce:	4b7b      	ldr	r3, [pc, #492]	; (80083bc <_vfiprintf_r+0x244>)
 80081d0:	429d      	cmp	r5, r3
 80081d2:	d101      	bne.n	80081d8 <_vfiprintf_r+0x60>
 80081d4:	68b5      	ldr	r5, [r6, #8]
 80081d6:	e7df      	b.n	8008198 <_vfiprintf_r+0x20>
 80081d8:	4b79      	ldr	r3, [pc, #484]	; (80083c0 <_vfiprintf_r+0x248>)
 80081da:	429d      	cmp	r5, r3
 80081dc:	bf08      	it	eq
 80081de:	68f5      	ldreq	r5, [r6, #12]
 80081e0:	e7da      	b.n	8008198 <_vfiprintf_r+0x20>
 80081e2:	89ab      	ldrh	r3, [r5, #12]
 80081e4:	0598      	lsls	r0, r3, #22
 80081e6:	d4ed      	bmi.n	80081c4 <_vfiprintf_r+0x4c>
 80081e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081ea:	f7f8 ffc3 	bl	8001174 <__retarget_lock_release_recursive>
 80081ee:	e7e9      	b.n	80081c4 <_vfiprintf_r+0x4c>
 80081f0:	2300      	movs	r3, #0
 80081f2:	9309      	str	r3, [sp, #36]	; 0x24
 80081f4:	2320      	movs	r3, #32
 80081f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081fa:	2330      	movs	r3, #48	; 0x30
 80081fc:	f04f 0901 	mov.w	r9, #1
 8008200:	f8cd 800c 	str.w	r8, [sp, #12]
 8008204:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80083c4 <_vfiprintf_r+0x24c>
 8008208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800820c:	4623      	mov	r3, r4
 800820e:	469a      	mov	sl, r3
 8008210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008214:	b10a      	cbz	r2, 800821a <_vfiprintf_r+0xa2>
 8008216:	2a25      	cmp	r2, #37	; 0x25
 8008218:	d1f9      	bne.n	800820e <_vfiprintf_r+0x96>
 800821a:	ebba 0b04 	subs.w	fp, sl, r4
 800821e:	d00b      	beq.n	8008238 <_vfiprintf_r+0xc0>
 8008220:	465b      	mov	r3, fp
 8008222:	4622      	mov	r2, r4
 8008224:	4629      	mov	r1, r5
 8008226:	4630      	mov	r0, r6
 8008228:	f7ff ff93 	bl	8008152 <__sfputs_r>
 800822c:	3001      	adds	r0, #1
 800822e:	f000 80aa 	beq.w	8008386 <_vfiprintf_r+0x20e>
 8008232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008234:	445a      	add	r2, fp
 8008236:	9209      	str	r2, [sp, #36]	; 0x24
 8008238:	f89a 3000 	ldrb.w	r3, [sl]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80a2 	beq.w	8008386 <_vfiprintf_r+0x20e>
 8008242:	2300      	movs	r3, #0
 8008244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800824c:	f10a 0a01 	add.w	sl, sl, #1
 8008250:	9304      	str	r3, [sp, #16]
 8008252:	9307      	str	r3, [sp, #28]
 8008254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008258:	931a      	str	r3, [sp, #104]	; 0x68
 800825a:	4654      	mov	r4, sl
 800825c:	2205      	movs	r2, #5
 800825e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008262:	4858      	ldr	r0, [pc, #352]	; (80083c4 <_vfiprintf_r+0x24c>)
 8008264:	f000 fa82 	bl	800876c <memchr>
 8008268:	9a04      	ldr	r2, [sp, #16]
 800826a:	b9d8      	cbnz	r0, 80082a4 <_vfiprintf_r+0x12c>
 800826c:	06d1      	lsls	r1, r2, #27
 800826e:	bf44      	itt	mi
 8008270:	2320      	movmi	r3, #32
 8008272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008276:	0713      	lsls	r3, r2, #28
 8008278:	bf44      	itt	mi
 800827a:	232b      	movmi	r3, #43	; 0x2b
 800827c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008280:	f89a 3000 	ldrb.w	r3, [sl]
 8008284:	2b2a      	cmp	r3, #42	; 0x2a
 8008286:	d015      	beq.n	80082b4 <_vfiprintf_r+0x13c>
 8008288:	4654      	mov	r4, sl
 800828a:	2000      	movs	r0, #0
 800828c:	f04f 0c0a 	mov.w	ip, #10
 8008290:	9a07      	ldr	r2, [sp, #28]
 8008292:	4621      	mov	r1, r4
 8008294:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008298:	3b30      	subs	r3, #48	; 0x30
 800829a:	2b09      	cmp	r3, #9
 800829c:	d94e      	bls.n	800833c <_vfiprintf_r+0x1c4>
 800829e:	b1b0      	cbz	r0, 80082ce <_vfiprintf_r+0x156>
 80082a0:	9207      	str	r2, [sp, #28]
 80082a2:	e014      	b.n	80082ce <_vfiprintf_r+0x156>
 80082a4:	eba0 0308 	sub.w	r3, r0, r8
 80082a8:	fa09 f303 	lsl.w	r3, r9, r3
 80082ac:	4313      	orrs	r3, r2
 80082ae:	46a2      	mov	sl, r4
 80082b0:	9304      	str	r3, [sp, #16]
 80082b2:	e7d2      	b.n	800825a <_vfiprintf_r+0xe2>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	1d19      	adds	r1, r3, #4
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	9103      	str	r1, [sp, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	bfbb      	ittet	lt
 80082c0:	425b      	neglt	r3, r3
 80082c2:	f042 0202 	orrlt.w	r2, r2, #2
 80082c6:	9307      	strge	r3, [sp, #28]
 80082c8:	9307      	strlt	r3, [sp, #28]
 80082ca:	bfb8      	it	lt
 80082cc:	9204      	strlt	r2, [sp, #16]
 80082ce:	7823      	ldrb	r3, [r4, #0]
 80082d0:	2b2e      	cmp	r3, #46	; 0x2e
 80082d2:	d10c      	bne.n	80082ee <_vfiprintf_r+0x176>
 80082d4:	7863      	ldrb	r3, [r4, #1]
 80082d6:	2b2a      	cmp	r3, #42	; 0x2a
 80082d8:	d135      	bne.n	8008346 <_vfiprintf_r+0x1ce>
 80082da:	9b03      	ldr	r3, [sp, #12]
 80082dc:	3402      	adds	r4, #2
 80082de:	1d1a      	adds	r2, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	9203      	str	r2, [sp, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfb8      	it	lt
 80082e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80082ec:	9305      	str	r3, [sp, #20]
 80082ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083d4 <_vfiprintf_r+0x25c>
 80082f2:	2203      	movs	r2, #3
 80082f4:	4650      	mov	r0, sl
 80082f6:	7821      	ldrb	r1, [r4, #0]
 80082f8:	f000 fa38 	bl	800876c <memchr>
 80082fc:	b140      	cbz	r0, 8008310 <_vfiprintf_r+0x198>
 80082fe:	2340      	movs	r3, #64	; 0x40
 8008300:	eba0 000a 	sub.w	r0, r0, sl
 8008304:	fa03 f000 	lsl.w	r0, r3, r0
 8008308:	9b04      	ldr	r3, [sp, #16]
 800830a:	3401      	adds	r4, #1
 800830c:	4303      	orrs	r3, r0
 800830e:	9304      	str	r3, [sp, #16]
 8008310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008314:	2206      	movs	r2, #6
 8008316:	482c      	ldr	r0, [pc, #176]	; (80083c8 <_vfiprintf_r+0x250>)
 8008318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800831c:	f000 fa26 	bl	800876c <memchr>
 8008320:	2800      	cmp	r0, #0
 8008322:	d03f      	beq.n	80083a4 <_vfiprintf_r+0x22c>
 8008324:	4b29      	ldr	r3, [pc, #164]	; (80083cc <_vfiprintf_r+0x254>)
 8008326:	bb1b      	cbnz	r3, 8008370 <_vfiprintf_r+0x1f8>
 8008328:	9b03      	ldr	r3, [sp, #12]
 800832a:	3307      	adds	r3, #7
 800832c:	f023 0307 	bic.w	r3, r3, #7
 8008330:	3308      	adds	r3, #8
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008336:	443b      	add	r3, r7
 8008338:	9309      	str	r3, [sp, #36]	; 0x24
 800833a:	e767      	b.n	800820c <_vfiprintf_r+0x94>
 800833c:	460c      	mov	r4, r1
 800833e:	2001      	movs	r0, #1
 8008340:	fb0c 3202 	mla	r2, ip, r2, r3
 8008344:	e7a5      	b.n	8008292 <_vfiprintf_r+0x11a>
 8008346:	2300      	movs	r3, #0
 8008348:	f04f 0c0a 	mov.w	ip, #10
 800834c:	4619      	mov	r1, r3
 800834e:	3401      	adds	r4, #1
 8008350:	9305      	str	r3, [sp, #20]
 8008352:	4620      	mov	r0, r4
 8008354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008358:	3a30      	subs	r2, #48	; 0x30
 800835a:	2a09      	cmp	r2, #9
 800835c:	d903      	bls.n	8008366 <_vfiprintf_r+0x1ee>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0c5      	beq.n	80082ee <_vfiprintf_r+0x176>
 8008362:	9105      	str	r1, [sp, #20]
 8008364:	e7c3      	b.n	80082ee <_vfiprintf_r+0x176>
 8008366:	4604      	mov	r4, r0
 8008368:	2301      	movs	r3, #1
 800836a:	fb0c 2101 	mla	r1, ip, r1, r2
 800836e:	e7f0      	b.n	8008352 <_vfiprintf_r+0x1da>
 8008370:	ab03      	add	r3, sp, #12
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	462a      	mov	r2, r5
 8008376:	4630      	mov	r0, r6
 8008378:	4b15      	ldr	r3, [pc, #84]	; (80083d0 <_vfiprintf_r+0x258>)
 800837a:	a904      	add	r1, sp, #16
 800837c:	f3af 8000 	nop.w
 8008380:	4607      	mov	r7, r0
 8008382:	1c78      	adds	r0, r7, #1
 8008384:	d1d6      	bne.n	8008334 <_vfiprintf_r+0x1bc>
 8008386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008388:	07d9      	lsls	r1, r3, #31
 800838a:	d405      	bmi.n	8008398 <_vfiprintf_r+0x220>
 800838c:	89ab      	ldrh	r3, [r5, #12]
 800838e:	059a      	lsls	r2, r3, #22
 8008390:	d402      	bmi.n	8008398 <_vfiprintf_r+0x220>
 8008392:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008394:	f7f8 feee 	bl	8001174 <__retarget_lock_release_recursive>
 8008398:	89ab      	ldrh	r3, [r5, #12]
 800839a:	065b      	lsls	r3, r3, #25
 800839c:	f53f af12 	bmi.w	80081c4 <_vfiprintf_r+0x4c>
 80083a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083a2:	e711      	b.n	80081c8 <_vfiprintf_r+0x50>
 80083a4:	ab03      	add	r3, sp, #12
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	462a      	mov	r2, r5
 80083aa:	4630      	mov	r0, r6
 80083ac:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <_vfiprintf_r+0x258>)
 80083ae:	a904      	add	r1, sp, #16
 80083b0:	f000 f882 	bl	80084b8 <_printf_i>
 80083b4:	e7e4      	b.n	8008380 <_vfiprintf_r+0x208>
 80083b6:	bf00      	nop
 80083b8:	08008aec 	.word	0x08008aec
 80083bc:	08008b0c 	.word	0x08008b0c
 80083c0:	08008acc 	.word	0x08008acc
 80083c4:	08008b30 	.word	0x08008b30
 80083c8:	08008b3a 	.word	0x08008b3a
 80083cc:	00000000 	.word	0x00000000
 80083d0:	08008153 	.word	0x08008153
 80083d4:	08008b36 	.word	0x08008b36

080083d8 <_printf_common>:
 80083d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	4616      	mov	r6, r2
 80083de:	4699      	mov	r9, r3
 80083e0:	688a      	ldr	r2, [r1, #8]
 80083e2:	690b      	ldr	r3, [r1, #16]
 80083e4:	4607      	mov	r7, r0
 80083e6:	4293      	cmp	r3, r2
 80083e8:	bfb8      	it	lt
 80083ea:	4613      	movlt	r3, r2
 80083ec:	6033      	str	r3, [r6, #0]
 80083ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083f2:	460c      	mov	r4, r1
 80083f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083f8:	b10a      	cbz	r2, 80083fe <_printf_common+0x26>
 80083fa:	3301      	adds	r3, #1
 80083fc:	6033      	str	r3, [r6, #0]
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	0699      	lsls	r1, r3, #26
 8008402:	bf42      	ittt	mi
 8008404:	6833      	ldrmi	r3, [r6, #0]
 8008406:	3302      	addmi	r3, #2
 8008408:	6033      	strmi	r3, [r6, #0]
 800840a:	6825      	ldr	r5, [r4, #0]
 800840c:	f015 0506 	ands.w	r5, r5, #6
 8008410:	d106      	bne.n	8008420 <_printf_common+0x48>
 8008412:	f104 0a19 	add.w	sl, r4, #25
 8008416:	68e3      	ldr	r3, [r4, #12]
 8008418:	6832      	ldr	r2, [r6, #0]
 800841a:	1a9b      	subs	r3, r3, r2
 800841c:	42ab      	cmp	r3, r5
 800841e:	dc28      	bgt.n	8008472 <_printf_common+0x9a>
 8008420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008424:	1e13      	subs	r3, r2, #0
 8008426:	6822      	ldr	r2, [r4, #0]
 8008428:	bf18      	it	ne
 800842a:	2301      	movne	r3, #1
 800842c:	0692      	lsls	r2, r2, #26
 800842e:	d42d      	bmi.n	800848c <_printf_common+0xb4>
 8008430:	4649      	mov	r1, r9
 8008432:	4638      	mov	r0, r7
 8008434:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008438:	47c0      	blx	r8
 800843a:	3001      	adds	r0, #1
 800843c:	d020      	beq.n	8008480 <_printf_common+0xa8>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	68e5      	ldr	r5, [r4, #12]
 8008442:	f003 0306 	and.w	r3, r3, #6
 8008446:	2b04      	cmp	r3, #4
 8008448:	bf18      	it	ne
 800844a:	2500      	movne	r5, #0
 800844c:	6832      	ldr	r2, [r6, #0]
 800844e:	f04f 0600 	mov.w	r6, #0
 8008452:	68a3      	ldr	r3, [r4, #8]
 8008454:	bf08      	it	eq
 8008456:	1aad      	subeq	r5, r5, r2
 8008458:	6922      	ldr	r2, [r4, #16]
 800845a:	bf08      	it	eq
 800845c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008460:	4293      	cmp	r3, r2
 8008462:	bfc4      	itt	gt
 8008464:	1a9b      	subgt	r3, r3, r2
 8008466:	18ed      	addgt	r5, r5, r3
 8008468:	341a      	adds	r4, #26
 800846a:	42b5      	cmp	r5, r6
 800846c:	d11a      	bne.n	80084a4 <_printf_common+0xcc>
 800846e:	2000      	movs	r0, #0
 8008470:	e008      	b.n	8008484 <_printf_common+0xac>
 8008472:	2301      	movs	r3, #1
 8008474:	4652      	mov	r2, sl
 8008476:	4649      	mov	r1, r9
 8008478:	4638      	mov	r0, r7
 800847a:	47c0      	blx	r8
 800847c:	3001      	adds	r0, #1
 800847e:	d103      	bne.n	8008488 <_printf_common+0xb0>
 8008480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008488:	3501      	adds	r5, #1
 800848a:	e7c4      	b.n	8008416 <_printf_common+0x3e>
 800848c:	2030      	movs	r0, #48	; 0x30
 800848e:	18e1      	adds	r1, r4, r3
 8008490:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800849a:	4422      	add	r2, r4
 800849c:	3302      	adds	r3, #2
 800849e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084a2:	e7c5      	b.n	8008430 <_printf_common+0x58>
 80084a4:	2301      	movs	r3, #1
 80084a6:	4622      	mov	r2, r4
 80084a8:	4649      	mov	r1, r9
 80084aa:	4638      	mov	r0, r7
 80084ac:	47c0      	blx	r8
 80084ae:	3001      	adds	r0, #1
 80084b0:	d0e6      	beq.n	8008480 <_printf_common+0xa8>
 80084b2:	3601      	adds	r6, #1
 80084b4:	e7d9      	b.n	800846a <_printf_common+0x92>
	...

080084b8 <_printf_i>:
 80084b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	460c      	mov	r4, r1
 80084be:	7e27      	ldrb	r7, [r4, #24]
 80084c0:	4691      	mov	r9, r2
 80084c2:	2f78      	cmp	r7, #120	; 0x78
 80084c4:	4680      	mov	r8, r0
 80084c6:	469a      	mov	sl, r3
 80084c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80084ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084ce:	d807      	bhi.n	80084e0 <_printf_i+0x28>
 80084d0:	2f62      	cmp	r7, #98	; 0x62
 80084d2:	d80a      	bhi.n	80084ea <_printf_i+0x32>
 80084d4:	2f00      	cmp	r7, #0
 80084d6:	f000 80d9 	beq.w	800868c <_printf_i+0x1d4>
 80084da:	2f58      	cmp	r7, #88	; 0x58
 80084dc:	f000 80a4 	beq.w	8008628 <_printf_i+0x170>
 80084e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084e8:	e03a      	b.n	8008560 <_printf_i+0xa8>
 80084ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ee:	2b15      	cmp	r3, #21
 80084f0:	d8f6      	bhi.n	80084e0 <_printf_i+0x28>
 80084f2:	a001      	add	r0, pc, #4	; (adr r0, 80084f8 <_printf_i+0x40>)
 80084f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80084f8:	08008551 	.word	0x08008551
 80084fc:	08008565 	.word	0x08008565
 8008500:	080084e1 	.word	0x080084e1
 8008504:	080084e1 	.word	0x080084e1
 8008508:	080084e1 	.word	0x080084e1
 800850c:	080084e1 	.word	0x080084e1
 8008510:	08008565 	.word	0x08008565
 8008514:	080084e1 	.word	0x080084e1
 8008518:	080084e1 	.word	0x080084e1
 800851c:	080084e1 	.word	0x080084e1
 8008520:	080084e1 	.word	0x080084e1
 8008524:	08008673 	.word	0x08008673
 8008528:	08008595 	.word	0x08008595
 800852c:	08008655 	.word	0x08008655
 8008530:	080084e1 	.word	0x080084e1
 8008534:	080084e1 	.word	0x080084e1
 8008538:	08008695 	.word	0x08008695
 800853c:	080084e1 	.word	0x080084e1
 8008540:	08008595 	.word	0x08008595
 8008544:	080084e1 	.word	0x080084e1
 8008548:	080084e1 	.word	0x080084e1
 800854c:	0800865d 	.word	0x0800865d
 8008550:	680b      	ldr	r3, [r1, #0]
 8008552:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008556:	1d1a      	adds	r2, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	600a      	str	r2, [r1, #0]
 800855c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008560:	2301      	movs	r3, #1
 8008562:	e0a4      	b.n	80086ae <_printf_i+0x1f6>
 8008564:	6825      	ldr	r5, [r4, #0]
 8008566:	6808      	ldr	r0, [r1, #0]
 8008568:	062e      	lsls	r6, r5, #24
 800856a:	f100 0304 	add.w	r3, r0, #4
 800856e:	d50a      	bpl.n	8008586 <_printf_i+0xce>
 8008570:	6805      	ldr	r5, [r0, #0]
 8008572:	600b      	str	r3, [r1, #0]
 8008574:	2d00      	cmp	r5, #0
 8008576:	da03      	bge.n	8008580 <_printf_i+0xc8>
 8008578:	232d      	movs	r3, #45	; 0x2d
 800857a:	426d      	negs	r5, r5
 800857c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008580:	230a      	movs	r3, #10
 8008582:	485e      	ldr	r0, [pc, #376]	; (80086fc <_printf_i+0x244>)
 8008584:	e019      	b.n	80085ba <_printf_i+0x102>
 8008586:	f015 0f40 	tst.w	r5, #64	; 0x40
 800858a:	6805      	ldr	r5, [r0, #0]
 800858c:	600b      	str	r3, [r1, #0]
 800858e:	bf18      	it	ne
 8008590:	b22d      	sxthne	r5, r5
 8008592:	e7ef      	b.n	8008574 <_printf_i+0xbc>
 8008594:	680b      	ldr	r3, [r1, #0]
 8008596:	6825      	ldr	r5, [r4, #0]
 8008598:	1d18      	adds	r0, r3, #4
 800859a:	6008      	str	r0, [r1, #0]
 800859c:	0628      	lsls	r0, r5, #24
 800859e:	d501      	bpl.n	80085a4 <_printf_i+0xec>
 80085a0:	681d      	ldr	r5, [r3, #0]
 80085a2:	e002      	b.n	80085aa <_printf_i+0xf2>
 80085a4:	0669      	lsls	r1, r5, #25
 80085a6:	d5fb      	bpl.n	80085a0 <_printf_i+0xe8>
 80085a8:	881d      	ldrh	r5, [r3, #0]
 80085aa:	2f6f      	cmp	r7, #111	; 0x6f
 80085ac:	bf0c      	ite	eq
 80085ae:	2308      	moveq	r3, #8
 80085b0:	230a      	movne	r3, #10
 80085b2:	4852      	ldr	r0, [pc, #328]	; (80086fc <_printf_i+0x244>)
 80085b4:	2100      	movs	r1, #0
 80085b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085ba:	6866      	ldr	r6, [r4, #4]
 80085bc:	2e00      	cmp	r6, #0
 80085be:	bfa8      	it	ge
 80085c0:	6821      	ldrge	r1, [r4, #0]
 80085c2:	60a6      	str	r6, [r4, #8]
 80085c4:	bfa4      	itt	ge
 80085c6:	f021 0104 	bicge.w	r1, r1, #4
 80085ca:	6021      	strge	r1, [r4, #0]
 80085cc:	b90d      	cbnz	r5, 80085d2 <_printf_i+0x11a>
 80085ce:	2e00      	cmp	r6, #0
 80085d0:	d04d      	beq.n	800866e <_printf_i+0x1b6>
 80085d2:	4616      	mov	r6, r2
 80085d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80085d8:	fb03 5711 	mls	r7, r3, r1, r5
 80085dc:	5dc7      	ldrb	r7, [r0, r7]
 80085de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085e2:	462f      	mov	r7, r5
 80085e4:	42bb      	cmp	r3, r7
 80085e6:	460d      	mov	r5, r1
 80085e8:	d9f4      	bls.n	80085d4 <_printf_i+0x11c>
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d10b      	bne.n	8008606 <_printf_i+0x14e>
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	07df      	lsls	r7, r3, #31
 80085f2:	d508      	bpl.n	8008606 <_printf_i+0x14e>
 80085f4:	6923      	ldr	r3, [r4, #16]
 80085f6:	6861      	ldr	r1, [r4, #4]
 80085f8:	4299      	cmp	r1, r3
 80085fa:	bfde      	ittt	le
 80085fc:	2330      	movle	r3, #48	; 0x30
 80085fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008602:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008606:	1b92      	subs	r2, r2, r6
 8008608:	6122      	str	r2, [r4, #16]
 800860a:	464b      	mov	r3, r9
 800860c:	4621      	mov	r1, r4
 800860e:	4640      	mov	r0, r8
 8008610:	f8cd a000 	str.w	sl, [sp]
 8008614:	aa03      	add	r2, sp, #12
 8008616:	f7ff fedf 	bl	80083d8 <_printf_common>
 800861a:	3001      	adds	r0, #1
 800861c:	d14c      	bne.n	80086b8 <_printf_i+0x200>
 800861e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008622:	b004      	add	sp, #16
 8008624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008628:	4834      	ldr	r0, [pc, #208]	; (80086fc <_printf_i+0x244>)
 800862a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800862e:	680e      	ldr	r6, [r1, #0]
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	f856 5b04 	ldr.w	r5, [r6], #4
 8008636:	061f      	lsls	r7, r3, #24
 8008638:	600e      	str	r6, [r1, #0]
 800863a:	d514      	bpl.n	8008666 <_printf_i+0x1ae>
 800863c:	07d9      	lsls	r1, r3, #31
 800863e:	bf44      	itt	mi
 8008640:	f043 0320 	orrmi.w	r3, r3, #32
 8008644:	6023      	strmi	r3, [r4, #0]
 8008646:	b91d      	cbnz	r5, 8008650 <_printf_i+0x198>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	f023 0320 	bic.w	r3, r3, #32
 800864e:	6023      	str	r3, [r4, #0]
 8008650:	2310      	movs	r3, #16
 8008652:	e7af      	b.n	80085b4 <_printf_i+0xfc>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	f043 0320 	orr.w	r3, r3, #32
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	2378      	movs	r3, #120	; 0x78
 800865e:	4828      	ldr	r0, [pc, #160]	; (8008700 <_printf_i+0x248>)
 8008660:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008664:	e7e3      	b.n	800862e <_printf_i+0x176>
 8008666:	065e      	lsls	r6, r3, #25
 8008668:	bf48      	it	mi
 800866a:	b2ad      	uxthmi	r5, r5
 800866c:	e7e6      	b.n	800863c <_printf_i+0x184>
 800866e:	4616      	mov	r6, r2
 8008670:	e7bb      	b.n	80085ea <_printf_i+0x132>
 8008672:	680b      	ldr	r3, [r1, #0]
 8008674:	6826      	ldr	r6, [r4, #0]
 8008676:	1d1d      	adds	r5, r3, #4
 8008678:	6960      	ldr	r0, [r4, #20]
 800867a:	600d      	str	r5, [r1, #0]
 800867c:	0635      	lsls	r5, r6, #24
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	d501      	bpl.n	8008686 <_printf_i+0x1ce>
 8008682:	6018      	str	r0, [r3, #0]
 8008684:	e002      	b.n	800868c <_printf_i+0x1d4>
 8008686:	0671      	lsls	r1, r6, #25
 8008688:	d5fb      	bpl.n	8008682 <_printf_i+0x1ca>
 800868a:	8018      	strh	r0, [r3, #0]
 800868c:	2300      	movs	r3, #0
 800868e:	4616      	mov	r6, r2
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	e7ba      	b.n	800860a <_printf_i+0x152>
 8008694:	680b      	ldr	r3, [r1, #0]
 8008696:	1d1a      	adds	r2, r3, #4
 8008698:	600a      	str	r2, [r1, #0]
 800869a:	681e      	ldr	r6, [r3, #0]
 800869c:	2100      	movs	r1, #0
 800869e:	4630      	mov	r0, r6
 80086a0:	6862      	ldr	r2, [r4, #4]
 80086a2:	f000 f863 	bl	800876c <memchr>
 80086a6:	b108      	cbz	r0, 80086ac <_printf_i+0x1f4>
 80086a8:	1b80      	subs	r0, r0, r6
 80086aa:	6060      	str	r0, [r4, #4]
 80086ac:	6863      	ldr	r3, [r4, #4]
 80086ae:	6123      	str	r3, [r4, #16]
 80086b0:	2300      	movs	r3, #0
 80086b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b6:	e7a8      	b.n	800860a <_printf_i+0x152>
 80086b8:	4632      	mov	r2, r6
 80086ba:	4649      	mov	r1, r9
 80086bc:	4640      	mov	r0, r8
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	47d0      	blx	sl
 80086c2:	3001      	adds	r0, #1
 80086c4:	d0ab      	beq.n	800861e <_printf_i+0x166>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	079b      	lsls	r3, r3, #30
 80086ca:	d413      	bmi.n	80086f4 <_printf_i+0x23c>
 80086cc:	68e0      	ldr	r0, [r4, #12]
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	4298      	cmp	r0, r3
 80086d2:	bfb8      	it	lt
 80086d4:	4618      	movlt	r0, r3
 80086d6:	e7a4      	b.n	8008622 <_printf_i+0x16a>
 80086d8:	2301      	movs	r3, #1
 80086da:	4632      	mov	r2, r6
 80086dc:	4649      	mov	r1, r9
 80086de:	4640      	mov	r0, r8
 80086e0:	47d0      	blx	sl
 80086e2:	3001      	adds	r0, #1
 80086e4:	d09b      	beq.n	800861e <_printf_i+0x166>
 80086e6:	3501      	adds	r5, #1
 80086e8:	68e3      	ldr	r3, [r4, #12]
 80086ea:	9903      	ldr	r1, [sp, #12]
 80086ec:	1a5b      	subs	r3, r3, r1
 80086ee:	42ab      	cmp	r3, r5
 80086f0:	dcf2      	bgt.n	80086d8 <_printf_i+0x220>
 80086f2:	e7eb      	b.n	80086cc <_printf_i+0x214>
 80086f4:	2500      	movs	r5, #0
 80086f6:	f104 0619 	add.w	r6, r4, #25
 80086fa:	e7f5      	b.n	80086e8 <_printf_i+0x230>
 80086fc:	08008b41 	.word	0x08008b41
 8008700:	08008b52 	.word	0x08008b52

08008704 <_read_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4604      	mov	r4, r0
 8008708:	4608      	mov	r0, r1
 800870a:	4611      	mov	r1, r2
 800870c:	2200      	movs	r2, #0
 800870e:	4d05      	ldr	r5, [pc, #20]	; (8008724 <_read_r+0x20>)
 8008710:	602a      	str	r2, [r5, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	f7f8 fb3e 	bl	8000d94 <_read>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_read_r+0x1e>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_read_r+0x1e>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	20002908 	.word	0x20002908

08008728 <_fstat_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	2300      	movs	r3, #0
 800872c:	4d06      	ldr	r5, [pc, #24]	; (8008748 <_fstat_r+0x20>)
 800872e:	4604      	mov	r4, r0
 8008730:	4608      	mov	r0, r1
 8008732:	4611      	mov	r1, r2
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	f7f8 fb6c 	bl	8000e12 <_fstat>
 800873a:	1c43      	adds	r3, r0, #1
 800873c:	d102      	bne.n	8008744 <_fstat_r+0x1c>
 800873e:	682b      	ldr	r3, [r5, #0]
 8008740:	b103      	cbz	r3, 8008744 <_fstat_r+0x1c>
 8008742:	6023      	str	r3, [r4, #0]
 8008744:	bd38      	pop	{r3, r4, r5, pc}
 8008746:	bf00      	nop
 8008748:	20002908 	.word	0x20002908

0800874c <_isatty_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	2300      	movs	r3, #0
 8008750:	4d05      	ldr	r5, [pc, #20]	; (8008768 <_isatty_r+0x1c>)
 8008752:	4604      	mov	r4, r0
 8008754:	4608      	mov	r0, r1
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	f7f8 fb6a 	bl	8000e30 <_isatty>
 800875c:	1c43      	adds	r3, r0, #1
 800875e:	d102      	bne.n	8008766 <_isatty_r+0x1a>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	b103      	cbz	r3, 8008766 <_isatty_r+0x1a>
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	bd38      	pop	{r3, r4, r5, pc}
 8008768:	20002908 	.word	0x20002908

0800876c <memchr>:
 800876c:	4603      	mov	r3, r0
 800876e:	b510      	push	{r4, lr}
 8008770:	b2c9      	uxtb	r1, r1
 8008772:	4402      	add	r2, r0
 8008774:	4293      	cmp	r3, r2
 8008776:	4618      	mov	r0, r3
 8008778:	d101      	bne.n	800877e <memchr+0x12>
 800877a:	2000      	movs	r0, #0
 800877c:	e003      	b.n	8008786 <memchr+0x1a>
 800877e:	7804      	ldrb	r4, [r0, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	428c      	cmp	r4, r1
 8008784:	d1f6      	bne.n	8008774 <memchr+0x8>
 8008786:	bd10      	pop	{r4, pc}

08008788 <_init>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	bf00      	nop
 800878c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878e:	bc08      	pop	{r3}
 8008790:	469e      	mov	lr, r3
 8008792:	4770      	bx	lr

08008794 <_fini>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	bf00      	nop
 8008798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879a:	bc08      	pop	{r3}
 800879c:	469e      	mov	lr, r3
 800879e:	4770      	bx	lr
